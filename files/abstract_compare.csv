origin_center_point,abstracted_center_point
"HWTEST_F(TelRilCommonTest, TelRilSms_ConvertHexCharToInt_001, Function | MediumTest | Level1)
{
    auto rilInterface = HDI::Ril::V1_4::IRil::Get();
    std::shared_ptr<ObserverHandler> observerHandler = std::make_shared<ObserverHandler>();
    auto telRilSms = std::make_shared<TelRilSms>(0, rilInterface, observerHandler, nullptr);
    uint8_t ch = 'a';
    uint8_t expected = 10;
    uint8_t actual = telRilSms->ConvertHexCharToInt(ch);
    EXPECT_EQ(expected, actual);
}","HWTEST_F(TelRilCommonTest, <TYPE>, Function | MediumTest | Level1) { auto rilInterface = HDI::Ril::V1_4::IRil::Get(); std::shared_ptr<ObserverHandler> observerHandler = std::make_shared<ObserverHandler>(); auto telRilSms = std::make_shared<TelRilSms>(0, rilInterface, observerHandler, nullptr); uint8_t ch = <STR>; uint8_t expected = <CONST>; uint8_t actual = telRilSms->ConvertHexCharToInt(ch); EXPECT_EQ(expected, actual); }"
"HWTEST_F(TelRilCommonTest, TelRilSms_GetSmscAddrResponse_001, Function | MediumTest | Level1)
{
    auto rilInterface = HDI::Ril::V1_4::IRil::Get();
    std::shared_ptr<ObserverHandler> observerHandler = std::make_shared<ObserverHandler>();
    auto telRilSms = std::make_shared<TelRilSms>(0, rilInterface, observerHandler, nullptr);
    HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    HDI::Ril::V1_1::ServiceCenterAddress serviceCenterAddress;
    int32_t result = telRilSms->GetSmscAddrResponse(responseInfo, serviceCenterAddress);
    ASSERT_NE(result, 1);
}","HWTEST_F(TelRilCommonTest, <TYPE>, Function | MediumTest | Level1) { auto rilInterface = HDI::Ril::V1_4::IRil::Get(); std::shared_ptr<ObserverHandler> observerHandler = std::make_shared<ObserverHandler>(); auto telRilSms = std::make_shared<TelRilSms>(0, rilInterface, observerHandler, nullptr); HDI::Ril::V1_1::RilRadioResponseInfo responseInfo; HDI::Ril::V1_1::<TYPE> <VAR>; int32_t result = telRilSms->GetSmscAddrResponse(responseInfo, <VAR>); ASSERT_NE(result, 1); }"
"HWTEST_F(TelRilCommonTest, TelRilCall_GetCallListResponse_001, Function | MediumTest | Level1)
{
    auto rilInterface = HDI::Ril::V1_4::IRil::Get();
    std::shared_ptr<ObserverHandler> observerHandler = std::make_shared<ObserverHandler>();
    auto telRilCall = std::make_shared<TelRilCall>(0, rilInterface, observerHandler, nullptr);
    HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    responseInfo.error = HDI::Ril::V1_1::RilErrType::RIL_ERR_GENERIC_FAILURE;
    HDI::Ril::V1_1::CallInfoList callInfoList;
    auto result = telRilCall->GetCallListResponse(responseInfo, callInfoList);
    EXPECT_EQ(result, TELEPHONY_ERR_ARGUMENT_INVALID);
}","HWTEST_F(TelRilCommonTest, <TYPE>, Function | MediumTest | Level1) { auto rilInterface = HDI::Ril::V1_4::IRil::Get(); std::shared_ptr<ObserverHandler> observerHandler = std::make_shared<ObserverHandler>(); auto telRilCall = std::make_shared<TelRilCall>(0, rilInterface, observerHandler, nullptr); HDI::Ril::V1_1::RilRadioResponseInfo responseInfo; responseInfo.error = HDI::Ril::V1_1::RilErrType::RIL_ERR_GENERIC_FAILURE; HDI::Ril::V1_1::<TYPE> <VAR>; auto result = telRilCall->GetCallListResponse(responseInfo, <VAR>); EXPECT_EQ(result, TELEPHONY_ERR_ARGUMENT_INVALID); }"
"HWTEST_F(TelRilCommonTest, TelRilCall_GetCallWaitingResponse_001, Function | MediumTest | Level1)
{
    auto rilInterface = HDI::Ril::V1_4::IRil::Get();
    std::shared_ptr<ObserverHandler> observerHandler = std::make_shared<ObserverHandler>();
    auto telRilCall = std::make_shared<TelRilCall>(0, rilInterface, observerHandler, nullptr);
    HDI::Ril::V1_1::RilRadioResponseInfo responseInfo;
    responseInfo.error = HDI::Ril::V1_1::RilErrType::RIL_ERR_GENERIC_FAILURE;
    HDI::Ril::V1_1::CallWaitResult callWaitResult;
    auto result = telRilCall->GetCallWaitingResponse(responseInfo, callWaitResult);
    EXPECT_EQ(result, TELEPHONY_ERR_ARGUMENT_INVALID);
}","HWTEST_F(TelRilCommonTest, <TYPE>, Function | MediumTest | Level1) { auto rilInterface = HDI::Ril::V1_4::IRil::Get(); std::shared_ptr<ObserverHandler> observerHandler = std::make_shared<ObserverHandler>(); auto telRilCall = std::make_shared<TelRilCall>(0, rilInterface, observerHandler, nullptr); HDI::Ril::V1_1::RilRadioResponseInfo responseInfo; responseInfo.error = HDI::Ril::V1_1::RilErrType::RIL_ERR_GENERIC_FAILURE; HDI::Ril::V1_1::<TYPE> <VAR>; auto result = telRilCall->GetCallWaitingResponse(responseInfo, <VAR>); EXPECT_EQ(result, TELEPHONY_ERR_ARGUMENT_INVALID); }"
"HWTEST_F(TelRilCommonTest, TelRilData_NetworkSliceUrspRpt_001, Function | MediumTest | Level1)
{
    auto rilInterface = HDI::Ril::V1_4::IRil::Get();
    std::shared_ptr<ObserverHandler> observerHandler = std::make_shared<ObserverHandler>();
    auto telRilData = std::make_unique<TelRilData>(0, rilInterface, observerHandler, nullptr);
    HDI::Ril::V1_4::NetworkSliceUrspInfo networksliceUrspInfo;
    networksliceUrspInfo.urspInfo.push_back(1);
    auto result = telRilData->NetworkSliceUrspRpt(networksliceUrspInfo);
    ASSERT_EQ(result, TELEPHONY_ERR_SUCCESS);
}","HWTEST_F(TelRilCommonTest, <TYPE>, Function | MediumTest | Level1) { auto rilInterface = HDI::Ril::V1_4::IRil::Get(); std::shared_ptr<ObserverHandler> observerHandler = std::make_shared<ObserverHandler>(); auto telRilData = std::make_unique<TelRilData>(0, rilInterface, observerHandler, nullptr); HDI::Ril::V1_4::<TYPE> <VAR>; <VAR>.<VAR>.push_back(1); auto result = telRilData->NetworkSliceUrspRpt(<VAR>); ASSERT_EQ(result, TELEPHONY_ERR_SUCCESS); }"
"HWTEST_F(IccFileTest, Telephony_IccFile_002, Function | MediumTest | Level1)
{
    std::string imsi = ""ABC"";
    std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>();
    auto simStateManager = std::make_shared<SimStateManager>(telRilManager);
    std::shared_ptr<IccFile> iccFile = std::make_shared<IsimFile>(simStateManager);
    iccFile->Init();
    iccFile->UpdateImsi(imsi);
    std::string ret = iccFile->ObtainMNC();
    EXPECT_TRUE(ret.empty());
}","HWTEST_F(IccFileTest, <TYPE>, Function | MediumTest | Level1) { std::string imsi = ""ABC""; std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>(); auto simStateManager = std::make_shared<SimStateManager>(telRilManager); std::shared_ptr<IccFile> iccFile = std::make_shared<IsimFile>(simStateManager); iccFile->Init(); iccFile->UpdateImsi(imsi); std::string ret = iccFile->ObtainMNC(); EXPECT_TRUE(ret.empty()); }"
"HWTEST_F(IccFileTest, Telephony_IccFile_008, Function | MediumTest | Level1)
{
    std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>();
    auto simStateManager = std::make_shared<SimStateManager>(telRilManager);
    simStateManager = nullptr;
    std::shared_ptr<IccFile> iccFile = std::make_shared<IsimFile>(simStateManager);
    std::shared_ptr<AppExecFwk::EventHandler> handler = nullptr;
    iccFile->filesFetchedObser_ = nullptr;
    iccFile->UnregisterImsiLoaded(handler);
    EXPECT_EQ(iccFile->filesFetchedObser_, nullptr);
}","HWTEST_F(IccFileTest, <TYPE>, Function | MediumTest | Level1) { std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>(); auto simStateManager = std::make_shared<SimStateManager>(telRilManager); simStateManager = nullptr; std::shared_ptr<IccFile> iccFile = std::make_shared<IsimFile>(simStateManager); std::shared_ptr<AppExecFwk::EventHandler> <VAR> = nullptr; iccFile->filesFetchedObser_ = nullptr; iccFile->UnregisterImsiLoaded(<VAR>); EXPECT_EQ(iccFile->filesFetchedObser_, <VAR>); }"
"void SimUtilsTest::SetUpTestCase()
{
    constexpr int permissionNum = 2;
    const char *perms[permissionNum] = {""ohos.permission.GET_TELEPHONY_STATE"",
        ""ohos.permission.SET_TELEPHONY_STATE""};
    NativeTokenInfoParams infoInstance = {.dcapsNum = 0, .permsNum = permissionNum, .aclsNum = 0, .dcaps = nullptr,
        .perms = perms, .acls = nullptr, .processName = ""SimUtilsTest"", .aplStr = ""system_basic"",
    };
    uint64_t tokenId = GetAccessTokenId(&infoInstance);
    SetSelfTokenID(tokenId);
    auto result = Security::AccessToken::AccessTokenKit::ReloadNativeTokenInfo();
    EXPECT_EQ(result, Security::AccessToken::RET_SUCCESS);
}","void <TYPE>::SetUpTestCase() { constexpr int permissionNum = 2; const char *perms[permissionNum] = {""ohos.permission.GET_TELEPHONY_STATE"", ""ohos.permission.SET_TELEPHONY_STATE""}; NativeTokenInfoParams infoInstance = {.dcapsNum = 0, .permsNum = permissionNum, .aclsNum = 0, .dcaps = nullptr, .perms = perms, .acls = nullptr, .processName = <STR>, .aplStr = ""system_basic"", }; uint64_t tokenId = GetAccessTokenId(&infoInstance); SetSelfTokenID(tokenId); auto result = Security::AccessToken::AccessTokenKit::ReloadNativeTokenInfo(); EXPECT_EQ(result, Security::AccessToken::RET_SUCCESS); }"
"HWTEST_F(MultiSimControllerTest, MultiSimControllerTest_GetShowNumber_001, Function | MediumTest | Level1)
{
    std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>();
    auto simStateManager0 = std::make_shared<Telephony::SimStateManager>(telRilManager);
    simStateManager0->Init(0);
    simStateManager0->simStateHandle_->iccState_.simStatus_ = ICC_CONTENT_READY;
    auto simStateManager1 = std::make_shared<Telephony::SimStateManager>(telRilManager);
    simStateManager1->Init(1);
    simStateManager1->simStateHandle_->iccState_.simStatus_ = ICC_CONTENT_READY;
    std::vector<std::shared_ptr<Telephony::SimStateManager>> simStateManager_ = { simStateManager0, simStateManager1 };
    EventFwk::MatchingSkills matchingSkills;
    matchingSkills.AddEvent(CommonEventSupport::COMMON_EVENT_OPERATOR_CONFIG_CHANGED);
    EventFwk::CommonEventSubscribeInfo subcribeInfo(matchingSkills);
    auto simFileManager = std::make_shared<SimFileManager>(subcribeInfo, telRilManager, simStateManager0);
    simFileManager->simFile_ = std::make_shared<SimFile>(simStateManager0);
    simFileManager->simFile_->msisdn_ = ""2164181618486135"";
    std::vector<std::shared_ptr<Telephony::SimFileManager>> simFileManager_ = { simFileManager, nullptr };
    std::shared_ptr<Telephony::MultiSimController> multiSimController =
        std::make_shared<MultiSimController>(telRilManager, simStateManager_, simFileManager_);
    multiSimController->maxCount_ = 2;
    multiSimController->Init();
    std::vector<SimRdbInfo> newCache;
    newCache.resize(1);
    std::u16string showNumber = u"""";
    newCache[0].phoneNumber = ""2164181618486135"";
    multiSimController->simStateManager_ = { simStateManager0, simStateManager1 };
    multiSimController->localCacheInfo_ = newCache;
    int32_t result = multiSimController->GetShowNumber(0, showNumber);
    EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
    result = multiSimController->GetShowNumber(1, showNumber);
    newCache[0].phoneNumber = ""2164181618486139"";
    multiSimController->localCacheInfo_ = newCache;
    result = multiSimController->GetShowNumber(0, showNumber);
    EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
}","HWTEST_F(MultiSimControllerTest, <TYPE>, Function | MediumTest | Level1) { std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>(); auto simStateManager0 = std::make_shared<Telephony::SimStateManager>(telRilManager); simStateManager0->Init(0); simStateManager0->simStateHandle_->iccState_.simStatus_ = ICC_CONTENT_READY; auto simStateManager1 = std::make_shared<Telephony::SimStateManager>(telRilManager); simStateManager1->Init(1); simStateManager1->simStateHandle_->iccState_.simStatus_ = ICC_CONTENT_READY; std::vector<std::shared_ptr<Telephony::SimStateManager>> simStateManager_ = { simStateManager0, simStateManager1 }; EventFwk::MatchingSkills matchingSkills; matchingSkills.AddEvent(CommonEventSupport::COMMON_EVENT_OPERATOR_CONFIG_CHANGED); EventFwk::CommonEventSubscribeInfo subcribeInfo(matchingSkills); auto simFileManager = std::make_shared<SimFileManager>(subcribeInfo, telRilManager, simStateManager0); simFileManager->simFile_ = std::make_shared<SimFile>(simStateManager0); simFileManager->simFile_->msisdn_ = ""2164181618486135""; std::vector<std::shared_ptr<Telephony::SimFileManager>> simFileManager_ = { simFileManager, nullptr }; std::shared_ptr<Telephony::MultiSimController> multiSimController = std::make_shared<MultiSimController>(telRilManager, simStateManager_, simFileManager_); multiSimController->maxCount_ = 2; multiSimController->Init(); std::vector<SimRdbInfo> newCache; newCache.resize(1); std::u16string showNumber = u""""; newCache[0].phoneNumber = ""2164181618486135""; multiSimController->simStateManager_ = { simStateManager0, simStateManager1 }; multiSimController->localCacheInfo_ = newCache; int32_t result = multiSimController->GetShowNumber(0, showNumber); EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS); result = multiSimController->GetShowNumber(1, showNumber); newCache[0].phoneNumber = ""2164181618486139""; multiSimController->localCacheInfo_ = newCache; result = multiSimController->GetShowNumber(0, showNumber); EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS); }"
"HWTEST_F(SimSmsControllerTest, Telephony_Sim_ProcessEvent_001, Function | MediumTest | Level1)
{
    auto telRilManager_ = std::make_shared<TelRilManager>();
    auto stateManager_ = std::make_shared<SimStateManager>(telRilManager_);
    auto simSmsController = std::make_shared<SimSmsController>(stateManager_);
    AppExecFwk::InnerEvent::Pointer event = AppExecFwk::InnerEvent::Get(SIM_SMS_GET_COMPLETED, 1);
    simSmsController->ProcessEvent(event);
    EXPECT_EQ(simSmsController->loadDone_, true);
}","HWTEST_F(SimSmsControllerTest, <TYPE>, Function | MediumTest | Level1) { auto telRilManager_ = std::make_shared<TelRilManager>(); auto stateManager_ = std::make_shared<SimStateManager>(telRilManager_); auto simSmsController = std::make_shared<SimSmsController>(stateManager_); AppExecFwk::InnerEvent::Pointer event = AppExecFwk::InnerEvent::Get(<TYPE>, 1); simSmsController->ProcessEvent(event); EXPECT_EQ(simSmsController-><VAR>, true); }"
"HWTEST_F(EsimFileTest, SplitMccAndMnc001, TestSize.Level1)
{
    std::string mccMnc = ""FFFF"";
    std::string mcc = """";
    std::string mnc = """";
    esimFile->SplitMccAndMnc(mccMnc, mcc, mnc);
    ASSERT_TRUE(esimFile != nullptr);
}","HWTEST_F(EsimFileTest, <TYPE>, TestSize.Level1) { std::string mccMnc = <STR>; std::string mcc = """"; std::string mnc = """"; esimFile->SplitMccAndMnc(mccMnc, mcc, mnc); ASSERT_TRUE(esimFile != nullptr); }"
"HWTEST_F(EsimFileTest, ProcessPrepareDownloadDone002, TestSize.Level1)
{
    IccFileData newRecvData;
    newRecvData.sw1 = 0x61;
    esimFile->newRecvData_ = newRecvData;
    std::shared_ptr<IccControllerHolder> holder = nullptr;
    std::unique_ptr<Telephony::IccFromRilMsg> rcvMsg = std::make_unique<Telephony::IccFromRilMsg>(holder);
    rcvMsg->fileData.resultData = """";
    auto event = AppExecFwk::InnerEvent::Get(0, rcvMsg);
    esimFile->ProcessPrepareDownloadDone(event);
    ASSERT_TRUE(esimFile != nullptr);
}","HWTEST_F(EsimFileTest, <TYPE>, TestSize.Level1) { IccFileData newRecvData; newRecvData.sw1 = 0x61; esimFile->newRecvData_ = newRecvData; std::shared_ptr<IccControllerHolder> holder = nullptr; std::unique_ptr<Telephony::IccFromRilMsg> rcvMsg = std::make_unique<Telephony::IccFromRilMsg>(holder); rcvMsg->fileData.resultData = """"; auto event = AppExecFwk::InnerEvent::Get(0, rcvMsg); esimFile->ProcessPrepareDownloadDone(event); ASSERT_TRUE(esimFile != nullptr); }"
"HWTEST_F(EsimFileTest, ProcessListNotificationsDone003, TestSize.Level1)
{
    IccFileData newRecvData;
    newRecvData.sw1 = 0x90;
    newRecvData.sw2 = 0x00;
    newRecvData.resultData = ""test"";
    esimFile->newRecvData_ = newRecvData;
    esimFile->recvCombineStr_ = BPP_COMBINE_HEX_STR;
    std::shared_ptr<IccControllerHolder> holder = nullptr;
    std::unique_ptr<Telephony::IccFromRilMsg> rcvMsg = std::make_unique<Telephony::IccFromRilMsg>(holder);
    rcvMsg->fileData.resultData = """";
    auto event = AppExecFwk::InnerEvent::Get(0, rcvMsg);
    esimFile->ProcessListNotificationsDone(event);
    ASSERT_TRUE(esimFile != nullptr);
}","HWTEST_F(EsimFileTest, <TYPE>, TestSize.Level1) { IccFileData newRecvData; newRecvData.sw1 = 0x90; newRecvData.sw2 = 0x00; newRecvData.resultData = <STR>; esimFile->newRecvData_ = newRecvData; esimFile->recvCombineStr_ = BPP_COMBINE_HEX_STR; std::shared_ptr<IccControllerHolder> holder = nullptr; std::unique_ptr<Telephony::IccFromRilMsg> rcvMsg = std::make_unique<Telephony::IccFromRilMsg>(holder); rcvMsg->fileData.resultData = """"; auto event = AppExecFwk::InnerEvent::Get(0, rcvMsg); esimFile->ProcessListNotificationsDone(event); ASSERT_TRUE(esimFile != nullptr); }"
"HWTEST_F(EsimTest, ProcessDisableProfile_001, Function | MediumTest | Level2)
{
    std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>();
    std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager);
    std::shared_ptr<Telephony::EsimFile> esimFile = std::make_shared<EsimFile>(simStateManager);
    int slotId = 0;
    std::shared_ptr<Telephony::IccFile> iccFile = std::make_shared<EsimFile>(simStateManager);
    AppExecFwk::InnerEvent::Pointer eventGetProfile = iccFile->BuildCallerInfo(MSG_ESIM_DISABLE_PROFILE);
    esimFile->currentChannelId_ = 0;
    EXPECT_FALSE(esimFile->ProcessDisableProfile(slotId, eventGetProfile));
    esimFile->currentChannelId_ = 2;
    std::string iccIdStr = ""ABCDEFG"";
    esimFile->esimProfile_.iccId = Str8ToStr16(iccIdStr);
    EXPECT_FALSE(esimFile->ProcessDisableProfile(slotId, eventGetProfile));
    std::shared_ptr<IccFileController> file = std::make_shared<SimFileController>(slotId);
    std::shared_ptr<IccDiallingNumbersHandler> handler = std::make_shared<IccDiallingNumbersHandler>(file);
    esimFile->SetRilAndFileController(telRilManager, file, handler);
    EXPECT_TRUE(esimFile->ProcessDisableProfile(slotId, eventGetProfile));
    std::string str = ""ABCDEFGG"";
    esimFile->esimProfile_.iccId = Str8ToStr16(str);
    EXPECT_TRUE(esimFile->ProcessDisableProfile(slotId, eventGetProfile));
}","HWTEST_F(EsimTest, <TYPE>, Function | MediumTest | Level2) { std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>(); std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager); std::shared_ptr<Telephony::EsimFile> esimFile = std::make_shared<EsimFile>(simStateManager); int slotId = 0; std::shared_ptr<Telephony::IccFile> iccFile = std::make_shared<EsimFile>(simStateManager); AppExecFwk::InnerEvent::Pointer <VAR> = iccFile->BuildCallerInfo(<TYPE>); esimFile->currentChannelId_ = 0; EXPECT_FALSE(esimFile->ProcessDisableProfile(slotId, <VAR>)); esimFile->currentChannelId_ = 2; std::string iccIdStr = ""ABCDEFG""; esimFile->esimProfile_.iccId = Str8ToStr16(iccIdStr); EXPECT_FALSE(esimFile->ProcessDisableProfile(slotId, <VAR>)); std::shared_ptr<IccFileController> file = std::make_shared<SimFileController>(slotId); std::shared_ptr<IccDiallingNumbersHandler> handler = std::make_shared<IccDiallingNumbersHandler>(file); esimFile->SetRilAndFileController(telRilManager, file, handler); EXPECT_TRUE(esimFile->ProcessDisableProfile(slotId, <VAR>)); std::string str = ""ABCDEFGG""; esimFile->esimProfile_.iccId = Str8ToStr16(str); EXPECT_TRUE(esimFile->ProcessDisableProfile(slotId, <VAR>)); }"
"HWTEST_F(EsimTest, ObtainRulesAuthTable_001, Function | MediumTest | Level2)
{
    std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>();
    std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager);
    std::shared_ptr<Telephony::EsimFile> esimFile = std::make_shared<EsimFile>(simStateManager);
    int32_t portIndex = 0;
    EuiccRulesAuthTable eUiccRulesAuthTable;
    esimFile->currentChannelId_ = 0;
    EXPECT_EQ(eUiccRulesAuthTable.position_, (esimFile->ObtainRulesAuthTable(portIndex)).position_);
    int32_t slotId = 0;
    esimFile->currentChannelId_ = 2;
    std::shared_ptr<IccFileController> file = std::make_shared<SimFileController>(slotId);
    std::shared_ptr<IccDiallingNumbersHandler> handler = std::make_shared<IccDiallingNumbersHandler>(file);
    esimFile->SetRilAndFileController(telRilManager, file, handler);
    EXPECT_EQ(eUiccRulesAuthTable.position_, (esimFile->ObtainRulesAuthTable(portIndex)).position_);
}","HWTEST_F(EsimTest, <TYPE>, Function | MediumTest | Level2) { std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>(); std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager); std::shared_ptr<Telephony::EsimFile> esimFile = std::make_shared<EsimFile>(simStateManager); int32_t portIndex = 0; <TYPE> <VAR>; esimFile->currentChannelId_ = 0; EXPECT_EQ(<VAR>.<VAR>, (esimFile->ObtainRulesAuthTable(portIndex)).<VAR>); int32_t slotId = 0; esimFile->currentChannelId_ = 2; std::shared_ptr<IccFileController> file = std::make_shared<SimFileController>(slotId); std::shared_ptr<IccDiallingNumbersHandler> handler = std::make_shared<IccDiallingNumbersHandler>(file); esimFile->SetRilAndFileController(telRilManager, file, handler); EXPECT_EQ(<VAR>.<VAR>, (esimFile->ObtainRulesAuthTable(portIndex)).<VAR>); }"
std::u16string boundProfilePackageStr;,std::u16string <VAR>;
"HWTEST_F(EsimTest, ListNotifications_001, Function | MediumTest | Level2)
{
    std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>();
    std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager);
    std::shared_ptr<Telephony::EsimFile> esimFile = std::make_shared<EsimFile>(simStateManager);
    int32_t portIndex = 0;
    Event events = Event::EVENT_DONOTHING;
    esimFile->currentChannelId_ = 0;
    EXPECT_TRUE((esimFile->ListNotifications(portIndex, events)).euiccNotification_.empty());
    int32_t slotId = 0;
    esimFile->currentChannelId_ = 2;
    std::shared_ptr<IccFileController> file = std::make_shared<SimFileController>(slotId);
    std::shared_ptr<IccDiallingNumbersHandler> handler = std::make_shared<IccDiallingNumbersHandler>(file);
    esimFile->SetRilAndFileController(telRilManager, file, handler);
    EXPECT_TRUE((esimFile->ListNotifications(portIndex, events)).euiccNotification_.empty());
}","HWTEST_F(EsimTest, <TYPE>, Function | MediumTest | Level2) { std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>(); std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager); std::shared_ptr<Telephony::EsimFile> esimFile = std::make_shared<EsimFile>(simStateManager); int32_t portIndex = 0; Event events = Event::EVENT_DONOTHING; esimFile->currentChannelId_ = 0; EXPECT_TRUE((esimFile->ListNotifications(portIndex, events)).euiccNotification_.empty()); int32_t slotId = 0; esimFile->currentChannelId_ = 2; std::shared_ptr<IccFileController> file = std::make_shared<SimFileController>(slotId); std::shared_ptr<IccDiallingNumbersHandler> handler = std::make_shared<IccDiallingNumbersHandler>(file); esimFile->SetRilAndFileController(telRilManager, file, handler); EXPECT_TRUE((esimFile->ListNotifications(portIndex, events)).euiccNotification_.empty()); }"
"HWTEST_F(EsimTest, BuildApduForInitSecureChannel_001, Function | MediumTest | Level2)
{
    std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>();
    std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager);
    std::shared_ptr<Telephony::EsimFile> esimFile = std::make_shared<EsimFile>(simStateManager);
    std::shared_ptr<Asn1Node> bppNode = nullptr;
    esimFile->DecodeBoundProfilePackage(boundProfilePackage, bppNode);
    int32_t currentChannelId_ = 1;
    RequestApduBuild codec(currentChannelId_);
    std::shared_ptr<Asn1Node> initSecureChannelReq = bppNode->Asn1GetChild(TAG_ESIM_INITIALISE_SECURE_CHANNEL);
    esimFile->BuildApduForInitSecureChannel(codec, bppNode, initSecureChannelReq);
    bool bRet = codec.GetCommands().size() != 0 ? true : false;
    EXPECT_TRUE(bRet);
}","HWTEST_F(EsimTest, <TYPE>, Function | MediumTest | Level2) { std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>(); std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager); std::shared_ptr<Telephony::EsimFile> esimFile = std::make_shared<EsimFile>(simStateManager); std::shared_ptr<Asn1Node> bppNode = nullptr; esimFile->DecodeBoundProfilePackage(boundProfilePackage, bppNode); int32_t currentChannelId_ = 1; RequestApduBuild codec(currentChannelId_); std::shared_ptr<Asn1Node> <VAR> = bppNode->Asn1GetChild(<TYPE>); esimFile->BuildApduForInitSecureChannel(codec, bppNode, <VAR>); bool bRet = codec.GetCommands().size() != 0 ? true : false; EXPECT_TRUE(bRet); }"
"HWTEST_F(EsimTest, BuildApduForFirstSequenceOf87_001, Function | MediumTest | Level2)
{
    std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>();
    std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager);
    std::shared_ptr<Telephony::EsimFile> esimFile = std::make_shared<EsimFile>(simStateManager);
    std::shared_ptr<Asn1Node> bppNode = nullptr;
    esimFile->DecodeBoundProfilePackage(boundProfilePackage, bppNode);
    int32_t currentChannelId_ = 1;
    RequestApduBuild codec(currentChannelId_);
    std::shared_ptr<Asn1Node> firstSequenceOf87 = bppNode->Asn1GetChild(TAG_ESIM_CTX_COMP_0);
    esimFile->BuildApduForFirstSequenceOf87(codec, firstSequenceOf87);
    bool bRet = codec.GetCommands().size() != 0 ? true : false;
    EXPECT_TRUE(bRet);
}","HWTEST_F(EsimTest, <TYPE>, Function | MediumTest | Level2) { std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>(); std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager); std::shared_ptr<Telephony::EsimFile> esimFile = std::make_shared<EsimFile>(simStateManager); std::shared_ptr<Asn1Node> bppNode = nullptr; esimFile->DecodeBoundProfilePackage(boundProfilePackage, bppNode); int32_t currentChannelId_ = 1; RequestApduBuild codec(currentChannelId_); std::shared_ptr<Asn1Node> <VAR> = bppNode->Asn1GetChild(<TYPE>); esimFile->BuildApduForFirstSequenceOf87(codec, <VAR>); bool bRet = codec.GetCommands().size() != 0 ? true : false; EXPECT_TRUE(bRet); }"
"HWTEST_F(EsimTest, createNotification_001, Function | MediumTest | Level2)
{
    std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>();
    std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager);
    std::shared_ptr<Telephony::EsimFile> esimFile = std::make_shared<EsimFile>(simStateManager);
    std::string resultData = ""BF2F118001010C08736D64702E636F6D81020508"";
    std::vector<uint8_t> responseByte = Asn1Utils::HexStrToBytes(resultData.c_str());
    uint32_t byteLen = responseByte.size();
    std::shared_ptr<Asn1Node> node = esimFile->Asn1ParseResponse(responseByte, byteLen);
    EuiccNotification euicc;
    esimFile->createNotification(node, euicc);
    bool bRet = euicc.targetAddr_.empty() ? false : true;
    EXPECT_TRUE(bRet);
}","HWTEST_F(EsimTest, <VAR>, Function | MediumTest | Level2) { std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>(); std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager); std::shared_ptr<Telephony::EsimFile> esimFile = std::make_shared<EsimFile>(simStateManager); std::string resultData = <STR>; std::vector<uint8_t> responseByte = Asn1Utils::HexStrToBytes(resultData.c_str()); uint32_t byteLen = responseByte.size(); std::shared_ptr<Asn1Node> node = esimFile->Asn1ParseResponse(responseByte, byteLen); EuiccNotification euicc; esimFile->createNotification(node, euicc); bool bRet = euicc.targetAddr_.empty() ? false : true; EXPECT_TRUE(bRet); }"
"HWTEST_F(EsimTest, EuiccInfo2ParseProfileVersion_001, Function | MediumTest | Level2)
{
    std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>();
    std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager);
    std::shared_ptr<Telephony::EsimFile> esimFile = std::make_shared<EsimFile>(simStateManager);
    EuiccInfo2 euiccInfo2;
    std::string resultData =
        ""BF282BA029BF2F118001010C08736D64702E636F6081020136BF2F128001020C09736D6470322E636F608102AABB9000"";
    std::vector<uint8_t> responseByte = Asn1Utils::HexStrToBytes(resultData);
    uint32_t byteLen = responseByte.size();
    std::shared_ptr<Asn1Node> root = esimFile->Asn1ParseResponse(responseByte, byteLen);
    esimFile->EuiccInfo2ParseProfileVersion(euiccInfo2, root);
    bool bRet = euiccInfo2.profileVersion_.empty() ? false : true;
    EXPECT_TRUE(!bRet);
}","HWTEST_F(EsimTest, <TYPE>, Function | MediumTest | Level2) { std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>(); std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager); std::shared_ptr<Telephony::EsimFile> esimFile = std::make_shared<EsimFile>(simStateManager); EuiccInfo2 euiccInfo2; std::string resultData = ""BF282BA029BF2F118001010C08736D64702E636F6081020136BF2F128001020C09736D6470322E636F608102AABB9000""; std::vector<uint8_t> responseByte = Asn1Utils::HexStrToBytes(resultData); uint32_t byteLen = responseByte.size(); std::shared_ptr<Asn1Node> root = esimFile->Asn1ParseResponse(responseByte, byteLen); esimFile->EuiccInfo2ParseProfileVersion(euiccInfo2, root); bool bRet = euiccInfo2.<VAR>.empty() ? false : true; EXPECT_TRUE(!bRet); }"
"HWTEST_F(EsimTest, EuiccInfo2ParseUiccCapability_001, Function | MediumTest | Level2)
{
    std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>();
    std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager);
    std::shared_ptr<Telephony::EsimFile> esimFile = std::make_shared<EsimFile>(simStateManager);
    EuiccInfo2 euiccInfo2;
    std::string resultData =
        ""BF282BA029BF2F118001010C08736D64702E636F6081020136BF2F128001020C09736D6470322E636F608102AABB9000"";
    std::vector<uint8_t> responseByte = Asn1Utils::HexStrToBytes(resultData);
    uint32_t byteLen = responseByte.size();
    std::shared_ptr<Asn1Node> root = esimFile->Asn1ParseResponse(responseByte, byteLen);
    esimFile->EuiccInfo2ParseUiccCapability(euiccInfo2, root);
    bool bRet = euiccInfo2.uiccCapability_.empty() ? false : true;
    EXPECT_TRUE(!bRet);
}","HWTEST_F(EsimTest, <TYPE>, Function | MediumTest | Level2) { std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>(); std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager); std::shared_ptr<Telephony::EsimFile> esimFile = std::make_shared<EsimFile>(simStateManager); EuiccInfo2 euiccInfo2; std::string resultData = ""BF282BA029BF2F118001010C08736D64702E636F6081020136BF2F128001020C09736D6470322E636F608102AABB9000""; std::vector<uint8_t> responseByte = Asn1Utils::HexStrToBytes(resultData); uint32_t byteLen = responseByte.size(); std::shared_ptr<Asn1Node> root = esimFile->Asn1ParseResponse(responseByte, byteLen); esimFile->EuiccInfo2ParseUiccCapability(euiccInfo2, root); bool bRet = euiccInfo2.<VAR>.empty() ? false : true; EXPECT_TRUE(!bRet); }"
"HWTEST_F(EsimManagerTest, GetEuiccProfileInfoList, Function | MediumTest | Level1)
{
    int32_t slotId = 0;
    GetEuiccProfileInfoListInnerResult result;
    std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>();
    std::shared_ptr<Telephony::SimManager> simManager = std::make_shared<SimManager>(telRilManager);
    int32_t ret = simManager->GetEuiccProfileInfoList(slotId, result);
    EXPECT_NE(ret, TELEPHONY_ERR_SUCCESS);
    std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager);
    simManager->simStateManager_.push_back(simStateManager);
    simManager->simStateManager_[slotId]->Init(slotId);
    simManager->simStateManager_[slotId]->simStateHandle_->iccState_.simStatus_ = -1;
    ret = simManager->GetEuiccProfileInfoList(slotId, result);
    EXPECT_EQ(ret, TELEPHONY_ERR_LOCAL_PTR_NULL);
    EventFwk::CommonEventSubscribeInfo sp;
    std::weak_ptr<Telephony::ITelRilManager> iTelRilManager = telRilManager;
    std::weak_ptr<Telephony::SimStateManager> state = simStateManager;
    std::shared_ptr<Telephony::SimFileManager> simFileManager =
        std::make_shared<SimFileManager>(sp, iTelRilManager, state);
    simManager->simFileManager_.push_back(simFileManager);
    simManager->simFileManager_[slotId]->Init(slotId);
    ret = simManager->GetEuiccProfileInfoList(slotId, result);
    EXPECT_EQ(ret, TELEPHONY_ERR_SUCCESS);
}","HWTEST_F(EsimManagerTest, <TYPE>, Function | MediumTest | Level1) { int32_t slotId = 0; <TYPE> <VAR>; std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>(); std::shared_ptr<Telephony::SimManager> simManager = std::make_shared<SimManager>(telRilManager); int32_t ret = simManager->GetEuiccProfileInfoList(slotId, <VAR>); EXPECT_NE(ret, TELEPHONY_ERR_SUCCESS); std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager); simManager->simStateManager_.push_back(simStateManager); simManager->simStateManager_[slotId]->Init(slotId); simManager->simStateManager_[slotId]->simStateHandle_->iccState_.simStatus_ = -1; ret = simManager->GetEuiccProfileInfoList(slotId, <VAR>); EXPECT_EQ(ret, TELEPHONY_ERR_LOCAL_PTR_NULL); EventFwk::CommonEventSubscribeInfo sp; std::weak_ptr<Telephony::ITelRilManager> iTelRilManager = telRilManager; std::weak_ptr<Telephony::SimStateManager> state = simStateManager; std::shared_ptr<Telephony::SimFileManager> simFileManager = std::make_shared<SimFileManager>(sp, iTelRilManager, state); simManager->simFileManager_.push_back(simFileManager); simManager->simFileManager_[slotId]->Init(slotId); ret = simManager->GetEuiccProfileInfoList(slotId, <VAR>); EXPECT_EQ(ret, TELEPHONY_ERR_SUCCESS); }"
"HWTEST_F(EsimManagerTest, DisableProfile, Function | MediumTest | Level1)
{
    int32_t slotId = 0;
    int32_t portIndex = 0;
    std::u16string iccId = Str8ToStr16(""98760000000000543210"");
    bool refresh = true;
    int32_t disableProfileResult;
    std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>();
    std::shared_ptr<Telephony::SimManager> simManager = std::make_shared<SimManager>(telRilManager);
    int32_t ret = simManager->DisableProfile(slotId, portIndex, iccId, refresh, disableProfileResult);
    EXPECT_NE(ret, TELEPHONY_ERR_SUCCESS);
    std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager);
    simManager->simStateManager_.push_back(simStateManager);
    simManager->simStateManager_[slotId]->Init(slotId);
    simManager->simStateManager_[slotId]->simStateHandle_->iccState_.simStatus_ = -1;
    ret = simManager->DisableProfile(slotId, portIndex, iccId, refresh, disableProfileResult);
    EXPECT_EQ(ret, TELEPHONY_ERR_LOCAL_PTR_NULL);
    EventFwk::CommonEventSubscribeInfo sp;
    std::weak_ptr<Telephony::ITelRilManager> iTelRilManager = telRilManager;
    std::weak_ptr<Telephony::SimStateManager> state = simStateManager;
    std::shared_ptr<Telephony::SimFileManager> simFileManager =
        std::make_shared<SimFileManager>(sp, iTelRilManager, state);
    simManager->simFileManager_.push_back(simFileManager);
    simManager->simFileManager_[slotId]->Init(slotId);
    ret = simManager->DisableProfile(slotId, portIndex, iccId, refresh, disableProfileResult);
    EXPECT_EQ(ret, TELEPHONY_ERR_SUCCESS);
}","HWTEST_F(EsimManagerTest, <TYPE>, Function | MediumTest | Level1) { int32_t slotId = 0; int32_t portIndex = 0; std::u16string iccId = Str8ToStr16(""98760000000000543210""); bool <VAR> = true; int32_t <VAR>; std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>(); std::shared_ptr<Telephony::SimManager> simManager = std::make_shared<SimManager>(telRilManager); int32_t ret = simManager->DisableProfile(slotId, portIndex, iccId, <VAR>, <VAR>); EXPECT_NE(ret, TELEPHONY_ERR_SUCCESS); std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager); simManager->simStateManager_.push_back(simStateManager); simManager->simStateManager_[slotId]->Init(slotId); simManager->simStateManager_[slotId]->simStateHandle_->iccState_.simStatus_ = -1; ret = simManager->DisableProfile(slotId, portIndex, iccId, <VAR>, <VAR>); EXPECT_EQ(ret, TELEPHONY_ERR_LOCAL_PTR_NULL); EventFwk::CommonEventSubscribeInfo sp; std::weak_ptr<Telephony::ITelRilManager> iTelRilManager = telRilManager; std::weak_ptr<Telephony::SimStateManager> state = simStateManager; std::shared_ptr<Telephony::SimFileManager> simFileManager = std::make_shared<SimFileManager>(sp, iTelRilManager, state); simManager->simFileManager_.push_back(simFileManager); simManager->simFileManager_[slotId]->Init(slotId); ret = simManager->DisableProfile(slotId, portIndex, iccId, <VAR>, <VAR>); EXPECT_EQ(ret, TELEPHONY_ERR_SUCCESS); }"
"HWTEST_F(EsimManagerTest, ListNotifications, Function | MediumTest | Level1)
{
    int32_t slotId = 0;
    int32_t portIndex = 0;
    const Event events = Event::EVENT_DELETE;
    EuiccNotificationList notificationList;
    std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>();
    std::shared_ptr<Telephony::SimManager> simManager = std::make_shared<SimManager>(telRilManager);
    int32_t ret = simManager->ListNotifications(slotId, portIndex, events, notificationList);
    EXPECT_NE(ret, TELEPHONY_ERR_SUCCESS);
    std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager);
    simManager->simStateManager_.push_back(simStateManager);
    simManager->simStateManager_[slotId]->Init(slotId);
    simManager->simStateManager_[slotId]->simStateHandle_->iccState_.simStatus_ = -1;
    ret = simManager->ListNotifications(slotId, portIndex, events, notificationList);
    EXPECT_EQ(ret, TELEPHONY_ERR_LOCAL_PTR_NULL);
    EventFwk::CommonEventSubscribeInfo sp;
    std::weak_ptr<Telephony::ITelRilManager> iTelRilManager = telRilManager;
    std::weak_ptr<Telephony::SimStateManager> state = simStateManager;
    std::shared_ptr<Telephony::SimFileManager> simFileManager =
        std::make_shared<SimFileManager>(sp, iTelRilManager, state);
    simManager->simFileManager_.push_back(simFileManager);
    simManager->simFileManager_[slotId]->Init(slotId);
    ret = simManager->ListNotifications(slotId, portIndex, events, notificationList);
    EXPECT_EQ(ret, TELEPHONY_ERR_SUCCESS);
}","HWTEST_F(EsimManagerTest, <TYPE>, Function | MediumTest | Level1) { int32_t slotId = 0; int32_t portIndex = 0; <VAR> <TYPE> <VAR> = <TYPE>::<TYPE>; <TYPE> <VAR>; std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>(); std::shared_ptr<Telephony::SimManager> simManager = std::make_shared<SimManager>(telRilManager); int32_t ret = simManager->ListNotifications(slotId, portIndex, <VAR>, <VAR>); EXPECT_NE(ret, TELEPHONY_ERR_SUCCESS); std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager); simManager->simStateManager_.push_back(simStateManager); simManager->simStateManager_[slotId]->Init(slotId); simManager->simStateManager_[slotId]->simStateHandle_->iccState_.simStatus_ = -1; ret = simManager->ListNotifications(slotId, portIndex, <VAR>, <VAR>); EXPECT_EQ(ret, TELEPHONY_ERR_LOCAL_PTR_NULL); EventFwk::CommonEventSubscribeInfo sp; std::weak_ptr<Telephony::ITelRilManager> iTelRilManager = telRilManager; std::weak_ptr<Telephony::SimStateManager> state = simStateManager; std::shared_ptr<Telephony::SimFileManager> simFileManager = std::make_shared<SimFileManager>(sp, iTelRilManager, state); simManager->simFileManager_.push_back(simFileManager); simManager->simFileManager_[slotId]->Init(slotId); ret = simManager->ListNotifications(slotId, portIndex, <VAR>, <VAR>); EXPECT_EQ(ret, TELEPHONY_ERR_SUCCESS); }"
"HWTEST_F(EsimFileManagerTest, GetEuiccProfileInfoList_001, Function | MediumTest | Level2)
{
    std::string expectedEid = ""12345"";
    std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>();
    std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager);
    EventFwk::MatchingSkills matchingSkills;
    matchingSkills.AddEvent(EventFwk::CommonEventSupport::COMMON_EVENT_OPERATOR_CONFIG_CHANGED);
    EventFwk::CommonEventSubscribeInfo subcribeInfo(matchingSkills);
    SimFileManager simFileManager { subcribeInfo, std::weak_ptr<ITelRilManager>(telRilManager),
        std::weak_ptr<SimStateManager>(simStateManager) };
    simFileManager.eSimFile_ = std::make_shared<EsimFile>(simStateManager);
    GetEuiccProfileInfoListInnerResult eUiccRes = simFileManager.GetEuiccProfileInfoList();
    EXPECT_EQ(eUiccRes.result_, static_cast<int32_t>(ResultCode::RESULT_OK));
    simFileManager.eSimFile_ = nullptr;
    eUiccRes = simFileManager.GetEuiccProfileInfoList();
    EXPECT_EQ(eUiccRes.result_, static_cast<int32_t>(ResultCode::RESULT_OK));
}","HWTEST_F(EsimFileManagerTest, <TYPE>, Function | MediumTest | Level2) { std::string expectedEid = ""12345""; std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>(); std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager); EventFwk::MatchingSkills matchingSkills; matchingSkills.AddEvent(EventFwk::CommonEventSupport::COMMON_EVENT_OPERATOR_CONFIG_CHANGED); EventFwk::CommonEventSubscribeInfo subcribeInfo(matchingSkills); SimFileManager simFileManager { subcribeInfo, std::weak_ptr<ITelRilManager>(telRilManager), std::weak_ptr<SimStateManager>(simStateManager) }; simFileManager.eSimFile_ = std::make_shared<EsimFile>(simStateManager); <TYPE> <VAR> = simFileManager.GetEuiccProfileInfoList(); EXPECT_EQ(<VAR>.<VAR>, static_cast<int32_t>(ResultCode::<TYPE>)); simFileManager.eSimFile_ = nullptr; <VAR> = simFileManager.GetEuiccProfileInfoList(); EXPECT_EQ(<VAR>.<VAR>, static_cast<int32_t>(ResultCode::<TYPE>)); }"
"HWTEST_F(EsimFileManagerTest, GetEuiccInfo_001, Function | MediumTest | Level2)
{
    std::string expectedEid = ""12345"";
    std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>();
    std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager);
    EventFwk::MatchingSkills matchingSkills;
    matchingSkills.AddEvent(EventFwk::CommonEventSupport::COMMON_EVENT_OPERATOR_CONFIG_CHANGED);
    EventFwk::CommonEventSubscribeInfo subcribeInfo(matchingSkills);
    SimFileManager simFileManager { subcribeInfo, std::weak_ptr<ITelRilManager>(telRilManager),
        std::weak_ptr<SimStateManager>(simStateManager) };
    simFileManager.eSimFile_ = std::make_shared<EsimFile>(simStateManager);
    EuiccInfo eUiccInfo = simFileManager.GetEuiccInfo();
    EXPECT_EQ(eUiccInfo.osVersion_, u"""");
    simFileManager.eSimFile_ = nullptr;
    eUiccInfo = simFileManager.GetEuiccInfo();
    EXPECT_EQ(eUiccInfo.osVersion_, u"""");
}","HWTEST_F(EsimFileManagerTest, <TYPE>, Function | MediumTest | Level2) { std::string expectedEid = ""12345""; std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>(); std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager); EventFwk::MatchingSkills matchingSkills; matchingSkills.AddEvent(EventFwk::CommonEventSupport::COMMON_EVENT_OPERATOR_CONFIG_CHANGED); EventFwk::CommonEventSubscribeInfo subcribeInfo(matchingSkills); SimFileManager simFileManager { subcribeInfo, std::weak_ptr<ITelRilManager>(telRilManager), std::weak_ptr<SimStateManager>(simStateManager) }; simFileManager.eSimFile_ = std::make_shared<EsimFile>(simStateManager); <TYPE> <VAR> = simFileManager.GetEuiccInfo(); EXPECT_EQ(<VAR>.<VAR>, u""""); simFileManager.eSimFile_ = nullptr; <VAR> = simFileManager.GetEuiccInfo(); EXPECT_EQ(<VAR>.<VAR>, u""""); }"
"HWTEST_F(EsimFileManagerTest, GetProfile_001, Function | MediumTest | Level2)
{
    std::string expectedEid = ""12345"";
    std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>();
    std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager);
    EventFwk::MatchingSkills matchingSkills;
    matchingSkills.AddEvent(EventFwk::CommonEventSupport::COMMON_EVENT_OPERATOR_CONFIG_CHANGED);
    EventFwk::CommonEventSubscribeInfo subcribeInfo(matchingSkills);
    SimFileManager simFileManager { subcribeInfo, std::weak_ptr<ITelRilManager>(telRilManager),
        std::weak_ptr<SimStateManager>(simStateManager) };
    simFileManager.eSimFile_ = std::make_shared<EsimFile>(simStateManager);
    int32_t portIndex = 0;
    std::u16string iccId = u"""";
    EuiccProfile res = simFileManager.GetProfile(portIndex, iccId);
    EXPECT_EQ(res.state_, ProfileState::PROFILE_STATE_DISABLED);
    simFileManager.eSimFile_ = nullptr;
    res = simFileManager.GetProfile(portIndex, iccId);
    EXPECT_EQ(res.state_, ProfileState::PROFILE_STATE_DISABLED);
}","HWTEST_F(EsimFileManagerTest, <TYPE>, Function | MediumTest | Level2) { std::string expectedEid = ""12345""; std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>(); std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager); EventFwk::MatchingSkills matchingSkills; matchingSkills.AddEvent(EventFwk::CommonEventSupport::COMMON_EVENT_OPERATOR_CONFIG_CHANGED); EventFwk::CommonEventSubscribeInfo subcribeInfo(matchingSkills); SimFileManager simFileManager { subcribeInfo, std::weak_ptr<ITelRilManager>(telRilManager), std::weak_ptr<SimStateManager>(simStateManager) }; simFileManager.eSimFile_ = std::make_shared<EsimFile>(simStateManager); int32_t portIndex = 0; std::u16string <VAR> = u""""; <TYPE> res = simFileManager.GetProfile(portIndex, <VAR>); EXPECT_EQ(res.<VAR>, <TYPE>::<TYPE>); simFileManager.eSimFile_ = nullptr; res = simFileManager.GetProfile(portIndex, <VAR>); EXPECT_EQ(res.<VAR>, <TYPE>::<TYPE>); }"
"HWTEST_F(EsimFileManagerTest, ListNotifications_001, Function | MediumTest | Level2)
{
    std::string expectedEid = ""12345"";
    std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>();
    std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager);
    EventFwk::MatchingSkills matchingSkills;
    matchingSkills.AddEvent(EventFwk::CommonEventSupport::COMMON_EVENT_OPERATOR_CONFIG_CHANGED);
    EventFwk::CommonEventSubscribeInfo subcribeInfo(matchingSkills);
    SimFileManager simFileManager { subcribeInfo, std::weak_ptr<ITelRilManager>(telRilManager),
        std::weak_ptr<SimStateManager>(simStateManager) };
    simFileManager.eSimFile_ = std::make_shared<EsimFile>(simStateManager);
    int32_t portIndex = 0;
    Event events = Event::EVENT_DONOTHING;
    EuiccNotificationList lst = simFileManager.ListNotifications(portIndex, events);
    EXPECT_EQ(lst.euiccNotification_.empty(), true);
    simFileManager.eSimFile_ = nullptr;
    lst = simFileManager.ListNotifications(portIndex, events);
    EXPECT_EQ(lst.euiccNotification_.empty(), true);
}","HWTEST_F(EsimFileManagerTest, <TYPE>, Function | MediumTest | Level2) { std::string expectedEid = ""12345""; std::shared_ptr<TelRilManager> telRilManager = std::make_shared<TelRilManager>(); std::shared_ptr<Telephony::SimStateManager> simStateManager = std::make_shared<SimStateManager>(telRilManager); EventFwk::MatchingSkills matchingSkills; matchingSkills.AddEvent(EventFwk::CommonEventSupport::COMMON_EVENT_OPERATOR_CONFIG_CHANGED); EventFwk::CommonEventSubscribeInfo subcribeInfo(matchingSkills); SimFileManager simFileManager { subcribeInfo, std::weak_ptr<ITelRilManager>(telRilManager), std::weak_ptr<SimStateManager>(simStateManager) }; simFileManager.eSimFile_ = std::make_shared<EsimFile>(simStateManager); int32_t portIndex = 0; <TYPE> <VAR> = <TYPE>::<TYPE>; <TYPE> <VAR> = simFileManager.ListNotifications(portIndex, <VAR>); EXPECT_EQ(<VAR>.<VAR>.empty(), <VAR>); simFileManager.eSimFile_ = nullptr; <VAR> = simFileManager.ListNotifications(portIndex, <VAR>); EXPECT_EQ(<VAR>.<VAR>.empty(), <VAR>); }"
"HWTEST_F(SimTest, Telephony_Sim_GetSimSpn_0100, Function | MediumTest | Level1)
{
    if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        std::string result = ""testresult"";
        std::u16string spn;
        CoreServiceClient::GetInstance().GetSimSpn(SimTest::slotId_, spn);
        result = Str16ToStr8(spn);
        EXPECT_STRNE(result.c_str(), ""testresult"");
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level1) { if (!SimTest::HasSimCard(slotId_)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { std::string result = <STR>; std::u16string <VAR>; CoreServiceClient::GetInstance().GetSimSpn(SimTest::slotId_, <VAR>); result = Str16ToStr8(<VAR>); EXPECT_STRNE(result.c_str(), <STR>); } }"
"if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        std::string result = ""testresult"";
        std::u16string spn;
        CoreServiceClient::GetInstance().GetSimSpn(SimTest::slotId_, spn);
        result = Str16ToStr8(spn);
        EXPECT_STRNE(result.c_str(), ""testresult"");
    }","if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { std::string result = ""testresult""; std::u16string spn; CoreServiceClient::GetInstance().GetSimSpn(SimTest::<VAR>, spn); result = Str16ToStr8(spn); EXPECT_STRNE(result.c_str(), ""testresult""); }"
"HWTEST_F(SimTest, Telephony_Sim_GetSimIccId_0100, Function | MediumTest | Level1)
{
    AccessToken token;
    if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        std::u16string iccId;
        CoreServiceClient::GetInstance().GetSimIccId(SimTest::slotId_, iccId);
        std::string result = Str16ToStr8(iccId);
        EXPECT_STRNE(result.c_str(), """");
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level1) { AccessToken token; if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { std::u16string <VAR>; CoreServiceClient::GetInstance().GetSimIccId(SimTest::<VAR>, <VAR>); std::string result = Str16ToStr8(<VAR>); EXPECT_STRNE(result.c_str(), <STR>); } }"
"if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        std::u16string iccId;
        CoreServiceClient::GetInstance().GetSimIccId(SimTest::slotId_, iccId);
        std::string result = Str16ToStr8(iccId);
        EXPECT_STRNE(result.c_str(), """");
    }","if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { std::u16string <VAR>; CoreServiceClient::GetInstance().GetSimIccId(SimTest::<VAR>, <VAR>); std::string result = Str16ToStr8(<VAR>); EXPECT_STRNE(result.c_str(), <STR>); }"
"HWTEST_F(SimTest, Telephony_Sim_GetSimIccId_0300, Function | MediumTest | Level1)
{
    if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        std::u16string iccId;
        CoreServiceClient::GetInstance().GetSimIccId(SimTest::slotId_, iccId);
        std::string result = Str16ToStr8(iccId);
        EXPECT_STREQ(result.c_str(), """");
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level1) { if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { std::u16string <VAR>; CoreServiceClient::GetInstance().GetSimIccId(SimTest::<VAR>, <VAR>); std::string result = Str16ToStr8(<VAR>); EXPECT_STREQ(result.c_str(), """"); } }"
"HWTEST_F(SimTest, Telephony_Sim_GetIMSI_0100, Function | MediumTest | Level1)
{
    AccessToken token;
    if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        std::u16string imsi;
        CoreServiceClient::GetInstance().GetIMSI(SimTest::slotId_, imsi);
        std::string result = Str16ToStr8(imsi);
        EXPECT_STRNE(result.c_str(), """");
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | <TYPE>) { AccessToken token; if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { std::u16string <VAR>; CoreServiceClient::GetInstance().GetIMSI(SimTest::<VAR>, <VAR>); std::string result = Str16ToStr8(<VAR>); EXPECT_STRNE(result.c_str(), <STR>); } }"
"if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        std::string result = Str16ToStr8(CoreServiceClient::GetInstance().GetSimGid2(SimTest::slotId_));
        EXPECT_STRNE(result.c_str(), """");
    }","if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { std::string result = Str16ToStr8(CoreServiceClient::GetInstance().GetSimGid2(SimTest::<VAR>)); EXPECT_STRNE(result.c_str(), """"); }"
"HWTEST_F(SimTest, Telephony_Sim_GetSimTeleNumberIdentifier_0100, Function | MediumTest | Level1)
{
    AccessToken token;
    if (SimTest::telephonyService_ == nullptr || !SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService Remote service is null"");
        SimTest::telephonyService_ = GetProxy();
    } else {
        std::string result = ""test"";
        result = Str16ToStr8(SimTest::telephonyService_->GetSimTeleNumberIdentifier(SimTest::slotId_));
        EXPECT_STRNE(result.c_str(), ""test"");
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level1) { AccessToken token; if (SimTest::telephonyService_ == nullptr || !SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService Remote service is null""); SimTest::telephonyService_ = GetProxy(); } else { std::string result = ""test""; result = Str16ToStr8(SimTest::telephonyService_->GetSimTeleNumberIdentifier(SimTest::<VAR>)); EXPECT_STRNE(result.c_str(), ""test""); } }"
"if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        std::u16string voiceMailIdentifier;
        CoreServiceClient::GetInstance().GetVoiceMailIdentifier(SimTest::slotId_, voiceMailIdentifier);
        std::string result = Str16ToStr8(voiceMailIdentifier);
        EXPECT_STRNE(result.c_str(), ""test"");
    }","if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { std::u16string voiceMailIdentifier; CoreServiceClient::GetInstance().GetVoiceMailIdentifier(SimTest::<VAR>, voiceMailIdentifier); std::string result = Str16ToStr8(voiceMailIdentifier); EXPECT_STRNE(result.c_str(), <STR>); }"
"HWTEST_F(SimTest, Telephony_Sim_GetVoiceMailCount_0100, Function | MediumTest | Level1)
{
    AccessToken token;
    if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        int32_t voiceMailCount;
        int32_t result = CoreServiceClient::GetInstance().GetVoiceMailCount(SimTest::slotId_, voiceMailCount);
        EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | <TYPE>) { AccessToken token; if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { <TYPE> <VAR>; int32_t result = CoreServiceClient::GetInstance().GetVoiceMailCount(SimTest::<VAR>, <VAR>); EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS); } }"
"if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        int32_t voiceMailCount;
        int32_t result = CoreServiceClient::GetInstance().GetVoiceMailCount(SimTest::slotId_, voiceMailCount);
        EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
    }","if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { int32_t voiceMailCount; int32_t result = CoreServiceClient::GetInstance().GetVoiceMailCount(SimTest::<VAR>, voiceMailCount); EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS); }"
"HWTEST_F(SimTest, Telephony_Sim_GetVoiceMailCount_0300, Function | MediumTest | Level1)
{
    if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        int32_t voiceMailCount;
        int32_t result = CoreServiceClient::GetInstance().GetVoiceMailCount(SimTest::slotId_, voiceMailCount);
        EXPECT_NE(result, TELEPHONY_ERR_SUCCESS);
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | <TYPE>) { if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { <TYPE> <VAR>; int32_t result = CoreServiceClient::GetInstance().GetVoiceMailCount(SimTest::slotId_, <VAR>); EXPECT_NE(result, TELEPHONY_ERR_SUCCESS); } }"
"HWTEST_F(SimTest, Telephony_Sim_SetVoiceMailCount_0100, Function | MediumTest | Level1)
{
    AccessToken token;
    if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        int32_t voiceMailCount = 0;
        int32_t result = CoreServiceClient::GetInstance().SetVoiceMailCount(SimTest::slotId_, voiceMailCount);
        EXPECT_GT(result, -1);
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level1) { AccessToken token; if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { int32_t voiceMailCount = 0; int32_t result = CoreServiceClient::GetInstance().SetVoiceMailCount(SimTest::<VAR>, voiceMailCount); EXPECT_GT(result, -1); } }"
"if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        int32_t voiceMailCount = 0;
        int32_t result = CoreServiceClient::GetInstance().SetVoiceMailCount(SimTest::slotId_, voiceMailCount);
        EXPECT_GT(result, -1);
    }","if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { int32_t voiceMailCount = 0; int32_t result = CoreServiceClient::GetInstance().SetVoiceMailCount(SimTest::<VAR>, voiceMailCount); EXPECT_GT(result, -1); }"
"HWTEST_F(SimTest, Telephony_Sim_SetVoiceCallForwarding_0200, Function | MediumTest | Level1)
{
    AccessToken token;
    if (!SimTest::HasSimCard(slotId1_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        std::string number = ""01234567890123456789"";
        int32_t result = CoreServiceClient::GetInstance().SetVoiceCallForwarding(SimTest::slotId_, true, number);
        EXPECT_GT(result, -1);
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level1) { AccessToken token; if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { std::string number = ""01234567890123456789""; int32_t result = CoreServiceClient::GetInstance().SetVoiceCallForwarding(SimTest::slotId_, true, number); EXPECT_GT(result, -1); } }"
"if (!SimTest::HasSimCard(slotId1_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        std::string number = ""01234567890123456789"";
        int32_t result = CoreServiceClient::GetInstance().SetVoiceCallForwarding(SimTest::slotId_, true, number);
        EXPECT_GT(result, -1);
    }","if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { std::string number = ""01234567890123456789""; int32_t result = CoreServiceClient::GetInstance().SetVoiceCallForwarding(SimTest::slotId_, true, number); EXPECT_GT(result, -1); }"
"if (!SimTest::HasSimCard(slotId1_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        IccAccountInfo info;
        int32_t result = CoreServiceClient::GetInstance().GetSimAccountInfo(SimTest::slotId1_, info);
        EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
    }","if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { <TYPE> <VAR>; int32_t result = CoreServiceClient::GetInstance().GetSimAccountInfo(SimTest::<VAR>, <VAR>); EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS); }"
"HWTEST_F(SimTest, Telephony_Sim_SetLockState_0300, Function | MediumTest | Level3)
{
    if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        CoreServiceTestHelper helper;
        if (!helper.Run(SetLockStateTestFunc, std::ref(helper))) {
            TELEPHONY_LOGI(""Interface out of time"");
            EXPECT_TRUE(true);
        } else {
            bool result = helper.GetBoolResult();
            EXPECT_FALSE(result);
        }
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level3) { if (!SimTest::HasSimCard(slotId_)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { CoreServiceTestHelper helper; if (!helper.Run(<TYPE>, std::ref(helper))) { TELEPHONY_LOGI(""Interface out of time""); EXPECT_TRUE(true); } else { <TYPE> result = helper.GetBoolResult(); EXPECT_FALSE(result); } } }"
"if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        CoreServiceTestHelper helper;
        if (!helper.Run(SetLockStateTestFunc, std::ref(helper))) {
            TELEPHONY_LOGI(""Interface out of time"");
            EXPECT_TRUE(true);
        } else {
            bool result = helper.GetBoolResult();
            EXPECT_FALSE(result);
        }
    }","if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { CoreServiceTestHelper helper; if (!helper.Run(<TYPE>, std::ref(helper))) { TELEPHONY_LOGI(""Interface out of time""); EXPECT_TRUE(true); } else { <TYPE> result = helper.GetBoolResult(); EXPECT_FALSE(result); } }"
"if (!helper.Run(SetLockStateTestFunc, std::ref(helper))) {
            TELEPHONY_LOGI(""Interface out of time"");
            EXPECT_TRUE(true);
        } else {
            bool result = helper.GetBoolResult();
            EXPECT_FALSE(result);
        }","if (!helper.Run(<TYPE>, std::ref(helper))) { TELEPHONY_LOGI(""Interface out of time""); EXPECT_TRUE(true); } else { bool result = helper.GetBoolResult(); EXPECT_FALSE(result); }"
"HWTEST_F(SimTest, Telephony_Sim_SetFDNState_0100, Function | MediumTest | Level2)
{
    AccessToken token;
    if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        CoreServiceTestHelper helper;
        if (!helper.Run(SetFDNStateTestFunc, std::ref(helper))) {
            TELEPHONY_LOGI(""Interface out of time"");
            EXPECT_TRUE(true);
        } else {
            int32_t result = helper.GetIntResult();
            EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
        }
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | <TYPE>) { AccessToken token; if (!SimTest::HasSimCard(slotId_)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { CoreServiceTestHelper helper; if (!helper.Run(<TYPE>, std::ref(helper))) { TELEPHONY_LOGI(""Interface out of time""); EXPECT_TRUE(true); } else { <TYPE> result = helper.GetIntResult(); EXPECT_EQ(result, <TYPE>); } } }"
"if (!helper.Run(SetFDNStateTestFunc, std::ref(helper))) {
            TELEPHONY_LOGI(""Interface out of time"");
            EXPECT_TRUE(true);
        } else {
            int32_t result = helper.GetIntResult();
            EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
        }","if (!helper.Run(<TYPE>, std::ref(helper))) { TELEPHONY_LOGI(""Interface out of time""); EXPECT_TRUE(true); } else { int32_t result = helper.GetIntResult(); EXPECT_EQ(result, <TYPE>); }"
"HWTEST_F(SimTest, Telephony_Sim_SetFDNState_0200, Function | MediumTest | Level2)
{
    if (!SimTest::HasSimCard(slotId1_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        CoreServiceTestHelper helper;
        if (!helper.Run(SetFDNStateTestFunc1, std::ref(helper))) {
            TELEPHONY_LOGI(""Interface out of time"");
            EXPECT_TRUE(true);
        } else {
            int32_t result = helper.GetIntResult();
            EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
        }
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | <TYPE>) { if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { CoreServiceTestHelper helper; if (!helper.Run(<TYPE>, std::ref(helper))) { TELEPHONY_LOGI(""Interface out of time""); EXPECT_TRUE(true); } else { <TYPE> result = helper.GetIntResult(); EXPECT_EQ(result, <TYPE>); } } }"
"if (!helper.Run(SetFDNStateTestFunc1, std::ref(helper))) {
            TELEPHONY_LOGI(""Interface out of time"");
            EXPECT_TRUE(true);
        } else {
            int32_t result = helper.GetIntResult();
            EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
        }","if (!helper.Run(<TYPE>, std::ref(helper))) { TELEPHONY_LOGI(""Interface out of time""); EXPECT_TRUE(true); } else { int32_t result = helper.GetIntResult(); EXPECT_EQ(result, <TYPE>); }"
"HWTEST_F(SimTest, Telephony_Sim_GetLockState_0100, Function | MediumTest | Level3)
{
    AccessToken token;
    if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        CoreServiceTestHelper helper;
        if (!helper.Run(GetLockStateTestFunc, std::ref(helper))) {
            TELEPHONY_LOGI(""Interface out of time"");
            EXPECT_TRUE(true);
        } else {
            int32_t result = helper.GetIntResult();
            EXPECT_GT(result, -1);
        }
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | <TYPE>) { AccessToken token; if (!SimTest::HasSimCard(slotId_)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { CoreServiceTestHelper helper; if (!helper.Run(<TYPE>, std::ref(helper))) { TELEPHONY_LOGI(""Interface out of time""); EXPECT_TRUE(true); } else { int32_t result = helper.GetIntResult(); EXPECT_GT(result, -<CONST>); } } }"
"if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        bool isCTSimCard = false;
        int32_t result = CoreServiceClient::GetInstance().IsCTSimCard(SimTest::slotId_, isCTSimCard);
        EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
    }","if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { bool isCTSimCard = false; int32_t result = CoreServiceClient::GetInstance().IsCTSimCard(SimTest::<VAR>, isCTSimCard); EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS); }"
"void SimTest::SetLockStateTestFunc(CoreServiceTestHelper &helper)
{
    LockInfo testInfo;
    testInfo.lockType = LockType::PIN_LOCK;
    testInfo.password = Str8ToStr16(""1234"");
    testInfo.lockState = LockState::LOCK_OFF;
    LockStatusResponse response = { UNLOCK_FAIL, TELEPHONY_ERROR };
    int32_t result = CoreServiceClient::GetInstance().SetLockState(SimTest::slotId_, testInfo, response);
    helper.SetIntResult(result);
    helper.NotifyAll();
}","void SimTest::SetLockStateTestFunc(CoreServiceTestHelper &helper) { LockInfo testInfo; testInfo.lockType = LockType::<TYPE>; testInfo.password = Str8ToStr16(""1234""); testInfo.lockState = LockState::LOCK_OFF; LockStatusResponse response = { UNLOCK_FAIL, TELEPHONY_ERROR }; int32_t result = CoreServiceClient::GetInstance().SetLockState(SimTest::slotId_, testInfo, response); helper.SetIntResult(result); helper.NotifyAll(); }"
"void SimTest::SetLockStateTestFunc1(CoreServiceTestHelper &helper)
{
    AccessToken token;
    LockInfo testInfo;
    testInfo.lockType = LockType::PIN_LOCK;
    testInfo.password = Str8ToStr16(""1234"");
    testInfo.lockState = LockState::LOCK_OFF;
    LockStatusResponse response = { UNLOCK_FAIL, TELEPHONY_ERROR };
    int32_t result = CoreServiceClient::GetInstance().SetLockState(SimTest::slotId1_, testInfo, response);
    helper.SetIntResult(result);
    helper.NotifyAll();
}","void SimTest::SetLockStateTestFunc1(CoreServiceTestHelper &helper) { AccessToken token; LockInfo testInfo; testInfo.lockType = LockType::<TYPE>; testInfo.password = Str8ToStr16(""1234""); testInfo.lockState = LockState::LOCK_OFF; LockStatusResponse response = { UNLOCK_FAIL, TELEPHONY_ERROR }; int32_t result = CoreServiceClient::GetInstance().SetLockState(SimTest::slotId1_, testInfo, response); helper.SetIntResult(result); helper.NotifyAll(); }"
"void SimTest::GetLockStateTestFunc(CoreServiceTestHelper &helper)
{
    LockState lockState = LockState::LOCK_ERROR;
    LockType lockType = LockType::PIN_LOCK;
    int32_t result = CoreServiceClient::GetInstance().GetLockState(SimTest::slotId_, lockType, lockState);
    helper.SetIntResult(result);
    helper.NotifyAll();
}","void SimTest::GetLockStateTestFunc(CoreServiceTestHelper &helper) { LockState lockState = LockState::LOCK_ERROR; LockType lockType = LockType::<TYPE>; int32_t result = CoreServiceClient::GetInstance().GetLockState(SimTest::slotId_, lockType, lockState); helper.SetIntResult(result); helper.NotifyAll(); }"
"void SimTest::UnlockPinTestFunc(CoreServiceTestHelper &helper)
{
    const std::u16string pin = Str8ToStr16(""1234"");
    LockStatusResponse response = { UNLOCK_FAIL, TELEPHONY_ERROR };
    int32_t result = CoreServiceClient::GetInstance().UnlockPin(SimTest::slotId_, pin, response);
    helper.SetIntResult(result);
    helper.NotifyAll();
}","void SimTest::UnlockPinTestFunc(CoreServiceTestHelper &helper) { const std::u16string <VAR> = Str8ToStr16(<STR>); LockStatusResponse response = { UNLOCK_FAIL, TELEPHONY_ERROR }; int32_t result = CoreServiceClient::GetInstance().UnlockPin(SimTest::slotId_, <VAR>, response); helper.SetIntResult(result); helper.NotifyAll(); }"
"void SimTest::UnlockPukTestFunc(CoreServiceTestHelper &helper)
{
    const std::u16string pin = Str8ToStr16(""1234"");
    const std::u16string puk = Str8ToStr16(""42014264"");
    LockStatusResponse response = { UNLOCK_FAIL, TELEPHONY_ERROR };
    int32_t result = CoreServiceClient::GetInstance().UnlockPuk(SimTest::slotId_, pin, puk, response);
    helper.SetIntResult(result);
    helper.NotifyAll();
}","void SimTest::UnlockPukTestFunc(CoreServiceTestHelper &helper) { const std::u16string <VAR> = Str8ToStr16(<STR>); const std::u16string <VAR> = Str8ToStr16(<STR>); LockStatusResponse response = { UNLOCK_FAIL, TELEPHONY_ERROR }; int32_t result = CoreServiceClient::GetInstance().UnlockPuk(SimTest::slotId_, <VAR>, <VAR>, response); helper.SetIntResult(result); helper.NotifyAll(); }"
"void SimTest::UnlockPukTestFunc1(CoreServiceTestHelper &helper)
{
    AccessToken token;
    const std::u16string pin = Str8ToStr16(""1234"");
    const std::u16string puk = Str8ToStr16(""42014264"");
    LockStatusResponse response = { UNLOCK_FAIL, TELEPHONY_ERROR };
    int32_t result = CoreServiceClient::GetInstance().UnlockPuk(SimTest::slotId1_, pin, puk, response);
    helper.SetIntResult(result);
    helper.NotifyAll();
}","void SimTest::UnlockPukTestFunc1(CoreServiceTestHelper &helper) { AccessToken token; const std::u16string <VAR> = Str8ToStr16(""1234""); const std::u16string <VAR> = Str8ToStr16(<STR>); LockStatusResponse response = { UNLOCK_FAIL, TELEPHONY_ERROR }; int32_t result = CoreServiceClient::GetInstance().UnlockPuk(SimTest::slotId1_, <VAR>, <VAR>, response); helper.SetIntResult(result); helper.NotifyAll(); }"
"void SimTest::UnlockPuk2TestFunc1(CoreServiceTestHelper &helper)
{
    AccessToken token;
    const std::u16string pin2 = Str8ToStr16(""12345678"");
    const std::u16string puk2 = Str8ToStr16(""42014264"");
    LockStatusResponse response = { UNLOCK_FAIL, TELEPHONY_ERROR };
    int32_t result = CoreServiceClient::GetInstance().UnlockPuk2(SimTest::slotId1_, pin2, puk2, response);
    helper.SetIntResult(result);
    helper.NotifyAll();
}","void SimTest::UnlockPuk2TestFunc1(CoreServiceTestHelper &helper) { AccessToken token; const std::u16string <VAR> = Str8ToStr16(""12345678""); const std::u16string <VAR> = Str8ToStr16(""42014264""); LockStatusResponse response = { UNLOCK_FAIL, TELEPHONY_ERROR }; int32_t result = CoreServiceClient::GetInstance().UnlockPuk2(SimTest::slotId1_, <VAR>, <VAR>, response); helper.SetIntResult(result); helper.NotifyAll(); }"
"void SimTest::SetActiveSimTestFunc1(CoreServiceTestHelper &helper)
{
    AccessToken token;
    int enable = 1;
    int32_t result = CoreServiceClient::GetInstance().SetActiveSim(SimTest::slotId1_, enable);
    helper.SetIntResult(result);
    helper.NotifyAll();
}","void SimTest::SetActiveSimTestFunc1(CoreServiceTestHelper &helper) { AccessToken token; int enable = 1; int32_t result = CoreServiceClient::GetInstance().SetActiveSim(SimTest::<VAR>, enable); helper.SetIntResult(result); helper.NotifyAll(); }"
"void SimTest::HasOperatorPrivileges(CoreServiceTestHelper &helper)
{
    constexpr int32_t slotId = 0;
    bool hasOperatorPrivileges = false;
    int32_t result = CoreServiceClient::GetInstance().HasOperatorPrivileges(slotId, hasOperatorPrivileges);
    helper.SetIntResult(result);
    helper.NotifyAll();
}","void SimTest::HasOperatorPrivileges(CoreServiceTestHelper &helper) { constexpr int32_t slotId = <CONST>; bool hasOperatorPrivileges = false; int32_t result = CoreServiceClient::GetInstance().HasOperatorPrivileges(slotId, hasOperatorPrivileges); helper.SetIntResult(result); helper.NotifyAll(); }"
"void SimTest::SimAuthenticationTestFunc(CoreServiceTestHelper &helper)
{
    SimAuthenticationResponse response = { 0 };
    AuthType authType = AuthType::SIM_AUTH_EAP_SIM_TYPE;
    std::string authData = ""1234"";
    int32_t result = CoreServiceClient::GetInstance().SimAuthentication(SimTest::slotId_, authType, authData, response);
    helper.SetBoolResult(result == 0);
    helper.NotifyAll();
}","void SimTest::SimAuthenticationTestFunc(CoreServiceTestHelper &helper) { SimAuthenticationResponse response = { 0 }; AuthType authType = AuthType::<TYPE>; std::string authData = ""1234""; int32_t result = CoreServiceClient::GetInstance().SimAuthentication(SimTest::slotId_, authType, authData, response); helper.SetBoolResult(result == 0); helper.NotifyAll(); }"
"void SimTest::SendTerminalResponseCmdTestFunc(CoreServiceTestHelper &helper)
{
    int32_t slotId = 0;
    std::string cmd = ""send terminal response"";
    int32_t result = CoreServiceClient::GetInstance().SendTerminalResponseCmd(slotId, cmd);
    helper.SetIntResult(result);
    helper.NotifyAll();
}","void SimTest::SendTerminalResponseCmdTestFunc(CoreServiceTestHelper &helper) { int32_t slotId = 0; std::string cmd = <STR>; int32_t result = CoreServiceClient::GetInstance().SendTerminalResponseCmd(slotId, cmd); helper.SetIntResult(result); helper.NotifyAll(); }"
"void SimTest::SendTerminalResponseCmdTestFunc1(CoreServiceTestHelper &helper)
{
    AccessToken token;
    int32_t slotId = 1;
    std::string cmd = ""send terminal response"";
    int32_t result = CoreServiceClient::GetInstance().SendTerminalResponseCmd(slotId, cmd);
    helper.SetIntResult(result);
    helper.NotifyAll();
}","void SimTest::SendTerminalResponseCmdTestFunc1(CoreServiceTestHelper &helper) { AccessToken token; int32_t slotId = 1; std::string cmd = <STR>; int32_t result = CoreServiceClient::GetInstance().SendTerminalResponseCmd(slotId, cmd); helper.SetIntResult(result); helper.NotifyAll(); }"
"void SimTest::SetVoiceMailInfoTestFunc(CoreServiceTestHelper &helper)
{
    const std::u16string mailName = Str8ToStr16(""张三"");
    const std::u16string mailnumber = Str8ToStr16(""13123456789"");
    int32_t result = CoreServiceClient::GetInstance().SetVoiceMailInfo(SimTest::slotId_, mailName, mailnumber);
    helper.SetIntResult(result);
    helper.NotifyAll();
}","void SimTest::SetVoiceMailInfoTestFunc(CoreServiceTestHelper &helper) { const std::u16string mailName = Str8ToStr16(""张三""); const std::u16string mailnumber = Str8ToStr16(""13123456789""); int32_t result = CoreServiceClient::GetInstance().SetVoiceMailInfo(SimTest::<VAR>, mailName, mailnumber); helper.SetIntResult(result); helper.NotifyAll(); }"
"HWTEST_F(SimRilBranchTest, Telephony_SimAccountManager_002, Function | MediumTest | Level1)
{
    auto telRilManager = std::make_shared<TelRilManager>();
    auto simStateManager = std::make_shared<SimStateManager>(telRilManager);
    EventFwk::MatchingSkills matchingSkills;
    matchingSkills.AddEvent(CommonEventSupport::COMMON_EVENT_OPERATOR_CONFIG_CHANGED);
    EventFwk::CommonEventSubscribeInfo subcribeInfo(matchingSkills);
    auto simFileManager = std::make_shared<SimFileManager>(subcribeInfo, telRilManager, simStateManager);
    auto simAccountManager = std::make_shared<SimAccountManager>(telRilManager, simStateManager, simFileManager);
    simAccountManager->Init(0);
    simAccountManager->UpdateImsCapFromChip(0, {0, 0, 0, 0});
    EXPECT_NE(simAccountManager->operatorConfigCache_, nullptr);
}","HWTEST_F(SimRilBranchTest, <TYPE>, Function | MediumTest | Level1) { auto telRilManager = std::make_shared<TelRilManager>(); auto simStateManager = std::make_shared<SimStateManager>(telRilManager); EventFwk::MatchingSkills matchingSkills; matchingSkills.AddEvent(CommonEventSupport::COMMON_EVENT_OPERATOR_CONFIG_CHANGED); EventFwk::CommonEventSubscribeInfo subcribeInfo(matchingSkills); auto simFileManager = std::make_shared<SimFileManager>(subcribeInfo, telRilManager, simStateManager); auto simAccountManager = std::make_shared<SimAccountManager>(telRilManager, simStateManager, simFileManager); simAccountManager->Init(0); simAccountManager->UpdateImsCapFromChip(0, {0, 0, 0, 0}); EXPECT_NE(simAccountManager->operatorConfigCache_, nullptr); }"
"HWTEST_F(CoreServiceBranchTest, Telephony_OperatorNameCMCC_001, Function | MediumTest | Level1)
{
    EventFwk::MatchingSkills matchingSkills;
    matchingSkills.AddEvent(CommonEventSupport::COMMON_EVENT_OPERATOR_CONFIG_CHANGED);
    EventFwk::CommonEventSubscribeInfo subscriberInfo(matchingSkills);
    auto telRilManager = std::make_shared<TelRilManager>();
    auto simManager = std::make_shared<SimManager>(telRilManager);
    auto networkSearchManager = std::make_shared<NetworkSearchManager>(telRilManager, simManager);
    auto networkSearchState = std::make_shared<NetworkSearchState>(networkSearchManager, INVALID_SLOTID);
    auto operatorName = std::make_shared<OperatorName>(
        subscriberInfo, networkSearchState, simManager, networkSearchManager, INVALID_SLOTID);
    std::string simPlmn = ""46000"";
    std::string netPlmn = ""46031"";
    EXPECT_TRUE(operatorName->isDomesticRoaming(simPlmn, netPlmn));
    simPlmn = ""46001"";
    netPlmn = ""46031"";
    EXPECT_FALSE(operatorName->isDomesticRoaming(simPlmn, netPlmn));
    simPlmn = ""46003"";
    netPlmn = ""46031"";
    EXPECT_FALSE(operatorName->isDomesticRoaming(simPlmn, netPlmn));
    simPlmn = ""46015"";
    netPlmn = ""46031"";
    EXPECT_FALSE(operatorName->isDomesticRoaming(simPlmn, netPlmn));
    simPlmn = ""46018"";
    netPlmn = ""46031"";
    EXPECT_FALSE(operatorName->isDomesticRoaming(simPlmn, netPlmn));
    simPlmn = ""46000"";
    netPlmn = ""46050"";
    EXPECT_TRUE(operatorName->isDomesticRoaming(simPlmn, netPlmn));
    simPlmn = ""46001"";
    netPlmn = ""46050"";
    EXPECT_FALSE(operatorName->isDomesticRoaming(simPlmn, netPlmn));
    simPlmn = ""46003"";
    netPlmn = ""46050"";
    EXPECT_FALSE(operatorName->isDomesticRoaming(simPlmn, netPlmn));
    simPlmn = ""46015"";
    netPlmn = ""46050"";
    EXPECT_FALSE(operatorName->isDomesticRoaming(simPlmn, netPlmn));
    simPlmn = ""46018"";
    netPlmn = ""46050"";
    EXPECT_FALSE(operatorName->isDomesticRoaming(simPlmn, netPlmn));
}","HWTEST_F(CoreServiceBranchTest, <TYPE>, Function | MediumTest | Level1) { EventFwk::MatchingSkills matchingSkills; matchingSkills.AddEvent(CommonEventSupport::COMMON_EVENT_OPERATOR_CONFIG_CHANGED); EventFwk::CommonEventSubscribeInfo subscriberInfo(matchingSkills); auto telRilManager = std::make_shared<TelRilManager>(); auto simManager = std::make_shared<SimManager>(telRilManager); auto networkSearchManager = std::make_shared<NetworkSearchManager>(telRilManager, simManager); auto networkSearchState = std::make_shared<NetworkSearchState>(networkSearchManager, INVALID_SLOTID); auto operatorName = std::make_shared<OperatorName>( subscriberInfo, networkSearchState, simManager, networkSearchManager, INVALID_SLOTID); std::string simPlmn = ""46000""; std::string netPlmn = <STR>; EXPECT_TRUE(operatorName->isDomesticRoaming(simPlmn, netPlmn)); simPlmn = ""46001""; netPlmn = <STR>; EXPECT_FALSE(operatorName->isDomesticRoaming(simPlmn, netPlmn)); simPlmn = ""46003""; netPlmn = <STR>; EXPECT_FALSE(operatorName->isDomesticRoaming(simPlmn, netPlmn)); simPlmn = ""46015""; netPlmn = <STR>; EXPECT_FALSE(operatorName->isDomesticRoaming(simPlmn, netPlmn)); simPlmn = ""46018""; netPlmn = <STR>; EXPECT_FALSE(operatorName->isDomesticRoaming(simPlmn, netPlmn)); simPlmn = ""46000""; netPlmn = <STR>; EXPECT_TRUE(operatorName->isDomesticRoaming(simPlmn, netPlmn)); simPlmn = ""46001""; netPlmn = <STR>; EXPECT_FALSE(operatorName->isDomesticRoaming(simPlmn, netPlmn)); simPlmn = ""46003""; netPlmn = <STR>; EXPECT_FALSE(operatorName->isDomesticRoaming(simPlmn, netPlmn)); simPlmn = ""46015""; netPlmn = <STR>; EXPECT_FALSE(operatorName->isDomesticRoaming(simPlmn, netPlmn)); simPlmn = ""46018""; netPlmn = <STR>; EXPECT_FALSE(operatorName->isDomesticRoaming(simPlmn, netPlmn)); }"
"HWTEST_F(CoreServiceCommonTest, TelephonyConfig_ConvertCharToInt_001, Function | MediumTest | Level1)
{
    TelephonyConfig telephonyConfig;
    uint32_t retValue = 0;
    std::string maxCap = ""1234567890"";
    uint32_t index = 11;
    int32_t result = telephonyConfig.ConvertCharToInt(retValue, maxCap, index);
    ASSERT_EQ(result, -1);
}","HWTEST_F(CoreServiceCommonTest, <TYPE>, Function | MediumTest | Level1) { TelephonyConfig telephonyConfig; uint32_t retValue = 0; std::string maxCap = <STR>; uint32_t index = <CONST>; int32_t result = telephonyConfig.ConvertCharToInt(retValue, maxCap, index); ASSERT_EQ(result, -<CONST>); }"
"HWTEST_F(SimTest, Telephony_Sim_GetActiveSimAccountInfoList_0100, Function | MediumTest | Level1)
{
    AccessToken token;
    if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        std::vector<IccAccountInfo> iccAccountInfoList;
        int32_t result = CoreServiceClient::GetInstance().GetActiveSimAccountInfoList(iccAccountInfoList);
        EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level1) { AccessToken token; if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { std::vector<IccAccountInfo> iccAccountInfoList; int32_t result = CoreServiceClient::GetInstance().GetActiveSimAccountInfoList(iccAccountInfoList); EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS); } }"
"if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        std::vector<IccAccountInfo> iccAccountInfoList;
        int32_t result = CoreServiceClient::GetInstance().GetActiveSimAccountInfoList(iccAccountInfoList);
        EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
    }","if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { std::vector<IccAccountInfo> iccAccountInfoList; int32_t result = CoreServiceClient::GetInstance().GetActiveSimAccountInfoList(iccAccountInfoList); EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS); }"
"HWTEST_F(SimTest, Telephony_Sim_QueryIccAdnDiallingNumbers_0100, Function | MediumTest | Level3)
{
    AccessToken token;
    if (!(SimTest::HasSimCard(SimTest::slotId_))) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
        return;
    }
    CoreServiceTestHelper helper;
    if (!helper.Run(QueryIccAdnDiallingNumbersTestFunc, std::ref(helper))) {
        TELEPHONY_LOGI(""Interface out of time"");
    }
    ASSERT_FALSE(helper.boolResult_);
    ASSERT_EQ(helper.result_, 0);
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level3) { AccessToken token; if (!(SimTest::HasSimCard(SimTest::slotId_))) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); return; } CoreServiceTestHelper helper; if (!helper.Run(<TYPE>, std::ref(helper))) { TELEPHONY_LOGI(""Interface out of time""); } ASSERT_FALSE(helper.boolResult_); ASSERT_EQ(helper.result_, 0); }"
"if (!(SimTest::HasSimCard(SimTest::slotId_))) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
        return;
    }","if (!(SimTest::HasSimCard(SimTest::<VAR>))) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); return; }"
SimTest::HasSimCard(SimTest::slotId_),SimTest::HasSimCard(SimTest::<VAR>)
"HWTEST_F(SimTest, Telephony_Sim_QueryIccAdnDiallingNumbers_0200, Function | MediumTest | Level3)
{
    AccessToken token;
    if (!(SimTest::HasSimCard(SimTest::slotId1_))) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
        return;
    }
    CoreServiceTestHelper helper;
    if (!helper.Run(QueryIccAdnDiallingNumbersTestFunc1, std::ref(helper))) {
        TELEPHONY_LOGI(""Interface out of time"");
    }
    ASSERT_FALSE(helper.boolResult_);
    ASSERT_EQ(helper.result_, 0);
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level3) { AccessToken token; if (!(SimTest::HasSimCard(SimTest::slotId1_))) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); return; } CoreServiceTestHelper helper; if (!helper.Run(<TYPE>, std::ref(helper))) { TELEPHONY_LOGI(""Interface out of time""); } ASSERT_FALSE(helper.boolResult_); ASSERT_EQ(helper.result_, 0); }"
"HWTEST_F(SimTest, Telephony_Sim_DelIccAdnDiallingNumbers_0100, Function | MediumTest | Level3)
{
    AccessToken token;
    if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        int index = 1; 
        std::shared_ptr<DiallingNumbersInfo> diallingNumber = std::make_shared<DiallingNumbersInfo>();
        diallingNumber->index_ = index;
        CoreServiceClient::GetInstance().DelIccDiallingNumbers(
            SimTest::slotId_, DiallingNumbersInfo::SIM_ADN, diallingNumber);
        ASSERT_EQ(diallingNumber->elementaryFileId_, 0);
        ASSERT_EQ(diallingNumber->index_, 1);
        ASSERT_EQ(diallingNumber->name_, u"""");
        ASSERT_EQ(diallingNumber->number_, u"""");
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level3) { AccessToken token; if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { int index = 1; std::shared_ptr<DiallingNumbersInfo> diallingNumber = std::make_shared<DiallingNumbersInfo>(); diallingNumber->index_ = index; CoreServiceClient::GetInstance().DelIccDiallingNumbers( SimTest::<VAR>, DiallingNumbersInfo::SIM_ADN, diallingNumber); ASSERT_EQ(diallingNumber->elementaryFileId_, 0); ASSERT_EQ(diallingNumber->index_, 1); ASSERT_EQ(diallingNumber->name_, u""""); ASSERT_EQ(diallingNumber->number_, u""""); } }"
"HWTEST_F(SimTest, Telephony_Sim_UpdateIccFdnDiallingNumbers_0100, Function | MediumTest | Level3)
{
    AccessToken token;
    if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        std::shared_ptr<DiallingNumbersInfo> diallingNumber = std::make_shared<DiallingNumbersInfo>();
        int index = 1; 
        diallingNumber->name_ = Str8ToStr16(""SimAdnLi"");
        diallingNumber->number_ = Str8ToStr16(""12345678901"");
        diallingNumber->pin2_ = Str8ToStr16(""1234"");
        diallingNumber->index_ = index;
        CoreServiceClient::GetInstance().UpdateIccDiallingNumbers(
            SimTest::slotId_, DiallingNumbersInfo::SIM_FDN, diallingNumber);
        ASSERT_EQ(diallingNumber->elementaryFileId_, 0);
        ASSERT_EQ(diallingNumber->index_, 1);
        ASSERT_EQ(diallingNumber->name_, Str8ToStr16(""SimAdnLi""));
        ASSERT_EQ(diallingNumber->number_, Str8ToStr16(""12345678901""));
        ASSERT_EQ(diallingNumber->pin2_, Str8ToStr16(""1234""));
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level3) { AccessToken token; if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { std::shared_ptr<DiallingNumbersInfo> diallingNumber = std::make_shared<DiallingNumbersInfo>(); int index = 1; diallingNumber->name_ = Str8ToStr16(""SimAdnLi""); diallingNumber->number_ = Str8ToStr16(""12345678901""); diallingNumber->pin2_ = Str8ToStr16(""1234""); diallingNumber->index_ = index; CoreServiceClient::GetInstance().UpdateIccDiallingNumbers( SimTest::<VAR>, DiallingNumbersInfo::SIM_FDN, diallingNumber); ASSERT_EQ(diallingNumber->elementaryFileId_, 0); ASSERT_EQ(diallingNumber->index_, 1); ASSERT_EQ(diallingNumber->name_, Str8ToStr16(""SimAdnLi"")); ASSERT_EQ(diallingNumber->number_, Str8ToStr16(""12345678901"")); ASSERT_EQ(diallingNumber->pin2_, Str8ToStr16(""1234"")); } }"
"HWTEST_F(SimTest, Telephony_Sim_DelIccFdnDiallingNumbers_0100, Function | MediumTest | Level3)
{
    AccessToken token;
    if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        int index = 1; 
        std::shared_ptr<DiallingNumbersInfo> diallingNumber = std::make_shared<DiallingNumbersInfo>();
        diallingNumber->pin2_ = Str8ToStr16(""1234"");
        diallingNumber->index_ = index;
        CoreServiceClient::GetInstance().DelIccDiallingNumbers(
            SimTest::slotId_, DiallingNumbersInfo::SIM_FDN, diallingNumber);
        ASSERT_EQ(diallingNumber->elementaryFileId_, 0);
        ASSERT_EQ(diallingNumber->index_, 1);
        ASSERT_EQ(diallingNumber->name_, u"""");
        ASSERT_EQ(diallingNumber->number_, u"""");
        ASSERT_EQ(diallingNumber->pin2_, Str8ToStr16(""1234""));
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level3) { AccessToken token; if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { int index = 1; std::shared_ptr<DiallingNumbersInfo> diallingNumber = std::make_shared<DiallingNumbersInfo>(); diallingNumber->pin2_ = Str8ToStr16(""1234""); diallingNumber->index_ = index; CoreServiceClient::GetInstance().DelIccDiallingNumbers( SimTest::<VAR>, DiallingNumbersInfo::SIM_FDN, diallingNumber); ASSERT_EQ(diallingNumber->elementaryFileId_, 0); ASSERT_EQ(diallingNumber->index_, 1); ASSERT_EQ(diallingNumber->name_, u""""); ASSERT_EQ(diallingNumber->number_, u""""); ASSERT_EQ(diallingNumber->pin2_, Str8ToStr16(""1234"")); } }"
"HWTEST_F(SimTest, Telephony_Sim_ParseFromCustomSystem_0100, Function | MediumTest | Level1)
{
    if (!(SimTest::HasSimCard(SimTest::slotId_))) {
        TELEPHONY_LOGE(""Telephony_Sim_GetOperatorConf_0100 Sim card is null"");
    } else {
        bool isCanGetFromDefaultCustomSystemNormal = false;
        std::vector<const char *> defaultPath { ""/system/operator_config.json"", ""/chipset/operator_config.json"",
            ""/sys_prod/operator_config.json"", ""/chip_prod/operator_config.json"" };
        int32_t fileExit = 0;
        for (auto path : defaultPath) {
            if (access(path, R_OK) == fileExit) {
                isCanGetFromDefaultCustomSystemNormal = true;
            } else {
                TELEPHONY_LOGI(""%{public}s not exist"", path);
            }
        }
        OperatorConfig opc;
        OperatorFileParser parser;
        cJSON *opcJsonValue = nullptr;
        if (isCanGetFromDefaultCustomSystemNormal) {
            EXPECT_EQ(parser.ParseFromCustomSystem(SimTest::slotId_, opc, opcJsonValue),
                isCanGetFromDefaultCustomSystemNormal);
        }
        if (opcJsonValue != nullptr) {
            cJSON_Delete(opcJsonValue);
            opcJsonValue = nullptr;
        }
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level1) { if (!(SimTest::HasSimCard(SimTest::<VAR>))) { TELEPHONY_LOGE(<STR>); } else { bool isCanGetFromDefaultCustomSystemNormal = false; std::vector<const char *> defaultPath { ""/system/operator_config.json"", ""/chipset/operator_config.json"", ""/sys_prod/operator_config.json"", ""/chip_prod/operator_config.json"" }; int32_t fileExit = 0; for (auto path : defaultPath) { if (access(path, R_OK) == fileExit) { isCanGetFromDefaultCustomSystemNormal = true; } else { TELEPHONY_LOGI(""%{public}s not exist"", path); } } OperatorConfig opc; OperatorFileParser parser; cJSON *opcJsonValue = nullptr; if (isCanGetFromDefaultCustomSystemNormal) { EXPECT_EQ(parser.ParseFromCustomSystem(SimTest::<VAR>, opc, opcJsonValue), isCanGetFromDefaultCustomSystemNormal); } if (opcJsonValue != nullptr) { cJSON_Delete(opcJsonValue); opcJsonValue = nullptr; } } }"
"if (!(SimTest::HasSimCard(SimTest::slotId_))) {
        TELEPHONY_LOGE(""Telephony_Sim_GetOperatorConf_0100 Sim card is null"");
    } else {
        bool isCanGetFromDefaultCustomSystemNormal = false;
        std::vector<const char *> defaultPath { ""/system/operator_config.json"", ""/chipset/operator_config.json"",
            ""/sys_prod/operator_config.json"", ""/chip_prod/operator_config.json"" };
        int32_t fileExit = 0;
        for (auto path : defaultPath) {
            if (access(path, R_OK) == fileExit) {
                isCanGetFromDefaultCustomSystemNormal = true;
            } else {
                TELEPHONY_LOGI(""%{public}s not exist"", path);
            }
        }
        OperatorConfig opc;
        OperatorFileParser parser;
        cJSON *opcJsonValue = nullptr;
        if (isCanGetFromDefaultCustomSystemNormal) {
            EXPECT_EQ(parser.ParseFromCustomSystem(SimTest::slotId_, opc, opcJsonValue),
                isCanGetFromDefaultCustomSystemNormal);
        }
        if (opcJsonValue != nullptr) {
            cJSON_Delete(opcJsonValue);
            opcJsonValue = nullptr;
        }
    }","if (!(SimTest::HasSimCard(SimTest::<VAR>))) { TELEPHONY_LOGE(<STR>); } else { bool isCanGetFromDefaultCustomSystemNormal = false; std::vector<const char *> defaultPath { ""/system/operator_config.json"", ""/chipset/operator_config.json"", ""/sys_prod/operator_config.json"", ""/chip_prod/operator_config.json"" }; int32_t fileExit = 0; for (auto path : defaultPath) { if (access(path, R_OK) == fileExit) { isCanGetFromDefaultCustomSystemNormal = true; } else { TELEPHONY_LOGI(""%{public}s not exist"", path); } } OperatorConfig opc; OperatorFileParser parser; cJSON *opcJsonValue = nullptr; if (isCanGetFromDefaultCustomSystemNormal) { EXPECT_EQ(parser.ParseFromCustomSystem(SimTest::<VAR>, opc, opcJsonValue), isCanGetFromDefaultCustomSystemNormal); } if (opcJsonValue != nullptr) { cJSON_Delete(opcJsonValue); opcJsonValue = nullptr; } }"
"if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        SimState simState = SimState::SIM_STATE_UNKNOWN;
        int32_t result = CoreServiceClient::GetInstance().GetSimState(SimTest::slotId_, simState);
        EXPECT_GT(result, -1);
    }","if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { <TYPE> <VAR> = <TYPE>::<TYPE>; int32_t result = CoreServiceClient::GetInstance().GetSimState(SimTest::<VAR>, <VAR>); EXPECT_GT(result, -1); }"
"HWTEST_F(SimTest, Telephony_Sim_HasSimCard_0100, Function | MediumTest | Level1)
{
    if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        int32_t result = SimTest::HasSimCard(SimTest::slotId_);
        EXPECT_GT(result, -1);
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level1) { if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { int32_t result = SimTest::HasSimCard(SimTest::<VAR>); EXPECT_GT(result, -1); } }"
"if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        int32_t result = SimTest::HasSimCard(SimTest::slotId_);
        EXPECT_GT(result, -1);
    }","if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { int32_t result = SimTest::HasSimCard(SimTest::<VAR>); EXPECT_GT(result, -1); }"
int32_t result = SimTest::HasSimCard(SimTest::slotId_);,int32_t result = SimTest::HasSimCard(SimTest::<VAR>);
"HWTEST_F(SimTest, Telephony_Sim_SetDefaultVoiceSlotId_0100, Function | MediumTest | Level2)
{
    AccessToken token;
    if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        int32_t result = CoreServiceClient::GetInstance().SetDefaultVoiceSlotId(SimTest::slotId_);
        EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level2) { AccessToken token; if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { int32_t result = CoreServiceClient::GetInstance().SetDefaultVoiceSlotId(SimTest::<VAR>); EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS); } }"
"if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        int32_t result = CoreServiceClient::GetInstance().SetDefaultVoiceSlotId(SimTest::slotId_);
        EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
    }","if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { int32_t result = CoreServiceClient::GetInstance().SetDefaultVoiceSlotId(SimTest::<VAR>); EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS); }"
"HWTEST_F(SimTest, Telephony_Sim_SetShowName_0100, Function | MediumTest | Level3)
{
    AccessToken token;
    if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        const std::u16string cardName = Str8ToStr16(""SimNameZhang"");
        int32_t result = CoreServiceClient::GetInstance().SetShowName(SimTest::slotId_, cardName);
        EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level3) { AccessToken token; if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { const std::u16string <VAR> = Str8ToStr16(<STR>); int32_t result = CoreServiceClient::GetInstance().SetShowName(SimTest::<VAR>, <VAR>); EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS); } }"
"if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        const std::u16string cardName = Str8ToStr16(""SimNameZhang"");
        int32_t result = CoreServiceClient::GetInstance().SetShowName(SimTest::slotId_, cardName);
        EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
    }","if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { const std::u16string <VAR> = Str8ToStr16(<STR>); int32_t result = CoreServiceClient::GetInstance().SetShowName(SimTest::<VAR>, <VAR>); EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS); }"
"HWTEST_F(SimTest, Telephony_Sim_SetShowName_0300, Function | MediumTest | Level3)
{
    if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        const std::u16string cardName = Str8ToStr16(""SimNameZhang"");
        int32_t result = CoreServiceClient::GetInstance().SetShowName(SimTest::slotId_, cardName);
        EXPECT_NE(result, TELEPHONY_ERR_SUCCESS);
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level3) { if (!SimTest::HasSimCard(slotId_)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { const std::u16string <VAR> = Str8ToStr16(<STR>); int32_t result = CoreServiceClient::GetInstance().SetShowName(SimTest::slotId_, <VAR>); EXPECT_NE(result, TELEPHONY_ERR_SUCCESS); } }"
std::u16string showName;,std::u16string <VAR>;
"HWTEST_F(SimTest, Telephony_Sim_GetOpKey_0100, Function | MediumTest | Level1)
{
    if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        std::u16string opkey;
        int32_t result = CoreServiceClient::GetInstance().GetOpKey(SimTest::slotId_, opkey);
        EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level1) { if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { std::u16string <VAR>; int32_t result = CoreServiceClient::GetInstance().GetOpKey(SimTest::<VAR>, <VAR>); EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS); } }"
"if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        std::u16string opkey;
        int32_t result = CoreServiceClient::GetInstance().GetOpKey(SimTest::slotId_, opkey);
        EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
    }","if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { std::u16string <VAR>; int32_t result = CoreServiceClient::GetInstance().GetOpKey(SimTest::<VAR>, <VAR>); EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS); }"
std::u16string opkey;,std::u16string <VAR>;
"HWTEST_F(SimTest, Telephony_Sim_GetOpKeyExt_0100, Function | MediumTest | Level1)
{
    if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        std::u16string opkeyExt;
        int32_t result = CoreServiceClient::GetInstance().GetOpKeyExt(SimTest::slotId_, opkeyExt);
        EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level1) { if (!SimTest::HasSimCard(<VAR>)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { std::u16string opkeyExt; int32_t result = CoreServiceClient::GetInstance().GetOpKeyExt(SimTest::<VAR>, opkeyExt); EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS); } }"
"HWTEST_F(SimTest, Telephony_Sim_GetSlotId_0100, Function | MediumTest | Level3)
{
    if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        int32_t simId = 1;
        int32_t result = CoreServiceClient::GetInstance().GetSlotId(simId);
        EXPECT_GE(result, -1);
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level3) { if (!SimTest::HasSimCard(slotId_)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { int32_t <VAR> = <CONST>; int32_t result = CoreServiceClient::GetInstance().GetSlotId(<VAR>); EXPECT_GE(result, -<CONST>); } }"
"if (!SimTest::HasSimCard(slotId_)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        int32_t simId = 1;
        int32_t result = CoreServiceClient::GetInstance().GetSlotId(simId);
        EXPECT_GE(result, -1);
    }","if (!SimTest::HasSimCard(slotId_)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { int32_t <VAR> = <CONST>; int32_t result = CoreServiceClient::GetInstance().GetSlotId(<VAR>); EXPECT_GE(result, -<CONST>); }"
"HWTEST_F(SimTest, Telephony_Sim_HasOperatorPrivileges_0100, Function | MediumTest | Level3)
{
    SimState simState = SimState::SIM_STATE_UNKNOWN;
    CoreServiceClient::GetInstance().GetSimState(SimTest::slotId_, simState);
    if (!(SimTest::HasSimCard(SimTest::slotId_)) || (simState != SimState::SIM_STATE_READY)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        CoreServiceTestHelper helper;
        if (!helper.Run(HasOperatorPrivileges, std::ref(helper))) {
            TELEPHONY_LOGI(""Interface out of time"");
            EXPECT_TRUE(true);
        } else {
            int32_t result = helper.GetIntResult();
            EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
        }
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level3) { SimState simState = SimState::SIM_STATE_UNKNOWN; CoreServiceClient::GetInstance().GetSimState(SimTest::<VAR>, simState); if (!(SimTest::HasSimCard(SimTest::<VAR>)) || (simState != SimState::SIM_STATE_READY)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { CoreServiceTestHelper helper; if (!helper.Run(<TYPE>, std::ref(helper))) { TELEPHONY_LOGI(""Interface out of time""); EXPECT_TRUE(true); } else { int32_t result = helper.GetIntResult(); EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS); } } }"
"if (!(SimTest::HasSimCard(SimTest::slotId_)) || (simState != SimState::SIM_STATE_READY)) {
        TELEPHONY_LOGI(""TelephonyTestService has no sim card"");
    } else {
        CoreServiceTestHelper helper;
        if (!helper.Run(HasOperatorPrivileges, std::ref(helper))) {
            TELEPHONY_LOGI(""Interface out of time"");
            EXPECT_TRUE(true);
        } else {
            int32_t result = helper.GetIntResult();
            EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
        }
    }","if (!(SimTest::HasSimCard(SimTest::<VAR>)) || (simState != SimState::SIM_STATE_READY)) { TELEPHONY_LOGI(""TelephonyTestService has no sim card""); } else { CoreServiceTestHelper helper; if (!helper.Run(<TYPE>, std::ref(helper))) { TELEPHONY_LOGI(""Interface out of time""); EXPECT_TRUE(true); } else { int32_t result = helper.GetIntResult(); EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS); } }"
"HWTEST_F(SimTest, Telephony_Sim_UpdateOpcBoolValue_0100, Function | MediumTest | Level3)
{
    TELEPHONY_LOGI(""Telephony_Sim_UpdateOpcBoolValue_0100 enter"");
    OperatorConfig opc;
    const std::string key = ""volte_supported_bool"";
    const bool value = true;
    std::shared_ptr<OperatorConfigCache> opcc = SimTest::CreateOperatorConfigCache(SimTest::slotId_);
    opcc->UpdateOpcBoolValue(opc, key, value);
    ASSERT_TRUE(opc.boolValue[key] == value);
    std::u16string sValue = Str8ToStr16(value ? ""true"" : ""false"");
    ASSERT_TRUE(opc.configValue[Str8ToStr16(key)] == sValue);
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level3) { TELEPHONY_LOGI(<STR>); OperatorConfig opc; const std::string key = ""volte_supported_bool""; const bool value = <VAR>; std::shared_ptr<OperatorConfigCache> opcc = SimTest::CreateOperatorConfigCache(SimTest::slotId_); opcc->UpdateOpcBoolValue(opc, key, value); ASSERT_TRUE(opc.boolValue[key] == value); std::u16string sValue = Str8ToStr16(value ? ""true"" : ""false""); ASSERT_TRUE(opc.configValue[Str8ToStr16(key)] == sValue); }"
"HWTEST_F(SimTest, Telephony_Sim_UpdateOpcBoolValue_0300, Function | MediumTest | Level3)
{
    TELEPHONY_LOGI(""Telephony_Sim_UpdateOpcBoolValue_0300 enter"");
    OperatorConfig opc;
    const std::string key = ""volte_supported_bool"";
    const bool oldValue = true;
    const bool newValue = true;
    opc.boolValue[key] = oldValue;
    std::shared_ptr<OperatorConfigCache> opcc = SimTest::CreateOperatorConfigCache(SimTest::slotId_);
    opcc->UpdateOpcBoolValue(opc, key, newValue);
    bool result = oldValue && newValue;
    ASSERT_TRUE(opc.boolValue[key] == result);
    std::u16string sResult = Str8ToStr16(result ? ""true"" : ""false"");
    ASSERT_TRUE(opc.configValue[Str8ToStr16(key)] == sResult);
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level3) { TELEPHONY_LOGI(<STR>); OperatorConfig opc; const std::string key = ""volte_supported_bool""; const bool oldValue = <VAR>; const bool newValue = <VAR>; opc.boolValue[key] = oldValue; std::shared_ptr<OperatorConfigCache> opcc = SimTest::CreateOperatorConfigCache(SimTest::slotId_); opcc->UpdateOpcBoolValue(opc, key, newValue); bool result = oldValue && newValue; ASSERT_TRUE(opc.boolValue[key] == result); std::u16string sResult = Str8ToStr16(result ? ""true"" : ""false""); ASSERT_TRUE(opc.configValue[Str8ToStr16(key)] == sResult); }"
"HWTEST_F(SimTest, Telephony_Sim_UpdateImsCapFromChip_0100, Function | MediumTest | Level2)
{
    if (!SimTest::HasSimCard(SimTest::slotId_)) {
        TELEPHONY_LOGE(""Telephony_Sim_UpdateImsCapFromChip_0100 has no sim card"");
    } else {
        const int32_t volteCap = -1;
        ImsCapFromChip imsCapFromChip = {volteCap, 0, 0, 0};
        std::shared_ptr<OperatorConfigCache> opcc = SimTest::CreateOperatorConfigCache(SimTest::slotId_);
        std::string volteCapKey = KEY_PERSIST_TELEPHONY_VOLTE_CAP_IN_CHIP + std::to_string(SimTest::slotId_);
        SetParameter(volteCapKey.c_str(), ""-1"");
        opcc->UpdateImsCapFromChip(SimTest::slotId_, imsCapFromChip);
        OperatorConfig opc;
        opcc->UpdatevolteCap(SimTest::slotId_, opc);
        int32_t volteCapValue = GetIntParameter(volteCapKey.c_str(), -1);
        ASSERT_EQ(volteCapValue, volteCap);
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level2) { if (!SimTest::HasSimCard(SimTest::<VAR>)) { TELEPHONY_LOGE(<STR>); } else { const int32_t volteCap = -1; ImsCapFromChip imsCapFromChip = {volteCap, 0, 0, 0}; std::shared_ptr<OperatorConfigCache> opcc = SimTest::CreateOperatorConfigCache(SimTest::<VAR>); std::string volteCapKey = KEY_PERSIST_TELEPHONY_VOLTE_CAP_IN_CHIP + std::to_string(SimTest::<VAR>); SetParameter(volteCapKey.c_str(), <STR>); opcc->UpdateImsCapFromChip(SimTest::<VAR>, imsCapFromChip); OperatorConfig opc; opcc->UpdatevolteCap(SimTest::<VAR>, opc); int32_t volteCapValue = GetIntParameter(volteCapKey.c_str(), -1); ASSERT_EQ(volteCapValue, volteCap); } }"
"if (!SimTest::HasSimCard(SimTest::slotId_)) {
        TELEPHONY_LOGE(""Telephony_Sim_UpdateImsCapFromChip_0100 has no sim card"");
    } else {
        const int32_t volteCap = -1;
        ImsCapFromChip imsCapFromChip = {volteCap, 0, 0, 0};
        std::shared_ptr<OperatorConfigCache> opcc = SimTest::CreateOperatorConfigCache(SimTest::slotId_);
        std::string volteCapKey = KEY_PERSIST_TELEPHONY_VOLTE_CAP_IN_CHIP + std::to_string(SimTest::slotId_);
        SetParameter(volteCapKey.c_str(), ""-1"");
        opcc->UpdateImsCapFromChip(SimTest::slotId_, imsCapFromChip);
        OperatorConfig opc;
        opcc->UpdatevolteCap(SimTest::slotId_, opc);
        int32_t volteCapValue = GetIntParameter(volteCapKey.c_str(), -1);
        ASSERT_EQ(volteCapValue, volteCap);
    }","if (!SimTest::HasSimCard(SimTest::slotId_)) { TELEPHONY_LOGE(<STR>); } else { const int32_t volteCap = -1; ImsCapFromChip imsCapFromChip = {volteCap, 0, 0, 0}; std::shared_ptr<OperatorConfigCache> opcc = SimTest::CreateOperatorConfigCache(SimTest::slotId_); std::string volteCapKey = KEY_PERSIST_TELEPHONY_VOLTE_CAP_IN_CHIP + std::to_string(SimTest::slotId_); SetParameter(volteCapKey.c_str(), <STR>); opcc->UpdateImsCapFromChip(SimTest::slotId_, imsCapFromChip); OperatorConfig opc; opcc->UpdatevolteCap(SimTest::slotId_, opc); int32_t volteCapValue = GetIntParameter(volteCapKey.c_str(), -1); ASSERT_EQ(volteCapValue, volteCap); }"
"HWTEST_F(SimTest, Telephony_Sim_UpdateImsCapFromChip_0200, Function | MediumTest | Level2)
{
    if (!SimTest::HasSimCard(SimTest::slotId_)) {
        TELEPHONY_LOGE(""Telephony_Sim_UpdateImsCapFromChip_0200 has no sim card"");
    } else {
        const int32_t volteCap = 0;
        ImsCapFromChip imsCapFromChip = {volteCap, 0, 0, 0};
        std::shared_ptr<OperatorConfigCache> opcc = SimTest::CreateOperatorConfigCache(SimTest::slotId_);
        std::string volteCapKey = KEY_PERSIST_TELEPHONY_VOLTE_CAP_IN_CHIP + std::to_string(SimTest::slotId_);
        SetParameter(volteCapKey.c_str(), ""0"");
        opcc->UpdateImsCapFromChip(SimTest::slotId_, imsCapFromChip);
        OperatorConfig opc;
        opcc->UpdatevolteCap(SimTest::slotId_, opc);
        int32_t volteCapValue = GetIntParameter(volteCapKey.c_str(), -1);
        ASSERT_EQ(volteCapValue, volteCap);
        ASSERT_TRUE(opc.boolValue[""volte_supported_bool""] == false);
        ASSERT_TRUE(opc.configValue[Str8ToStr16(""volte_supported_bool"")] == Str8ToStr16(""false""));
    }
}","HWTEST_F(SimTest, <TYPE>, Function | MediumTest | Level2) { if (!SimTest::HasSimCard(SimTest::slotId_)) { TELEPHONY_LOGE(<STR>); } else { const int32_t volteCap = <CONST>; ImsCapFromChip imsCapFromChip = {volteCap, 0, 0, 0}; std::shared_ptr<OperatorConfigCache> opcc = SimTest::CreateOperatorConfigCache(SimTest::slotId_); std::string volteCapKey = KEY_PERSIST_TELEPHONY_VOLTE_CAP_IN_CHIP + std::to_string(SimTest::slotId_); SetParameter(volteCapKey.c_str(), <STR>); opcc->UpdateImsCapFromChip(SimTest::slotId_, imsCapFromChip); OperatorConfig opc; opcc->UpdatevolteCap(SimTest::slotId_, opc); int32_t volteCapValue = GetIntParameter(volteCapKey.c_str(), -1); ASSERT_EQ(volteCapValue, volteCap); ASSERT_TRUE(opc.boolValue[""volte_supported_bool""] == <VAR>); ASSERT_TRUE(opc.configValue[Str8ToStr16(""volte_supported_bool"")] == Str8ToStr16(<STR>)); } }"
"if (!SimTest::HasSimCard(SimTest::slotId_)) {
        TELEPHONY_LOGE(""Telephony_Sim_UpdateImsCapFromChip_0200 has no sim card"");
    } else {
        const int32_t volteCap = 0;
        ImsCapFromChip imsCapFromChip = {volteCap, 0, 0, 0};
        std::shared_ptr<OperatorConfigCache> opcc = SimTest::CreateOperatorConfigCache(SimTest::slotId_);
        std::string volteCapKey = KEY_PERSIST_TELEPHONY_VOLTE_CAP_IN_CHIP + std::to_string(SimTest::slotId_);
        SetParameter(volteCapKey.c_str(), ""0"");
        opcc->UpdateImsCapFromChip(SimTest::slotId_, imsCapFromChip);
        OperatorConfig opc;
        opcc->UpdatevolteCap(SimTest::slotId_, opc);
        int32_t volteCapValue = GetIntParameter(volteCapKey.c_str(), -1);
        ASSERT_EQ(volteCapValue, volteCap);
        ASSERT_TRUE(opc.boolValue[""volte_supported_bool""] == false);
        ASSERT_TRUE(opc.configValue[Str8ToStr16(""volte_supported_bool"")] == Str8ToStr16(""false""));
    }","if (!SimTest::HasSimCard(SimTest::slotId_)) { TELEPHONY_LOGE(<STR>); } else { const int32_t volteCap = <CONST>; ImsCapFromChip imsCapFromChip = {volteCap, 0, 0, 0}; std::shared_ptr<OperatorConfigCache> opcc = SimTest::CreateOperatorConfigCache(SimTest::slotId_); std::string volteCapKey = KEY_PERSIST_TELEPHONY_VOLTE_CAP_IN_CHIP + std::to_string(SimTest::slotId_); SetParameter(volteCapKey.c_str(), <STR>); opcc->UpdateImsCapFromChip(SimTest::slotId_, imsCapFromChip); OperatorConfig opc; opcc->UpdatevolteCap(SimTest::slotId_, opc); int32_t volteCapValue = GetIntParameter(volteCapKey.c_str(), -1); ASSERT_EQ(volteCapValue, volteCap); ASSERT_TRUE(opc.boolValue[""volte_supported_bool""] == <VAR>); ASSERT_TRUE(opc.configValue[Str8ToStr16(""volte_supported_bool"")] == Str8ToStr16(<STR>)); }"
"void NetworkSearchTestCallbackStub::WaitForGetNetworkModeCallback(int32_t timeoutSecond)
{
    std::unique_lock<std::mutex> callbackLock(getNetworkModeMutex_);
    getNetworkModeCv_.wait_for(callbackLock, std::chrono::seconds(timeoutSecond));
}","void NetworkSearchTestCallbackStub::WaitForGetNetworkModeCallback(int32_t timeoutSecond) { std::unique_lock<std::mutex> callbackLock(<VAR>); <VAR>.wait_for(callbackLock, std::chrono::seconds(timeoutSecond)); }"
std::unique_lock<std::mutex> callbackLock(getNetworkModeMutex_);,std::unique_lock<std::mutex> callbackLock(<VAR>);
"void NetworkSearchTestCallbackStub::WaitForGetNetworkSearchInformationCallback(int32_t timeoutSecond)
{
    std::unique_lock<std::mutex> callbackLock(getNetworkSearchInformationMutex_);
    getNetworkSearchInformationCv_.wait_for(callbackLock, std::chrono::seconds(timeoutSecond));
}","void NetworkSearchTestCallbackStub::WaitForGetNetworkSearchInformationCallback(int32_t timeoutSecond) { std::unique_lock<std::mutex> callbackLock(<VAR>); <VAR>.wait_for(callbackLock, std::chrono::seconds(timeoutSecond)); }"
"class TestIRemoteObject : public IRemoteObject {
public:
    uint32_t requestCode_ = -1;
    int32_t result_ = 0;
public:
    TestIRemoteObject() : IRemoteObject(u""test_remote_object"") {}
    ~TestIRemoteObject() {}
    int32_t GetObjectRefCount() override
    {
        return 0;
    }
    int SendRequest(uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option) override
    {
        TELEPHONY_LOGI(""Mock SendRequest"");
        requestCode_ = code;
        reply.WriteInt32(result_);
        return 0;
    }
    bool IsProxyObject() const override
    {
        return true;
    }
    bool CheckObjectLegality() const override
    {
        return true;
    }
    bool AddDeathRecipient(const sptr<DeathRecipient> &recipient) override
    {
        return true;
    }
    bool RemoveDeathRecipient(const sptr<DeathRecipient> &recipient) override
    {
        return true;
    }
    bool Marshalling(Parcel &parcel) const override
    {
        return true;
    }
    sptr<IRemoteBroker> AsInterface() override
    {
        return nullptr;
    }
    int Dump(int fd, const std::vector<std::u16string> &args) override
    {
        return 0;
    }
    std::u16string GetObjectDescriptor() const
    {
        std::u16string descriptor = std::u16string();
        return descriptor;
    }
}","class <TYPE> : public IRemoteObject { public: uint32_t requestCode_ = -1; int32_t result_ = 0; public: TestIRemoteObject() : IRemoteObject(u<STR>) {} ~TestIRemoteObject() {} int32_t GetObjectRefCount() override { return 0; } int SendRequest(uint32_t code, MessageParcel &data, MessageParcel &reply, MessageOption &option) override { TELEPHONY_LOGI(""Mock SendRequest""); requestCode_ = code; reply.WriteInt32(result_); return 0; } bool IsProxyObject() const override { return true; } bool CheckObjectLegality() const override { return true; } bool AddDeathRecipient(const sptr<DeathRecipient> &recipient) override { return true; } bool RemoveDeathRecipient(const sptr<DeathRecipient> &recipient) override { return true; } bool Marshalling(Parcel &parcel) const override { return true; } sptr<IRemoteBroker> AsInterface() override { return nullptr; } int Dump(int fd, const std::vector<std::u16string> &args) override { return 0; } std::u16string GetObjectDescriptor() const { std::u16string descriptor = std::u16string(); return descriptor; } }"
"HWTEST_F(CoreServiceNativeBranchTest, Telephony_CoreManagerInner_002, Function | MediumTest | Level1)
{
    CoreManagerInner mInner;
    auto telRilManager = std::make_shared<TelRilManager>();
    auto simManager = std::make_shared<SimManager>(telRilManager);
    auto networkSearchManager = std::make_shared<NetworkSearchManager>(telRilManager, simManager);
    mInner.networkSearchManager_ = networkSearchManager;
    sptr<NetworkSearchCallBackBase> callback = nullptr;
    mInner.RegisterCellularDataObject(callback);
    mInner.UnRegisterCellularDataObject(callback);
    mInner.RegisterCellularCallObject(callback);
    mInner.UnRegisterCellularCallObject(callback);
    simManager->multiSimMonitor_ = nullptr;
    mInner.simManager_ = simManager;
    sptr<SimAccountCallback> simAccountCallback;
    EXPECT_EQ(mInner.RegisterSimAccountCallback(-1, simAccountCallback), TELEPHONY_ERR_LOCAL_PTR_NULL);
    EXPECT_EQ(mInner.UnregisterSimAccountCallback(simAccountCallback), TELEPHONY_ERR_LOCAL_PTR_NULL);
    mInner.telRilManager_ = nullptr;
    std::shared_ptr<AppExecFwk::EventHandler> handler;
    std::string testStr = """";
    EXPECT_EQ(mInner.SetNetworkSelectionMode(-1, -1, 0, testStr, handler), TELEPHONY_ERR_LOCAL_PTR_NULL);
    AppExecFwk::InnerEvent::Pointer response(nullptr, nullptr);
    mInner.telRilManager_ = telRilManager;
    EXPECT_EQ(mInner.GetClip(-1, response), TELEPHONY_ERR_LOCAL_PTR_NULL);
    EXPECT_EQ(mInner.SetClip(-1, -1, response), TELEPHONY_ERR_LOCAL_PTR_NULL);
    EXPECT_EQ(mInner.GetClir(-1, response), TELEPHONY_ERR_LOCAL_PTR_NULL);
    EXPECT_EQ(mInner.SetClir(-1, -1, response), TELEPHONY_ERR_LOCAL_PTR_NULL);
    EXPECT_EQ(mInner.SetCallWaiting(-1, -1, response), TELEPHONY_ERR_LOCAL_PTR_NULL);
    CallTransferParam param;
    CallRestrictionParam reParam;
    EXPECT_EQ(mInner.SetCallTransferInfo(-1, param, response), TELEPHONY_ERR_LOCAL_PTR_NULL);
    EXPECT_EQ(mInner.GetCallTransferInfo(-1, -1, response), TELEPHONY_ERR_LOCAL_PTR_NULL);
    EXPECT_EQ(mInner.GetCallWaiting(-1, response), TELEPHONY_ERR_LOCAL_PTR_NULL);
    EXPECT_EQ(mInner.GetCallRestriction(-1, testStr, response), TELEPHONY_ERR_LOCAL_PTR_NULL);
    EXPECT_EQ(mInner.SetCallRestriction(-1, reParam, response), TELEPHONY_ERR_LOCAL_PTR_NULL);
}","HWTEST_F(CoreServiceNativeBranchTest, <TYPE>, Function | MediumTest | Level1) { CoreManagerInner mInner; auto telRilManager = std::make_shared<TelRilManager>(); auto simManager = std::make_shared<SimManager>(telRilManager); auto networkSearchManager = std::make_shared<NetworkSearchManager>(telRilManager, simManager); mInner.networkSearchManager_ = networkSearchManager; sptr<NetworkSearchCallBackBase> callback = nullptr; mInner.RegisterCellularDataObject(callback); mInner.UnRegisterCellularDataObject(callback); mInner.RegisterCellularCallObject(callback); mInner.UnRegisterCellularCallObject(callback); simManager->multiSimMonitor_ = nullptr; mInner.simManager_ = simManager; sptr<SimAccountCallback> simAccountCallback; EXPECT_EQ(mInner.RegisterSimAccountCallback(-1, simAccountCallback), TELEPHONY_ERR_LOCAL_PTR_NULL); EXPECT_EQ(mInner.UnregisterSimAccountCallback(simAccountCallback), TELEPHONY_ERR_LOCAL_PTR_NULL); mInner.telRilManager_ = nullptr; std::shared_ptr<AppExecFwk::EventHandler> handler; std::string testStr = """"; EXPECT_EQ(mInner.SetNetworkSelectionMode(-1, -1, 0, testStr, handler), TELEPHONY_ERR_LOCAL_PTR_NULL); AppExecFwk::InnerEvent::Pointer response(nullptr, nullptr); mInner.telRilManager_ = telRilManager; EXPECT_EQ(mInner.GetClip(-1, <VAR>), TELEPHONY_ERR_LOCAL_PTR_NULL); EXPECT_EQ(mInner.SetClip(-1, -1, <VAR>), TELEPHONY_ERR_LOCAL_PTR_NULL); EXPECT_EQ(mInner.GetClir(-1, <VAR>), TELEPHONY_ERR_LOCAL_PTR_NULL); EXPECT_EQ(mInner.SetClir(-1, -1, <VAR>), TELEPHONY_ERR_LOCAL_PTR_NULL); EXPECT_EQ(mInner.SetCallWaiting(-1, -1, <VAR>), TELEPHONY_ERR_LOCAL_PTR_NULL); <TYPE> <VAR>; <TYPE> <VAR>; EXPECT_EQ(mInner.SetCallTransferInfo(-1, <VAR>, <VAR>), TELEPHONY_ERR_LOCAL_PTR_NULL); EXPECT_EQ(mInner.GetCallTransferInfo(-1, -1, <VAR>), TELEPHONY_ERR_LOCAL_PTR_NULL); EXPECT_EQ(mInner.GetCallWaiting(-1, <VAR>), TELEPHONY_ERR_LOCAL_PTR_NULL); EXPECT_EQ(mInner.GetCallRestriction(-1, testStr, <VAR>), TELEPHONY_ERR_LOCAL_PTR_NULL); EXPECT_EQ(mInner.SetCallRestriction(-1, <VAR>, <VAR>), TELEPHONY_ERR_LOCAL_PTR_NULL); }"
"HWTEST_F(CoreServiceNativeBranchTest, Telephony_CoreManagerInner_009, Function | MediumTest | Level1)
{
    CoreManagerInner mInner;
    auto telRilManager = std::make_shared<TelRilManager>();
    auto simManager = std::make_shared<SimManager>(telRilManager);
    auto networkSearchManager = std::make_shared<NetworkSearchManager>(telRilManager, simManager);
    mInner.networkSearchManager_ = networkSearchManager;
    sptr<NetworkSearchCallBackBase> callback = nullptr;
    mInner.RegisterCellularDataObject(callback);
    mInner.UnRegisterCellularDataObject(callback);
    mInner.RegisterCellularCallObject(callback);
    mInner.UnRegisterCellularCallObject(callback);
    simManager->multiSimMonitor_ = nullptr;
    mInner.simManager_ = simManager;
    sptr<SimAccountCallback> simAccountCallback;
    EXPECT_EQ(mInner.RegisterSimAccountCallback(-1, simAccountCallback), TELEPHONY_ERR_LOCAL_PTR_NULL);
    EXPECT_EQ(mInner.UnregisterSimAccountCallback(simAccountCallback), TELEPHONY_ERR_LOCAL_PTR_NULL);
    mInner.telRilManager_ = nullptr;
    std::shared_ptr<AppExecFwk::EventHandler> handler;
    AppExecFwk::InnerEvent::Pointer response(nullptr, nullptr);
    mInner.telRilManager_ = telRilManager;
    mInner.GetNetworkSelectionMode(-1, 0, handler);
    EXPECT_NE(mInner.telRilManager_, nullptr);
}","HWTEST_F(CoreServiceNativeBranchTest, <TYPE>, Function | MediumTest | Level1) { CoreManagerInner mInner; auto telRilManager = std::make_shared<TelRilManager>(); auto simManager = std::make_shared<SimManager>(telRilManager); auto networkSearchManager = std::make_shared<NetworkSearchManager>(telRilManager, simManager); mInner.networkSearchManager_ = networkSearchManager; sptr<NetworkSearchCallBackBase> callback = nullptr; mInner.RegisterCellularDataObject(callback); mInner.UnRegisterCellularDataObject(callback); mInner.RegisterCellularCallObject(callback); mInner.UnRegisterCellularCallObject(callback); simManager->multiSimMonitor_ = nullptr; mInner.simManager_ = simManager; sptr<SimAccountCallback> simAccountCallback; EXPECT_EQ(mInner.RegisterSimAccountCallback(-1, simAccountCallback), TELEPHONY_ERR_LOCAL_PTR_NULL); EXPECT_EQ(mInner.UnregisterSimAccountCallback(simAccountCallback), TELEPHONY_ERR_LOCAL_PTR_NULL); mInner.telRilManager_ = nullptr; std::shared_ptr<AppExecFwk::EventHandler> handler; AppExecFwk::InnerEvent::Pointer response(nullptr, nullptr); mInner.telRilManager_ = telRilManager; mInner.GetNetworkSelectionMode(-1, 0, handler); EXPECT_NE(mInner.telRilManager_, nullptr); }"
"HWTEST_F(CoreServiceNativeBranchTest, Telephony_CoreManagerInner_0014, Function | MediumTest | Level1)
{
    CoreManagerInner mInner;
    auto telRilManager = std::make_shared<TelRilManager>();
    auto simManager = std::make_shared<SimManager>(telRilManager);
    auto networkSearchManager = std::make_shared<NetworkSearchManager>(telRilManager, simManager);
    mInner.networkSearchManager_ = networkSearchManager;
    sptr<NetworkSearchCallBackBase> callback = nullptr;
    mInner.RegisterCellularDataObject(callback);
    mInner.UnRegisterCellularDataObject(callback);
    mInner.RegisterCellularCallObject(callback);
    mInner.UnRegisterCellularCallObject(callback);
    mInner.simManager_ = nullptr;
    int32_t simId = -1;
    EXPECT_EQ(mInner.SetActiveSim(-1, 0), TELEPHONY_ERR_LOCAL_PTR_NULL);
    EXPECT_EQ(mInner.GetDefaultVoiceSimId(simId), TELEPHONY_ERR_LOCAL_PTR_NULL);
    EXPECT_EQ(mInner.GetDefaultSmsSimId(simId), TELEPHONY_ERR_LOCAL_PTR_NULL);
    mInner.telRilManager_ = telRilManager;
    std::shared_ptr<AppExecFwk::EventHandler> handler;
    std::string str = ""test"";
    std::vector<EmergencyCall> eccVec;
    auto core = mInner.SetUssd(1, 1, str, handler);
    EXPECT_NE(mInner.telRilManager_, nullptr);
    EXPECT_EQ(core, TELEPHONY_ERR_LOCAL_PTR_NULL);
    auto core1 = mInner.CloseUnFinishedUssd(1, 1, handler);
    EXPECT_NE(mInner.telRilManager_, nullptr);
    EXPECT_EQ(core1, TELEPHONY_ERR_LOCAL_PTR_NULL);
    auto core2 = mInner.GetUssd(1, 1, handler);
    EXPECT_NE(mInner.telRilManager_, nullptr);
    EXPECT_EQ(core2, TELEPHONY_ERR_LOCAL_PTR_NULL);
    auto core3 = mInner.GetMute(1, 1, handler);
    EXPECT_NE(mInner.telRilManager_, nullptr);
    EXPECT_EQ(core3, TELEPHONY_ERR_LOCAL_PTR_NULL);
    auto core4 = mInner.SetMute(1, 1, 1, handler);
    EXPECT_NE(mInner.telRilManager_, nullptr);
    EXPECT_EQ(core4, TELEPHONY_ERR_LOCAL_PTR_NULL);
    auto core5 = mInner.GetEmergencyCallList(1, 1, handler);
    EXPECT_NE(mInner.telRilManager_, nullptr);
    EXPECT_EQ(core5, TELEPHONY_ERR_LOCAL_PTR_NULL);
    auto core6 = mInner.GetCallFailReason(1, 1, handler);
    EXPECT_NE(mInner.telRilManager_, nullptr);
    EXPECT_EQ(core6, TELEPHONY_ERR_LOCAL_PTR_NULL);
}","HWTEST_F(CoreServiceNativeBranchTest, <TYPE>, Function | MediumTest | Level1) { CoreManagerInner mInner; auto telRilManager = std::make_shared<TelRilManager>(); auto simManager = std::make_shared<SimManager>(telRilManager); auto networkSearchManager = std::make_shared<NetworkSearchManager>(telRilManager, simManager); mInner.networkSearchManager_ = networkSearchManager; sptr<NetworkSearchCallBackBase> callback = nullptr; mInner.RegisterCellularDataObject(callback); mInner.UnRegisterCellularDataObject(callback); mInner.RegisterCellularCallObject(callback); mInner.UnRegisterCellularCallObject(callback); mInner.simManager_ = nullptr; int32_t simId = -1; EXPECT_EQ(mInner.SetActiveSim(-1, 0), TELEPHONY_ERR_LOCAL_PTR_NULL); EXPECT_EQ(mInner.GetDefaultVoiceSimId(simId), TELEPHONY_ERR_LOCAL_PTR_NULL); EXPECT_EQ(mInner.GetDefaultSmsSimId(simId), TELEPHONY_ERR_LOCAL_PTR_NULL); mInner.telRilManager_ = telRilManager; std::shared_ptr<AppExecFwk::EventHandler> handler; std::string str = ""test""; std::vector<EmergencyCall> eccVec; auto core = mInner.SetUssd(1, 1, <VAR>, handler); EXPECT_NE(mInner.telRilManager_, nullptr); EXPECT_EQ(core, TELEPHONY_ERR_LOCAL_PTR_NULL); auto core1 = mInner.CloseUnFinishedUssd(1, 1, handler); EXPECT_NE(mInner.telRilManager_, nullptr); EXPECT_EQ(core1, TELEPHONY_ERR_LOCAL_PTR_NULL); auto core2 = mInner.GetUssd(1, 1, handler); EXPECT_NE(mInner.telRilManager_, nullptr); EXPECT_EQ(core2, TELEPHONY_ERR_LOCAL_PTR_NULL); auto core3 = mInner.GetMute(1, 1, handler); EXPECT_NE(mInner.telRilManager_, nullptr); EXPECT_EQ(core3, TELEPHONY_ERR_LOCAL_PTR_NULL); auto <VAR> = mInner.SetMute(1, 1, 1, handler); EXPECT_NE(mInner.telRilManager_, nullptr); EXPECT_EQ(<VAR>, TELEPHONY_ERR_LOCAL_PTR_NULL); auto <VAR> = mInner.GetEmergencyCallList(1, 1, handler); EXPECT_NE(mInner.telRilManager_, nullptr); EXPECT_EQ(<VAR>, TELEPHONY_ERR_LOCAL_PTR_NULL); auto <VAR> = mInner.GetCallFailReason(1, 1, handler); EXPECT_NE(mInner.telRilManager_, nullptr); EXPECT_EQ(<VAR>, TELEPHONY_ERR_LOCAL_PTR_NULL); }"
"HWTEST_F(SatelliteServiceTest, RadioStateChangedCallback_0001, Function | MediumTest | Level2)
{
    TELEPHONY_LOGI(""SatelliteServiceTest::RadioStateChangedCallback_0001 -->"");
    std::shared_ptr<MockHandler> handler = std::make_shared<MockHandler>();
    SatelliteCoreCallback callback(handler);
    MessageParcel reply;
    MessageOption option;
    MessageParcel data;
    data.WriteInterfaceToken(callbackToken);
    data.WriteInt32(RadioEvent::RADIO_STATE_CHANGED);
    data.WriteInt32(0);
    auto ret =
        callback.OnRemoteRequest(ToCode(SatelliteCoreCallbackInterfaceCode::RADIO_STATE_CHANGED), data, reply, option);
    EXPECT_EQ(ret, TELEPHONY_SUCCESS);
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
    EXPECT_EQ(handler->eventId_, RadioEvent::RADIO_STATE_CHANGED);
    EXPECT_EQ(reply.ReadInt32(), TELEPHONY_SUCCESS);
}","HWTEST_F(SatelliteServiceTest, <TYPE>, Function | MediumTest | Level2) { TELEPHONY_LOGI(<STR>); std::shared_ptr<MockHandler> handler = std::make_shared<MockHandler>(); SatelliteCoreCallback callback(handler); MessageParcel reply; MessageOption option; MessageParcel data; data.WriteInterfaceToken(callbackToken); data.WriteInt32(RadioEvent::<TYPE>); data.WriteInt32(<CONST>); auto ret = callback.OnRemoteRequest(ToCode(SatelliteCoreCallbackInterfaceCode::<TYPE>), data, reply, option); EXPECT_EQ(ret, TELEPHONY_SUCCESS); std::this_thread::sleep_for(std::chrono::milliseconds(100)); EXPECT_EQ(handler->eventId_, RadioEvent::<TYPE>); EXPECT_EQ(reply.ReadInt32(), TELEPHONY_SUCCESS); }"
"HWTEST_F(VcardTest, Telephony_VCardTest_101, Function | MediumTest | Level2)
{
    AccessToken token;
    std::shared_ptr<DataShare::DataShareHelper> dataShareHelper =
        CreateDataShareHelper(TELEPHONY_CORE_SERVICE_SYS_ABILITY_ID, g_contactUri);
    if (dataShareHelper != nullptr) {
        TELEPHONY_LOGI(""CreateDataShareHelper start test!!"");
        VCardManager::GetInstance().SetDataHelper(dataShareHelper);
        std::string filePath = ""test"";
        std::vector<std::string> columns;
        DataShare::DataSharePredicates predicates;
        predicates.EqualTo(Contact::ID, ""1"")->Or()->EqualTo(Contact::ID, ""3"");
        auto resultSet = VCardRdbHelper::GetInstance().QueryContact(columns, predicates);
        if (resultSet == nullptr) {
            TELEPHONY_LOGE(""VCardTest QueryContact failed"");
        } else {
            int rowCount = 0;
            resultSet->GetRowCount(rowCount);
            TELEPHONY_LOGI(""VCardTest QueryContact rowCount= %{public}d"", rowCount);
            VCardManager::GetInstance().Export(filePath, predicates);
            VCardManager::GetInstance().Import(filePath, 0);
        }
    } else {
        TELEPHONY_LOGE(""VCardTest CreateDataShareHelper == null"");
        EXPECT_NE(dataShareHelper, nullptr);
    }
}","HWTEST_F(VcardTest, <TYPE>, Function | MediumTest | Level2) { AccessToken token; std::shared_ptr<DataShare::DataShareHelper> dataShareHelper = CreateDataShareHelper(TELEPHONY_CORE_SERVICE_SYS_ABILITY_ID, g_contactUri); if (dataShareHelper != nullptr) { TELEPHONY_LOGI(""CreateDataShareHelper start test!!""); VCardManager::GetInstance().SetDataHelper(dataShareHelper); std::string filePath = ""test""; std::vector<std::string> columns; DataShare::DataSharePredicates predicates; predicates.EqualTo(Contact::ID, <STR>)->Or()->EqualTo(Contact::ID, <STR>); auto resultSet = VCardRdbHelper::GetInstance().QueryContact(columns, predicates); if (resultSet == nullptr) { TELEPHONY_LOGE(""VCardTest QueryContact failed""); } else { int rowCount = 0; resultSet->GetRowCount(rowCount); TELEPHONY_LOGI(""VCardTest QueryContact rowCount= %{public}d"", rowCount); VCardManager::GetInstance().Export(filePath, predicates); VCardManager::GetInstance().Import(filePath, <CONST>); } } else { TELEPHONY_LOGE(<STR>); EXPECT_NE(dataShareHelper, nullptr); } }"
"HWTEST_F(VcardTest, Telephony_VCardTest_V30, Function | MediumTest | Level1)
{
    std::string inputString =
        ""BEGIN:VCARD\r\nVERSION:3.0\r\nN:test1;;;;\r\nFN:test1\r\nEND:VCARD\r\nBEGIN:VCARD\r\nVERSION:3.0\r\nN:test2;;;""
        "";\r\nFN:test2\r\nEND:VCARD\r\nBEGIN:VCARD\r\nVERSION:3.0\r\nN:test3;;;;\r\nFN:test3\r\nEND:VCARD\r\n"";
    WriteTestData(inputString);
    int32_t expectSize = 3;
    int32_t errorCode;
    VCardManager::GetInstance().Decode(TEL_FILE_NAME, errorCode);
    std::vector<std::shared_ptr<VCardContact>> contacts = VCardManager::GetInstance().listener_->contacts_;
    EXPECT_EQ(static_cast<int32_t>(contacts.size()), expectSize);
}","HWTEST_F(VcardTest, <TYPE>, Function | MediumTest | Level1) { std::string inputString = <STR> <STR>; WriteTestData(inputString); int32_t expectSize = 3; int32_t errorCode; VCardManager::GetInstance().Decode(TEL_FILE_NAME, errorCode); std::vector<std::shared_ptr<VCardContact>> contacts = VCardManager::GetInstance().listener_->contacts_; EXPECT_EQ(static_cast<int32_t>(contacts.size()), expectSize); }"
i < testStringNum,i < <VAR>
"HWTEST_F(NetworkSearchTest, Telephony_NetworkSearch_FactoryReset_0100, Function | MediumTest | Level3)
{
    AccessToken token;
    if (NetworkSearchTest::telephonyService_ == nullptr || !(NetworkSearchTest::HasSimCard(SLOT_ID_0))) {
        TELEPHONY_LOGI(""TelephonyTestService Remote service is null"");
        NetworkSearchTest::telephonyService_ = GetProxy();
    } else {
        int32_t result = CoreServiceClient::GetInstance().FactoryReset(SLOT_ID_0);
        TELEPHONY_LOGI(""TelephonyTestService FactoryReset result: %{public}d"", result);
        EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
    }
}","HWTEST_F(NetworkSearchTest, <TYPE>, Function | MediumTest | Level3) { AccessToken token; if (NetworkSearchTest::telephonyService_ == nullptr || !(NetworkSearchTest::HasSimCard(<TYPE>))) { TELEPHONY_LOGI(""TelephonyTestService Remote service is null""); NetworkSearchTest::telephonyService_ = GetProxy(); } else { int32_t result = CoreServiceClient::GetInstance().FactoryReset(<TYPE>); TELEPHONY_LOGI(""TelephonyTestService FactoryReset result: %{public}d"", result); EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS); } }"
"if (NetworkSearchTest::telephonyService_ == nullptr || !(NetworkSearchTest::HasSimCard(SLOT_ID_0))) {
        TELEPHONY_LOGI(""TelephonyTestService Remote service is null"");
        NetworkSearchTest::telephonyService_ = GetProxy();
    } else {
        int32_t result = CoreServiceClient::GetInstance().FactoryReset(SLOT_ID_0);
        TELEPHONY_LOGI(""TelephonyTestService FactoryReset result: %{public}d"", result);
        EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS);
    }","if (NetworkSearchTest::telephonyService_ == nullptr || !(NetworkSearchTest::HasSimCard(<TYPE>))) { TELEPHONY_LOGI(""TelephonyTestService Remote service is null""); NetworkSearchTest::telephonyService_ = GetProxy(); } else { int32_t result = CoreServiceClient::GetInstance().FactoryReset(<TYPE>); TELEPHONY_LOGI(""TelephonyTestService FactoryReset result: %{public}d"", result); EXPECT_EQ(result, TELEPHONY_ERR_SUCCESS); }"
"HWTEST_F(NetworkSearchTest, Telephony_NetworkSearch_GetNrSsbIdInfo_0100, Function | MediumTest | Level3)
{
    AccessToken token;
    if (NetworkSearchTest::telephonyService_ == nullptr || !(NetworkSearchTest::HasSimCard(SLOT_ID_0))) {
        TELEPHONY_LOGE(""TelephonyTestService Remote service is null"");
        NetworkSearchTest::telephonyService_ = GetProxy();
    } else {
        std::shared_ptr<NrSsbInformation> nrCellSsbIdsInfo = std::make_shared<NrSsbInformation>();
        int32_t result = CoreServiceClient::GetInstance().GetNrSsbIdInfo(SLOT_ID_0, nrCellSsbIdsInfo);
        EXPECT_NE(result, TELEPHONY_ERR_SUCCESS);
        NetworkSearchTest::PrintNrSsbIdInfo(nrCellSsbIdsInfo);
    }
}","HWTEST_F(NetworkSearchTest, <TYPE>, Function | MediumTest | Level3) { AccessToken token; if (NetworkSearchTest::telephonyService_ == nullptr || !(NetworkSearchTest::HasSimCard(<TYPE>))) { TELEPHONY_LOGE(""TelephonyTestService Remote service is null""); NetworkSearchTest::telephonyService_ = GetProxy(); } else { std::shared_ptr<NrSsbInformation> nrCellSsbIdsInfo = std::make_shared<NrSsbInformation>(); int32_t result = CoreServiceClient::GetInstance().GetNrSsbIdInfo(<TYPE>, nrCellSsbIdsInfo); EXPECT_NE(result, TELEPHONY_ERR_SUCCESS); NetworkSearchTest::PrintNrSsbIdInfo(nrCellSsbIdsInfo); } }"
"if (NetworkSearchTest::telephonyService_ == nullptr || !(NetworkSearchTest::HasSimCard(SLOT_ID_0))) {
        TELEPHONY_LOGE(""TelephonyTestService Remote service is null"");
        NetworkSearchTest::telephonyService_ = GetProxy();
    } else {
        std::shared_ptr<NrSsbInformation> nrCellSsbIdsInfo = std::make_shared<NrSsbInformation>();
        int32_t result = CoreServiceClient::GetInstance().GetNrSsbIdInfo(SLOT_ID_0, nrCellSsbIdsInfo);
        EXPECT_NE(result, TELEPHONY_ERR_SUCCESS);
        NetworkSearchTest::PrintNrSsbIdInfo(nrCellSsbIdsInfo);
    }","if (NetworkSearchTest::telephonyService_ == nullptr || !(NetworkSearchTest::HasSimCard(<TYPE>))) { TELEPHONY_LOGE(""TelephonyTestService Remote service is null""); NetworkSearchTest::telephonyService_ = GetProxy(); } else { std::shared_ptr<NrSsbInformation> nrCellSsbIdsInfo = std::make_shared<NrSsbInformation>(); int32_t result = CoreServiceClient::GetInstance().GetNrSsbIdInfo(<TYPE>, nrCellSsbIdsInfo); EXPECT_NE(result, TELEPHONY_ERR_SUCCESS); NetworkSearchTest::PrintNrSsbIdInfo(nrCellSsbIdsInfo); }"
int32_t networkCapabilityType = static_cast<int32_t>(*data % NETWORK_CAPABILITY_TYPE);,int32_t <VAR> = static_cast<int32_t>(*data % <TYPE>);
"void DoSomethingInterestingWithMyAPI(const uint8_t *data, size_t size)
{
    if (data == nullptr || size == 0) {
        return;
    }
    GetUniqueDeviceId(data, size);
    GetMeid(data, size);
    GetBasebandVersion(data, size);
    GetOperatorNumeric(data, size);
    GetOperatorName(data, size);
    SendEnvelopeCmd(data, size);
    GetNetworkCapability(data, size);
    SetNetworkCapability(data, size);
    GetResidentNetworkNumeric(data, size);
    auto telRilManager = DelayedSingleton<CoreService>::GetInstance()->telRilManager_;
    if (telRilManager == nullptr || telRilManager->handler_ == nullptr) {
        return;
    }
    auto handler = telRilManager->handler_;
    if (handler != nullptr) {
        handler->RemoveAllEvents();
        handler->SendEvent(0, 0, AppExecFwk::EventQueue::Priority::HIGH);
        sleep(SLEEP_TIME_SECONDS);
    }
    telRilManager->handler_->ClearFfrt(false);
    telRilManager->handler_->queue_ = nullptr;
    return;
}","void DoSomethingInterestingWithMyAPI(const uint8_t *data, size_t size) { if (data == nullptr || size == 0) { return; } GetUniqueDeviceId(data, size); GetMeid(data, size); GetBasebandVersion(data, size); GetOperatorNumeric(data, size); GetOperatorName(data, size); SendEnvelopeCmd(data, size); GetNetworkCapability(data, size); SetNetworkCapability(data, size); GetResidentNetworkNumeric(data, size); auto telRilManager = DelayedSingleton<CoreService>::GetInstance()->telRilManager_; if (telRilManager == nullptr || telRilManager->handler_ == nullptr) { return; } auto handler = telRilManager->handler_; if (handler != nullptr) { handler->RemoveAllEvents(); handler->SendEvent(0, 0, AppExecFwk::EventQueue::Priority::HIGH); sleep(SLEEP_TIME_SECONDS); } telRilManager->handler_->ClearFfrt(false); telRilManager->handler_-><VAR> = nullptr; return; }"
"void UnlockPin(const uint8_t *data, size_t size)
{
    if (!IsServiceInited()) {
        return;
    }
    MessageParcel dataMessageParcel;
    int32_t slotId = static_cast<int32_t>(*data % SLOT_NUM);
    dataMessageParcel.WriteInt32(slotId);
    std::string pin(reinterpret_cast<const char *>(data), size);
    std::u16string pinStr = Str8ToStr16(pin);
    dataMessageParcel.WriteString16(pinStr);
    MessageParcel reply;
    DelayedSingleton<CoreService>::GetInstance()->OnUnlockPin(dataMessageParcel, reply);
}","void UnlockPin(const uint8_t *data, size_t size) { if (!IsServiceInited()) { return; } MessageParcel dataMessageParcel; int32_t slotId = static_cast<int32_t>(*data % SLOT_NUM); dataMessageParcel.WriteInt32(slotId); std::string pin(reinterpret_cast<const char *>(data), size); std::u16string <VAR> = Str8ToStr16(<VAR>); dataMessageParcel.WriteString16(<VAR>); MessageParcel reply; DelayedSingleton<CoreService>::GetInstance()->OnUnlockPin(dataMessageParcel, reply); }"
"void AlterPin(const uint8_t *data, size_t size)
{
    if (!IsServiceInited()) {
        return;
    }
    MessageParcel dataMessageParcel;
    int32_t slotId = static_cast<int32_t>(*data % SLOT_NUM);
    dataMessageParcel.WriteInt32(slotId);
    std::string newPin(reinterpret_cast<const char *>(data), size);
    std::u16string newPinStr = Str8ToStr16(newPin);
    dataMessageParcel.WriteString16(newPinStr);
    std::string oldPin(reinterpret_cast<const char *>(data), size);
    std::u16string oldPinStr = Str8ToStr16(oldPin);
    dataMessageParcel.WriteString16(oldPinStr);
    MessageParcel reply;
    DelayedSingleton<CoreService>::GetInstance()->OnAlterPin(dataMessageParcel, reply);
}","void AlterPin(const uint8_t *data, size_t size) { if (!IsServiceInited()) { return; } MessageParcel dataMessageParcel; int32_t slotId = static_cast<int32_t>(*data % SLOT_NUM); dataMessageParcel.WriteInt32(slotId); std::string newPin(reinterpret_cast<const char *>(data), size); std::u16string <VAR> = Str8ToStr16(<VAR>); dataMessageParcel.WriteString16(<VAR>); std::string oldPin(reinterpret_cast<const char *>(data), size); std::u16string <VAR> = Str8ToStr16(<VAR>); dataMessageParcel.WriteString16(<VAR>); MessageParcel reply; DelayedSingleton<CoreService>::GetInstance()->OnAlterPin(dataMessageParcel, reply); }"
"void SetNrOptionMode(const uint8_t *data, size_t size)
{
    if (!IsServiceInited()) {
        return;
    }
    MessageParcel dataMessageParcel;
    std::unique_ptr<SetRadioStateCallback> callbackWrap = std::make_unique<SetRadioStateCallback>(nullptr);
    if (callbackWrap == nullptr) {
        return;
    }
    int32_t slotId = static_cast<int32_t>(*data % SLOT_NUM);
    int32_t nrMode = static_cast<int32_t>(*data % NR_MODE);
    dataMessageParcel.WriteInt32(slotId);
    dataMessageParcel.WriteInt32(nrMode);
    dataMessageParcel.WriteRemoteObject(callbackWrap.release()->AsObject().GetRefPtr());
    MessageParcel reply;
    DelayedSingleton<CoreService>::GetInstance()->OnSetNrOptionMode(dataMessageParcel, reply);
}","void SetNrOptionMode(const uint8_t *data, size_t size) { if (!IsServiceInited()) { return; } MessageParcel dataMessageParcel; std::unique_ptr<<TYPE>> callbackWrap = std::make_unique<<TYPE>>(nullptr); if (callbackWrap == nullptr) { return; } int32_t slotId = static_cast<int32_t>(*data % SLOT_NUM); int32_t <VAR> = static_cast<int32_t>(*data % <TYPE>); dataMessageParcel.WriteInt32(slotId); dataMessageParcel.WriteInt32(<VAR>); dataMessageParcel.WriteRemoteObject(callbackWrap.release()->AsObject().GetRefPtr()); MessageParcel reply; DelayedSingleton<CoreService>::GetInstance()->OnSetNrOptionMode(dataMessageParcel, reply); }"
int32_t authType = static_cast<int32_t>(*data % TYPE_NUM);,int32_t <VAR> = static_cast<int32_t>(*data % TYPE_NUM);
int32_t flag = static_cast<int32_t>(*data + offset);,<TYPE> flag = static_cast<<TYPE>>(*data + offset);
"void DoSomethingInterestingWithMyAPI(const uint8_t *data, size_t size)
{
    if (data == nullptr || size == 0) {
        return;
    }
    OnRemoteRequest(data, size);
    SetRadioStateResponse(data, size);
    RadioStateChanged(data, size);
    SatelliteStatusChanged(data, size);
    SimStateChanged(data, size);
    auto telRilManager = DelayedSingleton<CoreService>::GetInstance()->telRilManager_;
    if (telRilManager == nullptr || telRilManager->handler_ == nullptr) {
        return;
    }
    telRilManager->handler_->ClearFfrt(false);
    telRilManager->handler_->queue_ = nullptr;
    return;
}","void DoSomethingInterestingWithMyAPI(const uint8_t *data, size_t size) { if (data == nullptr || size == 0) { return; } OnRemoteRequest(data, size); SetRadioStateResponse(data, size); RadioStateChanged(data, size); SatelliteStatusChanged(data, size); SimStateChanged(data, size); auto telRilManager = DelayedSingleton<CoreService>::GetInstance()->telRilManager_; if (telRilManager == nullptr || telRilManager->handler_ == nullptr) { return; } telRilManager->handler_->ClearFfrt(false); telRilManager->handler_-><VAR> = nullptr; return; }"
int32_t success = static_cast<int32_t>(*data % BOOL_NUM);,int32_t <VAR> = static_cast<int32_t>(*data % BOOL_NUM);
int32_t gsmIndex = static_cast<int32_t>(*data + offset);,int32_t <VAR> = static_cast<int32_t>(*data + offset);
int32_t resultId = static_cast<int32_t>(*data + offset);,int32_t <VAR> = static_cast<int32_t>(*data + offset);
int32_t switchOn = static_cast<int32_t>(*data + offset);,int32_t <VAR> = static_cast<int32_t>(*data + offset);
int minValue = static_cast<int>(min);,int <VAR> = static_cast<int>(<VAR>);
static int32_t testDefaultPrimarySlot = SLOT_ID;,static int32_t <VAR> = SLOT_ID;
std::cin >> testDefaultPrimarySlot,std::cin >> <VAR>
"static bool TestGetSimIccId()
{
    AccessToken token;
    int32_t slotId = 0;
    std::cout << ""please input soltid:"" << std::endl;
    std::cin >> slotId;
    std::u16string result;
    g_telephonyService->GetSimIccId(slotId, result);
    std::string str = Str16ToStr8(result);
    string expect = str.empty() ? ""fail"" : ""success"";
    std::cout << ""TelephonyTestService Remote GetSimIccId result ["" << str << ""] "" << expect << std::endl;
    return true;
}","static bool TestGetSimIccId() { AccessToken token; <TYPE> <VAR> = <CONST>; std::cout << <STR> << std::endl; std::cin >> <VAR>; std::u16string <VAR>; g_telephonyService->GetSimIccId(<VAR>, <VAR>); std::string str = Str16ToStr8(<VAR>); string expect = str.empty() ? ""fail"" : ""success""; std::cout << <STR> << str << ""] "" << expect << std::endl; return true; }"
std::cin >> slotId,std::cin >> <VAR>
"static bool TestGetSlotId()
{
    AccessToken token;
    int32_t simId = 0;
    std::cout << ""please input simId:"" << std::endl;
    std::cin >> simId;
    int32_t result = -1;
    result = g_telephonyService->GetSlotId(simId);
    string expect = (result == -1) ? ""fail"" : ""success"";
    std::cout << ""TelephonyTestService Remote GetSlotId result ["" << result << ""] "" << expect << std::endl;
    return true;
}","static bool TestGetSlotId() { AccessToken token; int32_t <VAR> = 0; std::cout << <STR> << std::endl; std::cin >> <VAR>; int32_t result = -1; result = g_telephonyService->GetSlotId(<VAR>); string expect = (result == -1) ? ""fail"" : ""success""; std::cout << <STR> << result << ""] "" << expect << std::endl; return true; }"
"static bool TestGetIMSI()
{
    AccessToken token;
    static int32_t testSlot = SLOT_ID;
    std::cout << ""please input Slot Id"" << std::endl;
    std::cin >> testSlot;
    std::u16string imsi;
    g_telephonyService->GetIMSI(testSlot, imsi);
    std::string str = Str16ToStr8(imsi);
    string expect = str.empty() ? ""fail"" : ""success"";
    std::cout << ""TelephonyTestService Remote GetIMSI result ["" << str << ""] "" << expect << std::endl;
    return true;
}","static bool TestGetIMSI() { AccessToken token; static int32_t testSlot = SLOT_ID; std::cout << ""please input Slot Id"" << std::endl; std::cin >> testSlot; std::u16string <VAR>; g_telephonyService->GetIMSI(testSlot, <VAR>); std::string str = Str16ToStr8(<VAR>); string expect = str.empty() ? ""fail"" : ""success""; std::cout << <STR> << str << ""] "" << expect << std::endl; return true; }"
"static bool TestSetShowNumber()
{
    AccessToken token;
    int32_t slot;
    std::cout << ""please input Slot Id"" << std::endl;
    std::cin >> slot;
    std::string showNumber;
    std::cout << ""please input showNumber"" << std::endl;
    std::cin >> showNumber;
    int32_t result = g_telephonyService->SetShowNumber(slot, Str8ToStr16(showNumber));
    string expect = (result == TELEPHONY_ERR_SUCCESS) ? ""success"" : ""fail"";
    std::cout << ""TelephonyTestService Remote SetShowNumber result ["" << result << ""] "" << expect << std::endl;
    return true;
}","static bool TestSetShowNumber() { AccessToken token; int32_t slot; std::cout << ""please input Slot Id"" << std::endl; std::cin >> slot; std::string <VAR>; std::cout << <STR> << std::endl; std::cin >> <VAR>; int32_t result = g_telephonyService->SetShowNumber(slot, Str8ToStr16(<VAR>)); string expect = (result == TELEPHONY_ERR_SUCCESS) ? ""success"" : ""fail""; std::cout << <STR> << result << ""] "" << expect << std::endl; return true; }"
"static bool TestGetShowNumber()
{
    AccessToken token;
    int32_t slot;
    std::cout << ""please input Slot Id"" << std::endl;
    std::cin >> slot;
    std::u16string result;
    g_telephonyService->GetShowNumber(slot, result);
    string expect = (!result.empty()) ? ""success"" : ""fail"";
    std::cout << ""TelephonyTestService Remote SetShowNumber result ["" << Str16ToStr8(result) << ""] "" << expect
              << std::endl;
    return true;
}","static bool TestGetShowNumber() { AccessToken token; int32_t slot; std::cout << ""please input Slot Id"" << std::endl; std::cin >> slot; std::u16string result; g_telephonyService->GetShowNumber(slot, result); string expect = (!result.empty()) ? ""success"" : ""fail""; std::cout << <STR> << Str16ToStr8(result) << ""] "" << expect << std::endl; return true; }"
"while (!Among(size, PinWordSize::PIN_MIN_SIZE, PinWordSize::PIN_MAX_SIZE)) {
        std::cout << ""\n Unlock puk start, Please input new pin \n"";
        std::cin >> newPin;
        size = newPin.size();
    }","while (!Among(size, PinWordSize::PIN_MIN_SIZE, PinWordSize::PIN_MAX_SIZE)) { std::cout << <STR>; std::cin >> <VAR>; size = <VAR>.size(); }"
"std::cout << ""\n Alter pin start, Please input old pin \n""",std::cout << <STR>
"static bool TestUnlockPuk2()
{
    AccessToken token;
    LockStatusResponse response = { UNLOCK_FAIL, TELEPHONY_ERROR };
    std::string newPin2 = "" "";
    std::string puk2 = "" "";
    int size = 0;
    static int32_t testSlot = SLOT_ID;
    std::cout << ""please input Slot Id"" << std::endl;
    std::cin >> testSlot;
    while (!Among(size, PinWordSize::PIN_MIN_SIZE, PinWordSize::PIN_MAX_SIZE)) {
        std::cout << ""\n Unlock puk2 start, Please input new pin2 \n"";
        std::cin >> newPin2;
        size = newPin2.size();
    }
    size = 0;
    while (!Among(size, PinWordSize::PIN_MIN_SIZE, PinWordSize::PIN_MAX_SIZE)) {
        std::cout << ""\n Unlock puk2 start, Please input puk2 \n"";
        std::cin >> puk2;
        size = puk2.size();
    }
    std::cout << ""Unlock puk2: newPin2 = "" << newPin2 << ""  puk2 = "" << puk2 << endl;
    g_telephonyService->UnlockPuk2(testSlot, Str8ToStr16(newPin2.c_str()), Str8ToStr16(puk2.c_str()), response);
    std::cout << ""Unlock puk complete:"" << response.result << "" "" << response.remain << std::endl;
    return true;
}","static bool TestUnlockPuk2() { AccessToken token; LockStatusResponse response = { UNLOCK_FAIL, TELEPHONY_ERROR }; std::string newPin2 = "" ""; std::string <VAR> = "" ""; int size = 0; static int32_t testSlot = SLOT_ID; std::cout << ""please input Slot Id"" << std::endl; std::cin >> testSlot; while (!Among(size, PinWordSize::PIN_MIN_SIZE, PinWordSize::PIN_MAX_SIZE)) { std::cout << <STR>; std::cin >> newPin2; size = newPin2.size(); } size = 0; while (!Among(size, PinWordSize::PIN_MIN_SIZE, PinWordSize::PIN_MAX_SIZE)) { std::cout << <STR>; std::cin >> <VAR>; size = <VAR>.size(); } std::cout << <STR> << newPin2 << <STR> << <VAR> << endl; g_telephonyService->UnlockPuk2(testSlot, Str8ToStr16(newPin2.c_str()), Str8ToStr16(<VAR>.c_str()), response); std::cout << <STR> << response.result << "" "" << response.remain << std::endl; return true; }"
"while (!Among(size, PinWordSize::PIN_MIN_SIZE, PinWordSize::PIN_MAX_SIZE)) {
        std::cout << ""\n Alter pin2 start, Please input old pin2 \n"";
        std::cin >> oldPin2;
        size = oldPin2.size();
    }","while (!Among(size, PinWordSize::PIN_MIN_SIZE, PinWordSize::PIN_MAX_SIZE)) { std::cout << <STR>; std::cin >> <VAR>; size = <VAR>.size(); }"
"std::cout << ""\n Alter pin2 start, Please input old pin2 \n""",std::cout << <STR>
std::cin >> enable,std::cin >> <VAR>
"static bool TestGetOpKey()
{
    AccessToken token;
    std::u16string opkey;
    static int32_t testSlot = SLOT_ID;
    std::cout << ""please input Slot Id"" << std::endl;
    std::cin >> testSlot;
    int32_t result = g_telephonyService->GetOpKey(testSlot, opkey);
    std::string str = Str16ToStr8(opkey);
    string expect = (result == TELEPHONY_ERR_SUCCESS) ? ""success"" : ""fail"";
    std::cout << ""TestGetOpKey Remote GetOpKey result ["" << str << ""] "" << expect << std::endl;
    return true;
}","static bool TestGetOpKey() { AccessToken token; std::u16string <VAR>; static int32_t testSlot = SLOT_ID; std::cout << ""please input Slot Id"" << std::endl; std::cin >> testSlot; int32_t result = g_telephonyService->GetOpKey(testSlot, <VAR>); std::string str = Str16ToStr8(<VAR>); string expect = (result == TELEPHONY_ERR_SUCCESS) ? ""success"" : ""fail""; std::cout << <STR> << str << ""] "" << expect << std::endl; return true; }"
"std::cout << ""\n select 6. Please input Corporate Personalization PIN \n""",std::cout << <STR>
"static bool TestSendTerminalResponseCmd()
{
    AccessToken token;
    int32_t slotId = DEFAULT_SIM_SLOT_ID;
    std::cout << ""please input slotId"" << endl;
    std::cin >> slotId;
    std::string cmd = """";
    std::cout << ""input terminal response command"" << std::endl;
    std::cin >> cmd;
    int32_t result = g_telephonyService->SendTerminalResponseCmd(slotId, cmd);
    std::cout << ""TelephonyTestService Remote SendTerminalResponseCmd result ["" << result << ""] "" << std::endl;
    return true;
}","static bool TestSendTerminalResponseCmd() { AccessToken token; int32_t slotId = DEFAULT_SIM_SLOT_ID; std::cout << ""please input slotId"" << endl; std::cin >> slotId; std::string cmd = """"; std::cout << <STR> << std::endl; std::cin >> cmd; int32_t result = g_telephonyService->SendTerminalResponseCmd(slotId, cmd); std::cout << <STR> << result << ""] "" << std::endl; return true; }"
"if (root->Asn1HasChild(TAG_ESIM_CTX_1)) {
        std::shared_ptr<Asn1Node> node = root->Asn1GetChild(TAG_ESIM_CTX_1);
        if (node == nullptr) {
            return defaultCarrier;
        }
        node->Asn1AsBytes(gid1Byte);
        strResult = Asn1Utils::BytesToHexStr(gid1Byte);
        gid1 = OHOS::Telephony::ToUtf16(strResult);
    }",if (root->Asn1HasChild(<TYPE>)) { std::shared_ptr<Asn1Node> node = root->Asn1GetChild(<TYPE>); if (node == nullptr) { return defaultCarrier; } node->Asn1AsBytes(<VAR>); strResult = Asn1Utils::BytesToHexStr(<VAR>); <VAR> = OHOS::Telephony::ToUtf16(strResult); }
cin >> slotId,cin >> <VAR>
"void TelRilTest::OnRequestCallGetCurrentCallsStatusTest(
    int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler)
{
    auto event = AppExecFwk::InnerEvent::Get(RadioEvent::RADIO_CURRENT_CALLS);
    if (event != nullptr && telRilManager_ != nullptr) {
        event->SetOwner(handler);
        TELEPHONY_LOGI(""TelRilTest::OnRequestCallGetCurrentCallsStatusTest -->"");
        telRilManager_->GetCallList(slotId, event);
        TELEPHONY_LOGI(""OnRequestCallGetCurrentCallsStatusTest finished"");
    }
}","void TelRilTest::OnRequestCallGetCurrentCallsStatusTest( int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler) { auto event = AppExecFwk::InnerEvent::Get(RadioEvent::<TYPE>); if (event != nullptr && telRilManager_ != nullptr) { event->SetOwner(handler); TELEPHONY_LOGI(<STR>); telRilManager_->GetCallList(slotId, event); TELEPHONY_LOGI(<STR>); } }"
std::cin >> cardType,std::cin >> <VAR>
"void TelRilTest::OnRequestOpenLGSimIOTest(int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler)
{
    std::cout << ""TelRilTest::OnRequestOpenLGSimIOTest begin:"" << std::endl;
    auto event = AppExecFwk::InnerEvent::Get(uint32_t(CustomMessageID::MSG_OPEN_LOGICAL_CHANNEL_DONE));
    if (event == nullptr) {
        std::cerr << ""event is nullptr"" << std::endl;
        return;
    }
    event->SetOwner(handler);
    if (telRilManager_ == nullptr) {
        std::cerr << ""telRilManager is nullptr"" << std::endl;
        return;
    }
    telRilManager_->SimOpenLogicalChannel(slotId, ""apdu"", 0, event);
    std::cout << ""TelRilTest::OnRequestOpenLGSimIOTest end"" << std::endl;
}","void TelRilTest::OnRequestOpenLGSimIOTest(int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler) { std::cout << <STR> << std::endl; auto event = AppExecFwk::InnerEvent::Get(uint32_t(CustomMessageID::<TYPE>)); if (event == nullptr) { std::cerr << ""event is nullptr"" << std::endl; return; } event->SetOwner(handler); if (telRilManager_ == nullptr) { std::cerr << ""telRilManager is nullptr"" << std::endl; return; } telRilManager_->SimOpenLogicalChannel(slotId, <STR>, 0, event); std::cout << <STR> << std::endl; }"
"void TelRilTest::OnRequestTransmitApduLogicalChannelTest(int32_t slotId,
    const std::shared_ptr<AppExecFwk::EventHandler> &handler)
{
    std::cout << ""TelRilTest::OnRequestTransmitApduLogicalChannelTest begin:"" << std::endl;
    auto event = AppExecFwk::InnerEvent::Get(uint32_t(CustomMessageID::MSG_TRANSMIT_LOGICAL_CHANNEL_DONE));
    if (event == nullptr) {
        std::cerr << ""event is nullptr"" << std::endl;
        return;
    }
    event->SetOwner(handler);
    if (telRilManager_ == nullptr) {
        std::cerr << ""telRilManager is nullptr"" << std::endl;
        return;
    }
    ApduSimIORequestInfo reqInfo;
    telRilManager_->SimTransmitApduLogicalChannel(slotId, reqInfo, event);
    std::cout << ""TelRilTest::OnRequestTransmitApduLogicalChannelTest end"" << std::endl;
}","void TelRilTest::OnRequestTransmitApduLogicalChannelTest(int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler) { std::cout << <STR> << std::endl; auto event = AppExecFwk::InnerEvent::Get(uint32_t(CustomMessageID::<TYPE>)); if (event == nullptr) { std::cerr << ""event is nullptr"" << std::endl; return; } event->SetOwner(handler); if (telRilManager_ == nullptr) { std::cerr << ""telRilManager is nullptr"" << std::endl; return; } ApduSimIORequestInfo reqInfo; telRilManager_->SimTransmitApduLogicalChannel(slotId, reqInfo, event); std::cout << <STR> << std::endl; }"
std::string aid;,std::string <VAR>;
std::string authData;,std::string <VAR>;
"void TelRilTest::OnRequestSimGetImsiTest(int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler)
{
    auto event = AppExecFwk::InnerEvent::Get(RadioEvent::RADIO_SIM_GET_IMSI);
    if (event != nullptr && telRilManager_ != nullptr) {
        event->SetOwner(handler);
        TELEPHONY_LOGI(""TelRilTest::OnRequestSimGetImsiTest -->"");
        telRilManager_->GetImsi(slotId, event);
        TELEPHONY_LOGI(""OnRequestSimGetImsiTest finished"");
    }
}","void TelRilTest::OnRequestSimGetImsiTest(int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler) { auto event = AppExecFwk::InnerEvent::Get(RadioEvent::<TYPE>); if (event != nullptr && telRilManager_ != nullptr) { event->SetOwner(handler); TELEPHONY_LOGI(<STR>); telRilManager_->GetImsi(slotId, event); TELEPHONY_LOGI(<STR>); } }"
"std::cout << ""please enter the oldPassword:""",std::cout << <STR>
"std::cout << ""please enter the SIM PIN:""",std::cout << <STR>
"std::cout << ""please enter the Radio Protocol sessionId:""",std::cout << <STR>
"void TelRilTest::OnRequestRefusedCallTest(int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler)
{
    auto event = AppExecFwk::InnerEvent::Get(RadioEvent::RADIO_REJECT_CALL);
    if (event != nullptr && telRilManager_ != nullptr) {
        event->SetOwner(handler);
        TELEPHONY_LOGI(""TelRilTest::OnRequestRefusedCallTest -->"");
        telRilManager_->Reject(slotId, event);
        TELEPHONY_LOGI(""OnRequestRefusedCallTest finished"");
    }
}","void TelRilTest::OnRequestRefusedCallTest(int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler) { auto event = AppExecFwk::InnerEvent::Get(RadioEvent::<TYPE>); if (event != nullptr && telRilManager_ != nullptr) { event->SetOwner(handler); TELEPHONY_LOGI(<STR>); telRilManager_->Reject(slotId, event); TELEPHONY_LOGI(<STR>); } }"
int32_t eventId = static_cast<int32_t>(DiffInterfaceId::TEST_RILCM_SET_INIT_APN_INFO_TEST);,int32_t eventId = static_cast<int32_t>(DiffInterfaceId::<TYPE>);
"void TelRilTest::OnRequestGetDataCallListTest(int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler)
{
    int32_t eventId = static_cast<int32_t>(DiffInterfaceId::TEST_RILCM_GET_DATA_CALL_LIST_TEST);
    auto event = AppExecFwk::InnerEvent::Get(eventId);
    if (event != nullptr && telRilManager_ != nullptr) {
        event->SetOwner(handler);
        TELEPHONY_LOGI(""TelRilTest::OnRequestGetDataCallListTest -->"");
        telRilManager_->GetPdpContextList(slotId, event);
        TELEPHONY_LOGI(""OnRequestGetDataCallListTest finished"");
    }
}","void TelRilTest::OnRequestGetDataCallListTest(int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler) { int32_t eventId = static_cast<int32_t>(DiffInterfaceId::<TYPE>); auto event = AppExecFwk::InnerEvent::Get(eventId); if (event != nullptr && telRilManager_ != nullptr) { event->SetOwner(handler); TELEPHONY_LOGI(<STR>); telRilManager_->GetPdpContextList(slotId, event); TELEPHONY_LOGI(<STR>); } }"
"void TelRilTest::OnRequestGetLinkCapabilityTest(
    int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler)
{
    int32_t eventId = static_cast<int32_t>(DiffInterfaceId::TEST_RILCM_GET_LINK_CAPABILITY);
    auto event = AppExecFwk::InnerEvent::Get(eventId);
    if (event != nullptr && telRilManager_ != nullptr) {
        event->SetOwner(handler);
        TELEPHONY_LOGI(""TelRilTest::OnRequestGetLinkCapabilityTest -->"");
        telRilManager_->GetLinkCapability(slotId, event);
        TELEPHONY_LOGI(""OnRequestGetLinkCapabilityTest finished"");
    }
}","void TelRilTest::OnRequestGetLinkCapabilityTest( int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler) { int32_t eventId = static_cast<int32_t>(DiffInterfaceId::<TYPE>); auto event = AppExecFwk::InnerEvent::Get(eventId); if (event != nullptr && telRilManager_ != nullptr) { event->SetOwner(handler); TELEPHONY_LOGI(<STR>); telRilManager_->GetLinkCapability(slotId, event); TELEPHONY_LOGI(<STR>); } }"
"void TelRilTest::OnRequestCleanAllConnectionsTest(
    int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler)
{
    int32_t eventId = static_cast<int32_t>(DiffInterfaceId::TEST_RILCM_CLEAN_ALL_DATA_CONNECTIONS_TEST);
    auto event = AppExecFwk::InnerEvent::Get(eventId);
    if (event != nullptr && telRilManager_ != nullptr) {
        event->SetOwner(handler);
        TELEPHONY_LOGI(""TelRilTest::OnRequestCleanAllConnectionsTest -->"");
        telRilManager_->CleanAllConnections(slotId, event);
        TELEPHONY_LOGI(""OnRequestCleanAllConnectionsTest finished"");
    }
}","void TelRilTest::OnRequestCleanAllConnectionsTest( int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler) { int32_t eventId = static_cast<int32_t>(DiffInterfaceId::<TYPE>); auto event = AppExecFwk::InnerEvent::Get(eventId); if (event != nullptr && telRilManager_ != nullptr) { event->SetOwner(handler); TELEPHONY_LOGI(<STR>); telRilManager_->CleanAllConnections(slotId, event); TELEPHONY_LOGI(<STR>); } }"
"for (uint32_t i = 0; i < sizeof(MAX_UPLINK_LINK_BANDWIDTH) / sizeof(int32_t); i++) {
            rule.maximumUplinkKbps.push_back(MAX_UPLINK_LINK_BANDWIDTH[i]);
        }",for (uint32_t i = 0; i < sizeof(<TYPE>) / sizeof(int32_t); i++) { rule.<VAR>.push_back(<TYPE>[i]); }
i < sizeof(MAX_UPLINK_LINK_BANDWIDTH) / sizeof(int32_t),i < sizeof(<TYPE>) / sizeof(int32_t)
"void TelRilTest::OnRequestSendUrspDecodeResult(int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler)
{
    int32_t eventId = static_cast<int32_t>(DiffInterfaceId::TEST_RILCM_SEND_URSP_DECODE_RESULT);
    auto event = AppExecFwk::InnerEvent::Get(eventId);
    if (event != nullptr && telRilManager_ != nullptr) {
        event->SetOwner(handler);
        TELEPHONY_LOGI(""TelRilTest::OnRequestSendUrspDecodeResult -->"");
        std::vector<uint8_t> buffer = {0};
        telRilManager_->SendUrspDecodeResult(slotId, buffer, event);
        TELEPHONY_LOGI(""OnRequestSendUrspDecodeResult finished"");
    }
}","void TelRilTest::OnRequestSendUrspDecodeResult(int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler) { int32_t eventId = static_cast<int32_t>(DiffInterfaceId::<TYPE>); auto event = AppExecFwk::InnerEvent::Get(eventId); if (event != nullptr && telRilManager_ != nullptr) { event->SetOwner(handler); TELEPHONY_LOGI(<STR>); std::vector<uint8_t> buffer = {0}; telRilManager_->SendUrspDecodeResult(slotId, buffer, event); TELEPHONY_LOGI(<STR>); } }"
int32_t eventId = static_cast<int32_t>(DiffInterfaceId::TEST_RILCM_SEND_URSP_DECODE_RESULT);,int32_t eventId = static_cast<int32_t>(DiffInterfaceId::<TYPE>);
"void TelRilTest::OnRequestGetNetworkSliceAllowedNssai(int32_t slotId,
    const std::shared_ptr<AppExecFwk::EventHandler> &handler)
{
    int32_t eventId = static_cast<int32_t>(DiffInterfaceId::TEST_RILCM_GET_NETWORKSLICE_ALLOWEDNSSAI);
    auto event = AppExecFwk::InnerEvent::Get(eventId);
    if (event != nullptr && telRilManager_ != nullptr) {
        event->SetOwner(handler);
        TELEPHONY_LOGI(""TelRilTest::OnRequestGetNetworkSliceAllowedNssai -->"");
        std::vector<uint8_t> buffer = {0};
        telRilManager_->GetNetworkSliceAllowedNssai(slotId, buffer, event);
        TELEPHONY_LOGI(""OnRequestGetNetworkSliceAllowedNssai finished"");
    }
}","void TelRilTest::OnRequestGetNetworkSliceAllowedNssai(int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler) { int32_t eventId = static_cast<int32_t>(DiffInterfaceId::<TYPE>); auto event = AppExecFwk::InnerEvent::Get(eventId); if (event != nullptr && telRilManager_ != nullptr) { event->SetOwner(handler); TELEPHONY_LOGI(<STR>); std::vector<uint8_t> buffer = {0}; telRilManager_->GetNetworkSliceAllowedNssai(slotId, buffer, event); TELEPHONY_LOGI(<STR>); } }"
"void TelRilTest::OnRequestGetNetworkSearchInformationTest(
    int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler)
{
    auto event = AppExecFwk::InnerEvent::Get(TYPESBITMAP);
    if (event != nullptr && telRilManager_ != nullptr) {
        event->SetOwner(handler);
        TELEPHONY_LOGI(""TelRilTest::OnRequestGetNetworkSearchInformationTest -->"");
        telRilManager_->GetNetworkSearchInformation(slotId, event);
        TELEPHONY_LOGI(""TelRilTest::OnRequestGetNetworkSearchInformationTest -->finished"");
    }
}","void TelRilTest::OnRequestGetNetworkSearchInformationTest( int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler) { auto event = AppExecFwk::InnerEvent::Get(TYPESBITMAP); if (event != nullptr && telRilManager_ != nullptr) { event->SetOwner(handler); TELEPHONY_LOGI(<STR>); telRilManager_->GetNetworkSearchInformation(slotId, event); TELEPHONY_LOGI(<STR>); } }"
"void TelRilTest::OnRequestSetPreferredNetworkTest(
    int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler)
{
    auto event = AppExecFwk::InnerEvent::Get(TYPESBITMAP);
    if (event != nullptr && telRilManager_ != nullptr) {
        event->SetOwner(handler);
        int32_t netType = 0;
        std::cout << ""Please input netType: "" << endl;
        std::cin >> netType;
        TELEPHONY_LOGI(""TelRilTest::OnRequestSetPreferredNetworkTest -->"");
        telRilManager_->SetPreferredNetwork(slotId, netType, event);
        TELEPHONY_LOGI(""OnRequestSetPreferredNetworkTest finished"");
    }
}","void TelRilTest::OnRequestSetPreferredNetworkTest( int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler) { auto event = AppExecFwk::InnerEvent::Get(TYPESBITMAP); if (event != nullptr && telRilManager_ != nullptr) { event->SetOwner(handler); int32_t <VAR> = 0; std::cout << <STR> << endl; std::cin >> <VAR>; TELEPHONY_LOGI(<STR>); telRilManager_->SetPreferredNetwork(slotId, <VAR>, event); TELEPHONY_LOGI(<STR>); } }"
int32_t eventId = static_cast<int32_t>(DiffInterfaceId::TEST_GET_BASEBAND_VERSION);,int32_t eventId = static_cast<int32_t>(DiffInterfaceId::<TYPE>);
std::cin >> callType,std::cin >> <VAR>
"std::cout << ""please select call forward reason type: """,std::cout << <STR>
"void TelRilTest::OnRequestSetClipTest(int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler)
{
    auto event = AppExecFwk::InnerEvent::Get(RadioEvent::RADIO_SET_CALL_CLIP);
    if (event != nullptr && telRilManager_ != nullptr) {
        int32_t action;
        event->SetOwner(handler);
        TELEPHONY_LOGI(""TelRilTest::OnRequestSetClipTest -->"");
        std::cout << ""please input call set clip action: "";
        std::cin >> action;
        telRilManager_->SetClip(slotId, action, event);
        TELEPHONY_LOGI(""OnRequestSetClipTest finished"");
    }
}","void TelRilTest::OnRequestSetClipTest(int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler) { auto event = AppExecFwk::InnerEvent::Get(RadioEvent::<TYPE>); if (event != nullptr && telRilManager_ != nullptr) { int32_t action; event->SetOwner(handler); TELEPHONY_LOGI(<STR>); std::cout << <STR>; std::cin >> action; telRilManager_->SetClip(slotId, action, event); TELEPHONY_LOGI(<STR>); } }"
"if (event != nullptr && telRilManager_ != nullptr) {
        int32_t action;
        event->SetOwner(handler);
        TELEPHONY_LOGI(""TelRilTest::OnRequestSetClipTest -->"");
        std::cout << ""please input call set clip action: "";
        std::cin >> action;
        telRilManager_->SetClip(slotId, action, event);
        TELEPHONY_LOGI(""OnRequestSetClipTest finished"");
    }","if (event != nullptr && telRilManager_ != nullptr) { int32_t action; event->SetOwner(handler); TELEPHONY_LOGI(<STR>); std::cout << <STR>; std::cin >> action; telRilManager_->SetClip(slotId, action, event); TELEPHONY_LOGI(<STR>); }"
"std::cout << ""please input call set clip action: """,std::cout << <STR>
"void TelRilTest::OnRequestSendDtmfTest(int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler)
{
    auto event = AppExecFwk::InnerEvent::Get(RadioEvent::RADIO_SEND_DTMF);
    if (event != nullptr && telRilManager_ != nullptr) {
        event->SetOwner(handler);
        TELEPHONY_LOGI(""OnRequestSendDtmfTest finished"");
    }
}","void TelRilTest::OnRequestSendDtmfTest(int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler) { auto event = AppExecFwk::InnerEvent::Get(RadioEvent::<TYPE>); if (event != nullptr && telRilManager_ != nullptr) { event->SetOwner(handler); TELEPHONY_LOGI(<STR>); } }"
"void TelRilTest::OnRequestGetCallPreferenceModeTest(
    int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler)
{
    auto event = AppExecFwk::InnerEvent::Get(RadioEvent::RADIO_GET_CALL_PREFERENCE_MODE);
    if (event != nullptr && telRilManager_ != nullptr) {
        event->SetOwner(handler);
        TELEPHONY_LOGI(""TelRilTest::OnRequestGetCallPreferenceModeTest -->"");
        telRilManager_->GetCallPreferenceMode(slotId, event);
        TELEPHONY_LOGI(""OnRequestGetCallPreferenceModeTest finished"");
    }
}","void TelRilTest::OnRequestGetCallPreferenceModeTest( int32_t slotId, const std::shared_ptr<AppExecFwk::EventHandler> &handler) { auto event = AppExecFwk::InnerEvent::Get(RadioEvent::<TYPE>); if (event != nullptr && telRilManager_ != nullptr) { event->SetOwner(handler); TELEPHONY_LOGI(<STR>); telRilManager_->GetCallPreferenceMode(slotId, event); TELEPHONY_LOGI(<STR>); } }"
"void TestGetNetworkSearchInformation()
{
    AccessToken token;
    if (g_telephonyService != nullptr) {
        OHOS::sptr<NetworkSearchTestCallbackStub> callback(new NetworkSearchTestCallbackStub());
        int32_t result = g_telephonyService->GetNetworkSearchInformation(InputSlotId(), callback);
        TELEPHONY_LOGI(""TelephonyTestService::TestGetNetworkSearchInformation result:%{public}d"", result);
    }
}","void TestGetNetworkSearchInformation() { AccessToken token; if (g_telephonyService != nullptr) { OHOS::sptr<NetworkSearchTestCallbackStub> callback(new NetworkSearchTestCallbackStub()); int32_t result = g_telephonyService->GetNetworkSearchInformation(InputSlotId(), callback); TELEPHONY_LOGI(<STR>, result); } }"
"void TestGetImei()
{
    AccessToken token;
    if (g_telephonyService == nullptr) {
        std::cout << ""TestGetImei g_telephonyService is nullptr."" << std::endl;
        return;
    }
    std::u16string imei = u"""";
    int32_t result = g_telephonyService->GetMeid(InputSlotId(), imei);
    if (result != TELEPHONY_ERR_SUCCESS) {
        std::cout << ""error:"" << result << std::endl;
    }
    std::string str = Str16ToStr8(imei);
    std::cout << ""imei:"" << str << std::endl;
}","void TestGetImei() { AccessToken token; if (g_telephonyService == nullptr) { std::cout << <STR> << std::endl; return; } std::u16string <VAR> = u""""; int32_t result = g_telephonyService->GetMeid(InputSlotId(), <VAR>); if (result != TELEPHONY_ERR_SUCCESS) { std::cout << ""error:"" << result << std::endl; } std::string str = Str16ToStr8(<VAR>); std::cout << <STR> << str << std::endl; }"
"template<typename T, napi_async_execute_callback exec, napi_async_complete_callback complete>
napi_value NapiCreateAsyncWork(napi_env env, napi_callback_info info, std::string_view funcName)
{
    size_t argc = 2;
    napi_value argv[] {nullptr, nullptr};
    NAPI_CALL(env, napi_get_cb_info(env, info, &argc, argv, nullptr, nullptr));
    std::unique_ptr<AsyncContext<T>> asyncContext = std::make_unique<AsyncContext<T>>();
    BaseContext &context = asyncContext->context;
    auto inParaTp = std::make_tuple(&asyncContext->slotId, &context.callbackRef);
    std::optional<NapiError> errCode = MatchParameters(env, argv, argc, inParaTp);
    if (errCode.has_value()) {
        JsError error = NapiUtil::ConverErrorMessageForJs(errCode.value());
        NapiUtil::ThrowError(env, error.errorCode, error.errorMessage);
        return nullptr;
    }
    napi_value result = nullptr;
    if (context.callbackRef == nullptr) {
        NAPI_CALL(env, napi_create_promise(env, &context.deferred, &result));
    } else {
        NAPI_CALL(env, napi_get_undefined(env, &result));
    }
    napi_value resourceName = nullptr;
    NAPI_CALL(env, napi_create_string_utf8(env, funcName.data(), funcName.length(), &resourceName));
    AsyncContext<T> *pContext = asyncContext.release();
    NAPI_CALL(env,
        napi_create_async_work(
            env, nullptr, resourceName, exec, complete, static_cast<void *>(pContext), &context.work));
    if (napi_queue_async_work_with_qos(env, context.work, napi_qos_default) != napi_ok) {
        delete pContext;
        result = nullptr;
    }
    return result;
}","template<typename T, napi_async_execute_callback exec, napi_async_complete_callback complete> napi_value NapiCreateAsyncWork(napi_env env, napi_callback_info info, std::string_view funcName) { size_t argc = <CONST>; napi_value argv[] {nullptr, nullptr}; NAPI_CALL(env, napi_get_cb_info(env, info, &argc, argv, nullptr, nullptr)); std::unique_ptr<AsyncContext<T>> asyncContext = std::make_unique<AsyncContext<T>>(); BaseContext &context = asyncContext->context; auto inParaTp = std::make_tuple(&asyncContext->slotId, &context.callbackRef); std::optional<NapiError> errCode = MatchParameters(env, argv, argc, inParaTp); if (errCode.has_value()) { JsError error = NapiUtil::ConverErrorMessageForJs(errCode.value()); NapiUtil::ThrowError(env, error.errorCode, error.errorMessage); return nullptr; } napi_value result = nullptr; if (context.callbackRef == nullptr) { NAPI_CALL(env, napi_create_promise(env, &context.deferred, &result)); } else { NAPI_CALL(env, napi_get_undefined(env, &result)); } napi_value resourceName = nullptr; NAPI_CALL(env, napi_create_string_utf8(env, funcName.data(), funcName.length(), &resourceName)); AsyncContext<T> *pContext = asyncContext.release(); NAPI_CALL(env, napi_create_async_work( env, nullptr, resourceName, exec, complete, static_cast<void *>(pContext), &context.work)); if (napi_queue_async_work_with_qos(env, context.work, napi_qos_default) != napi_ok) { delete pContext; result = nullptr; } return result; }"
"napi_value IsSimActiveSync(napi_env env, napi_callback_info info)
{
    size_t parameterCount = 1;
    napi_value parameters[] = { nullptr };
    napi_get_cb_info(env, info, &parameterCount, parameters, nullptr, nullptr);
    bool isSimActive = false;
    napi_value value = nullptr;
    if (parameterCount != 1) {
        TELEPHONY_LOGE(""parameter count is incorrect"");
        NAPI_CALL(env, napi_create_int32(env, isSimActive, &value));
        return value;
    }
    int32_t slotId = -1;
    if (napi_get_value_int32(env, parameters[0], &slotId) != napi_ok) {
        TELEPHONY_LOGE(""convert parameter fail"");
        NAPI_CALL(env, napi_create_int32(env, isSimActive, &value));
        return value;
    }
    if (IsValidSlotId(slotId)) {
        isSimActive = DelayedRefSingleton<CoreServiceClient>::GetInstance().IsSimActive(slotId);
    }
    NAPI_CALL(env, napi_get_boolean(env, isSimActive, &value));
    return value;
}","napi_value IsSimActiveSync(napi_env env, napi_callback_info info) { size_t parameterCount = 1; napi_value parameters[] = { nullptr }; napi_get_cb_info(env, info, &parameterCount, parameters, nullptr, nullptr); bool <VAR> = false; napi_value value = nullptr; if (parameterCount != 1) { TELEPHONY_LOGE(""parameter count is incorrect""); NAPI_CALL(env, napi_create_int32(env, <VAR>, &value)); return value; } int32_t slotId = -1; if (napi_get_value_int32(env, parameters[0], &slotId) != napi_ok) { TELEPHONY_LOGE(""convert parameter fail""); NAPI_CALL(env, napi_create_int32(env, <VAR>, &value)); return value; } if (IsValidSlotId(slotId)) { <VAR> = DelayedRefSingleton<CoreServiceClient>::GetInstance().IsSimActive(slotId); } NAPI_CALL(env, napi_get_boolean(env, <VAR>, &value)); return value; }"
"if (parameterCount != 1) {
        TELEPHONY_LOGE(""parameter count is incorrect"");
        NAPI_CALL(env, napi_create_int32(env, isSimActive, &value));
        return value;
    }","if (parameterCount != 1) { TELEPHONY_LOGE(""parameter count is incorrect""); NAPI_CALL(env, napi_create_int32(env, <VAR>, &value)); return value; }"
"void NativeActivateSim(napi_env env, void *data)
{
    if (data == nullptr) {
        return;
    }
    AsyncContext<bool> *simContext = static_cast<AsyncContext<bool> *>(data);
    if (!IsValidSlotId(simContext->slotId)) {
        TELEPHONY_LOGE(""NativeActivateSim slotId is invalid"");
        simContext->context.errorCode = ERROR_SLOT_ID_INVALID;
        return;
    }
    constexpr int32_t active = 1;
    int32_t errorCode = DelayedRefSingleton<CoreServiceClient>::GetInstance().SetActiveSim(simContext->slotId, active);
    TELEPHONY_LOGI(""NAPI NativeActivateSim %{public}d"", errorCode);
    simContext->context.errorCode = errorCode;
    simContext->context.resolved = (errorCode == ERROR_NONE);
}","void NativeActivateSim(napi_env env, void *data) { if (data == nullptr) { return; } AsyncContext<bool> *simContext = static_cast<AsyncContext<bool> *>(data); if (!IsValidSlotId(simContext->slotId)) { TELEPHONY_LOGE(<STR>); simContext->context.errorCode = ERROR_SLOT_ID_INVALID; return; } constexpr int32_t <VAR> = <CONST>; int32_t errorCode = DelayedRefSingleton<CoreServiceClient>::GetInstance().SetActiveSim(simContext->slotId, <VAR>); TELEPHONY_LOGI(<STR>, errorCode); simContext->context.errorCode = errorCode; simContext->context.resolved = (errorCode == ERROR_NONE); }"
"napi_value GetDefaultVoiceSlotId(napi_env env, napi_callback_info info)
{
    auto asyncContext = new AsyncDefaultSlotId();
    BaseContext &context = asyncContext->asyncContext.context;
    auto initPara = std::make_tuple(&context.callbackRef);
    AsyncPara para {
        .funcName = ""GetDefaultVoiceSlotId"",
        .env = env,
        .info = info,
        .execute = NativeGetDefaultVoiceSlotId,
        .complete = GetDefaultVoiceSlotIdCallback,
    };
    napi_value result = NapiCreateAsyncWork2<AsyncDefaultSlotId>(para, asyncContext, initPara);
    if (result) {
        NAPI_CALL(env, napi_queue_async_work_with_qos(env, context.work, napi_qos_user_initiated));
    }
    return result;
}","napi_value GetDefaultVoiceSlotId(napi_env env, napi_callback_info info) { auto asyncContext = new AsyncDefaultSlotId(); BaseContext &context = asyncContext->asyncContext.context; auto initPara = std::make_tuple(&context.callbackRef); AsyncPara para { .funcName = <STR>, .env = env, .info = info, .execute = <TYPE>, .complete = <TYPE>, }; napi_value result = <TYPE><<TYPE>>(para, asyncContext, initPara); if (result) { NAPI_CALL(env, napi_queue_async_work_with_qos(env, context.work, <VAR>)); } return result; }"
"void NativeGetIsoForSim(napi_env env, void *data)
{
    if (data == nullptr) {
        return;
    }
    AsyncContext<std::string> *asyncContext = static_cast<AsyncContext<std::string> *>(data);
    if (!IsValidSlotId(asyncContext->slotId)) {
        TELEPHONY_LOGE(""NativeGetIsoForSim slotId is invalid"");
        asyncContext->context.errorCode = ERROR_SLOT_ID_INVALID;
        return;
    }
    std::u16string countryCode;
    int32_t errorCode = DelayedRefSingleton<CoreServiceClient>::GetInstance().GetISOCountryCodeForSim(
        asyncContext->slotId, countryCode);
    if (errorCode == ERROR_NONE) {
        asyncContext->callbackVal = NapiUtil::ToUtf8(countryCode);
        asyncContext->context.resolved = true;
    } else {
        asyncContext->context.resolved = false;
    }
    TELEPHONY_LOGI(""NAPI NativeGetIsoForSim %{public}d"", errorCode);
    asyncContext->context.errorCode = errorCode;
}","void NativeGetIsoForSim(napi_env env, void *data) { if (data == nullptr) { return; } AsyncContext<std::string> *asyncContext = static_cast<AsyncContext<std::string> *>(data); if (!IsValidSlotId(asyncContext->slotId)) { TELEPHONY_LOGE(<STR>); asyncContext->context.errorCode = ERROR_SLOT_ID_INVALID; return; } std::u16string <VAR>; int32_t errorCode = DelayedRefSingleton<CoreServiceClient>::GetInstance().GetISOCountryCodeForSim( asyncContext->slotId, <VAR>); if (errorCode == ERROR_NONE) { asyncContext->callbackVal = NapiUtil::ToUtf8(<VAR>); asyncContext->context.resolved = true; } else { asyncContext->context.resolved = false; } TELEPHONY_LOGI(<STR>, <VAR>); asyncContext->context.errorCode = errorCode; }"
"napi_value GetISOCountryCodeForSimSync(napi_env env, napi_callback_info info)
{
    size_t parameterCount = 1;
    napi_value parameters[] = { nullptr };
    napi_get_cb_info(env, info, &parameterCount, parameters, nullptr, nullptr);
    std::u16string countryCode;
    napi_value value = nullptr;
    if (parameterCount != 1) {
        TELEPHONY_LOGE(""parameter count is incorrect"");
        std::string code = NapiUtil::ToUtf8(countryCode);
        NAPI_CALL(env, napi_create_string_utf8(env, code.c_str(), code.length(), &value));
        return value;
    }
    int32_t slotId = -1;
    if (napi_get_value_int32(env, parameters[0], &slotId) != napi_ok) {
        TELEPHONY_LOGE(""convert parameter fail"");
        std::string code = NapiUtil::ToUtf8(countryCode);
        NAPI_CALL(env, napi_create_string_utf8(env, code.c_str(), code.length(), &value));
        return value;
    }
    if (IsValidSlotId(slotId)) {
        DelayedRefSingleton<CoreServiceClient>::GetInstance().GetISOCountryCodeForSim(slotId, countryCode);
    }
    std::string code = NapiUtil::ToUtf8(countryCode);
    NAPI_CALL(env, napi_create_string_utf8(env, code.c_str(), code.length(), &value));
    return value;
}","napi_value GetISOCountryCodeForSimSync(napi_env env, napi_callback_info info) { size_t parameterCount = 1; napi_value parameters[] = { nullptr }; napi_get_cb_info(env, info, &parameterCount, parameters, nullptr, nullptr); std::u16string <VAR>; napi_value value = nullptr; if (parameterCount != 1) { TELEPHONY_LOGE(""parameter count is incorrect""); std::string <VAR> = NapiUtil::ToUtf8(<VAR>); NAPI_CALL(env, napi_create_string_utf8(env, <VAR>.c_str(), <VAR>.length(), &value)); return value; } int32_t slotId = -1; if (napi_get_value_int32(env, parameters[0], &slotId) != napi_ok) { TELEPHONY_LOGE(""convert parameter fail""); std::string <VAR> = NapiUtil::ToUtf8(<VAR>); NAPI_CALL(env, napi_create_string_utf8(env, <VAR>.c_str(), <VAR>.length(), &value)); return value; } if (IsValidSlotId(slotId)) { DelayedRefSingleton<CoreServiceClient>::GetInstance().GetISOCountryCodeForSim(slotId, <VAR>); } std::string <VAR> = NapiUtil::ToUtf8(<VAR>); NAPI_CALL(env, napi_create_string_utf8(env, <VAR>.c_str(), <VAR>.length(), &value)); return value; }"
"if (napi_get_value_int32(env, parameters[0], &slotId) != napi_ok) {
        TELEPHONY_LOGE(""convert parameter fail"");
        std::string code = NapiUtil::ToUtf8(countryCode);
        NAPI_CALL(env, napi_create_string_utf8(env, code.c_str(), code.length(), &value));
        return value;
    }","if (napi_get_value_int32(env, parameters[0], &slotId) != napi_ok) { TELEPHONY_LOGE(""convert parameter fail""); std::string <VAR> = NapiUtil::ToUtf8(<VAR>); NAPI_CALL(env, napi_create_string_utf8(env, <VAR>.c_str(), <VAR>.length(), &value)); return value; }"
"if (parameterCount != 1) {
        TELEPHONY_LOGE(""parameter count is incorrect"");
        std::string numeric = NapiUtil::ToUtf8(operatorNumeric);
        NAPI_CALL(env, napi_create_string_utf8(env, numeric.c_str(), numeric.length(), &value));
        return value;
    }","if (parameterCount != 1) { TELEPHONY_LOGE(""parameter count is incorrect""); std::string <VAR> = NapiUtil::ToUtf8(<VAR>); NAPI_CALL(env, napi_create_string_utf8(env, <VAR>.c_str(), <VAR>.length(), &value)); return value; }"
"void NativeGetSimState(napi_env env, void *data)
{
    if (data == nullptr) {
        return;
    }
    AsyncContext<int32_t> *asyncContext = static_cast<AsyncContext<int32_t> *>(data);
    if (!IsValidSlotId(asyncContext->slotId)) {
        TELEPHONY_LOGE(""slotId is invalid"");
        asyncContext->context.errorCode = ERROR_SLOT_ID_INVALID;
        return;
    }
    SimState simState = SimState::SIM_STATE_UNKNOWN;
    int32_t errorCode =
        DelayedRefSingleton<CoreServiceClient>::GetInstance().GetSimState(asyncContext->slotId, simState);
    TELEPHONY_LOGI(""NAPI NativeGetSimState %{public}d"", errorCode);
    if (errorCode == ERROR_NONE) {
        asyncContext->context.resolved = true;
        asyncContext->callbackVal = static_cast<int32_t>(simState);
    } else {
        asyncContext->context.resolved = false;
    }
    asyncContext->context.errorCode = errorCode;
}","void NativeGetSimState(napi_env env, void *data) { if (data == nullptr) { return; } AsyncContext<int32_t> *asyncContext = static_cast<AsyncContext<int32_t> *>(data); if (!IsValidSlotId(asyncContext->slotId)) { TELEPHONY_LOGE(<STR>); asyncContext->context.errorCode = ERROR_SLOT_ID_INVALID; return; } <TYPE> <VAR> = <TYPE>::<TYPE>; int32_t errorCode = DelayedRefSingleton<<TYPE>>::GetInstance().GetSimState(asyncContext->slotId, <VAR>); TELEPHONY_LOGI(<STR>, errorCode); if (errorCode == ERROR_NONE) { asyncContext->context.resolved = true; asyncContext->callbackVal = static_cast<int32_t>(<VAR>); } else { asyncContext->context.resolved = false; } asyncContext->context.errorCode = errorCode; }"
"napi_value GetSimStateSync(napi_env env, napi_callback_info info)
{
    size_t parameterCount = 1;
    napi_value parameters[] = { nullptr };
    napi_get_cb_info(env, info, &parameterCount, parameters, nullptr, nullptr);
    SimState simState = SimState::SIM_STATE_UNKNOWN;
    napi_value value = nullptr;
    if (parameterCount != 1) {
        TELEPHONY_LOGE(""parameter count is incorrect"");
        NAPI_CALL(env, napi_create_int32(env, static_cast<int32_t>(simState), &value));
        return value;
    }
    int32_t slotId = -1;
    if (napi_get_value_int32(env, parameters[0], &slotId) != napi_ok) {
        TELEPHONY_LOGE(""convert parameter fail"");
        NAPI_CALL(env, napi_create_int32(env, static_cast<int32_t>(simState), &value));
        return value;
    }
    if (IsValidSlotId(slotId)) {
        DelayedRefSingleton<CoreServiceClient>::GetInstance().GetSimState(slotId, simState);
    }
    NAPI_CALL(env, napi_create_int32(env, static_cast<int32_t>(simState), &value));
    return value;
}","napi_value GetSimStateSync(napi_env env, napi_callback_info info) { size_t parameterCount = 1; napi_value parameters[] = { nullptr }; napi_get_cb_info(env, info, &parameterCount, parameters, nullptr, nullptr); <TYPE> <VAR> = <TYPE>::<TYPE>; napi_value value = nullptr; if (parameterCount != 1) { TELEPHONY_LOGE(""parameter count is incorrect""); NAPI_CALL(env, napi_create_int32(env, static_cast<int32_t>(<VAR>), &value)); return value; } int32_t slotId = -1; if (napi_get_value_int32(env, parameters[0], &slotId) != napi_ok) { TELEPHONY_LOGE(""convert parameter fail""); NAPI_CALL(env, napi_create_int32(env, static_cast<int32_t>(<VAR>), &value)); return value; } if (IsValidSlotId(slotId)) { DelayedRefSingleton<CoreServiceClient>::GetInstance().GetSimState(slotId, <VAR>); } NAPI_CALL(env, napi_create_int32(env, static_cast<int32_t>(<VAR>), &value)); return value; }"
"napi_value GetSimAccountInfo(napi_env env, napi_callback_info info)
{
    auto iccAccountInfo = new AsyncIccAccountInfo();
    BaseContext &context = iccAccountInfo->asyncContext.context;
    auto initPara = std::make_tuple(&iccAccountInfo->asyncContext.slotId, &context.callbackRef);
    AsyncPara para {
        .funcName = ""GetSimAccountInfo"",
        .env = env,
        .info = info,
        .execute = NativeGetSimAccountInfo,
        .complete = GetSimAccountInfoCallback,
    };
    napi_value result = NapiCreateAsyncWork2<AsyncIccAccountInfo>(para, iccAccountInfo, initPara);
    if (result) {
        NAPI_CALL(env, napi_queue_async_work_with_qos(env, context.work, napi_qos_default));
    }
    return result;
}","napi_value GetSimAccountInfo(napi_env env, napi_callback_info info) { auto <VAR> = new AsyncIccAccountInfo(); BaseContext &context = <VAR>->asyncContext.context; auto initPara = std::make_tuple(&<VAR>->asyncContext.slotId, &context.callbackRef); AsyncPara para { .funcName = <STR>, .env = env, .info = info, .execute = <TYPE>, .complete = <TYPE>, }; napi_value result = NapiCreateAsyncWork2<<TYPE>>(para, <VAR>, initPara); if (result) { NAPI_CALL(env, napi_queue_async_work_with_qos(env, context.work, napi_qos_default)); } return result; }"
"void NativeUnlockPin(napi_env env, void *data)
{
    if (data == nullptr) {
        return;
    }
    AsyncContextPIN *pinContext = static_cast<AsyncContextPIN *>(data);
    if (!IsValidSlotId(pinContext->asyncContext.slotId)) {
        TELEPHONY_LOGE(""NativeUnlockPin slotId is invalid"");
        pinContext->asyncContext.context.errorCode = ERROR_SLOT_ID_INVALID;
        return;
    }
    LockStatusResponse response { UNLOCK_FAIL, ERROR_DEFAULT };
    int32_t errorCode = DelayedRefSingleton<CoreServiceClient>::GetInstance().UnlockPin(
        pinContext->asyncContext.slotId, NapiUtil::ToUtf16(pinContext->inStr1.data()), response);
    TELEPHONY_LOGI(""NAPI NativeUnlockPin %{public}d"", errorCode);
    if (errorCode == ERROR_NONE) {
        pinContext->result = response.result;
        pinContext->remain = response.remain;
        pinContext->asyncContext.context.resolved = true;
    } else {
        pinContext->asyncContext.context.resolved = false;
    }
    pinContext->asyncContext.context.errorCode = errorCode;
}","void NativeUnlockPin(napi_env env, void *data) { if (data == nullptr) { return; } AsyncContextPIN *<VAR> = static_cast<AsyncContextPIN *>(data); if (!IsValidSlotId(<VAR>->asyncContext.slotId)) { TELEPHONY_LOGE(<STR>); <VAR>->asyncContext.context.errorCode = ERROR_SLOT_ID_INVALID; return; } LockStatusResponse response { UNLOCK_FAIL, ERROR_DEFAULT }; int32_t errorCode = DelayedRefSingleton<CoreServiceClient>::GetInstance().UnlockPin( <VAR>->asyncContext.slotId, NapiUtil::ToUtf16(<VAR>->inStr1.data()), response); TELEPHONY_LOGI(<STR>, errorCode); if (errorCode == ERROR_NONE) { <VAR>->result = response.result; <VAR>->remain = response.remain; <VAR>->asyncContext.context.resolved = true; } else { <VAR>->asyncContext.context.resolved = <VAR>; } <VAR>->asyncContext.context.errorCode = <VAR>; }"
"napi_value UnlockPin(napi_env env, napi_callback_info info)
{
    auto pinContext = new AsyncContextPIN();
    BaseContext &context = pinContext->asyncContext.context;
    char tmpStr[ARRAY_SIZE] = {0};
    auto initPara = std::make_tuple(&pinContext->asyncContext.slotId, tmpStr, &context.callbackRef);
    AsyncPara para {
        .funcName = ""UnlockPin"",
        .env = env,
        .info = info,
        .execute = NativeUnlockPin,
        .complete = UnlockPinCallback,
    };
    napi_value result = NapiCreateAsyncWork2<AsyncContextPIN>(para, pinContext, initPara);
    if (result) {
        pinContext->inStr1 = std::string(tmpStr);
        NAPI_CALL(env, napi_queue_async_work_with_qos(env, context.work, napi_qos_default));
    }
    return result;
}","napi_value UnlockPin(napi_env env, napi_callback_info info) { auto pinContext = new AsyncContextPIN(); BaseContext &context = pinContext->asyncContext.context; char tmpStr[ARRAY_SIZE] = {0}; auto initPara = std::make_tuple(&pinContext->asyncContext.slotId, tmpStr, &context.callbackRef); AsyncPara para { .funcName = <STR>, .env = env, .info = info, .execute = <TYPE>, .complete = <TYPE>, }; napi_value result = NapiCreateAsyncWork2<<TYPE>>(para, pinContext, initPara); if (result) { pinContext->inStr1 = std::string(tmpStr); NAPI_CALL(env, napi_queue_async_work_with_qos(env, context.work, napi_qos_default)); } return result; }"
"napi_value UnlockPuk(napi_env env, napi_callback_info info)
{
    auto pukContext = new AsyncContextPIN();
    BaseContext &context = pukContext->asyncContext.context;
    char tmpStr1[ARRAY_SIZE] = {0};
    char tmpStr2[ARRAY_SIZE] = {0};
    auto initPara = std::make_tuple(&pukContext->asyncContext.slotId, tmpStr1, tmpStr2, &context.callbackRef);
    AsyncPara para {
        .funcName = ""UnlockPuk"",
        .env = env,
        .info = info,
        .execute = NativeUnlockPuk,
        .complete = UnlockPukCallback,
    };
    napi_value result = NapiCreateAsyncWork2<AsyncContextPIN>(para, pukContext, initPara);
    if (result) {
        pukContext->inStr1 = std::string(tmpStr1);
        pukContext->inStr2 = std::string(tmpStr2);
        NAPI_CALL(env, napi_queue_async_work_with_qos(env, context.work, napi_qos_default));
    }
    return result;
}","napi_value UnlockPuk(napi_env env, napi_callback_info info) { auto <VAR> = new AsyncContextPIN(); BaseContext &context = <VAR>->asyncContext.context; char tmpStr1[ARRAY_SIZE] = {0}; char tmpStr2[ARRAY_SIZE] = {0}; auto initPara = std::make_tuple(&<VAR>->asyncContext.slotId, tmpStr1, tmpStr2, &context.callbackRef); AsyncPara para { .funcName = <STR>, .env = env, .info = info, .execute = <TYPE>, .complete = <TYPE>, }; napi_value result = NapiCreateAsyncWork2<AsyncContextPIN>(para, <VAR>, initPara); if (result) { <VAR>->inStr1 = std::string(tmpStr1); <VAR>->inStr2 = std::string(tmpStr2); NAPI_CALL(env, napi_queue_async_work_with_qos(env, context.work, napi_qos_default)); } return result; }"
"napi_value SetLockState(napi_env env, napi_callback_info info)
{
    auto asyncContextPIN = new AsyncContextPIN;
    BaseContext &context = asyncContextPIN->asyncContext.context;
    napi_value object = NapiUtil::CreateUndefined(env);
    auto initPara = std::make_tuple(&asyncContextPIN->asyncContext.slotId, &object, &context.callbackRef);
    AsyncPara para {
        .funcName = ""SetLockState"",
        .env = env,
        .info = info,
        .execute = NativeSetLockState,
        .complete = SetLockStateCallback,
    };
    napi_value result = NapiCreateAsyncWork2<AsyncContextPIN>(para, asyncContextPIN, initPara);
    if (result) {
        PinInfoParaAnalyze(env, object, *asyncContextPIN);
        NAPI_CALL(env, napi_queue_async_work_with_qos(env, context.work, napi_qos_default));
    }
    return result;
}","napi_value SetLockState(napi_env env, napi_callback_info info) { auto asyncContextPIN = new AsyncContextPIN; BaseContext &context = asyncContextPIN->asyncContext.context; napi_value object = NapiUtil::CreateUndefined(env); auto initPara = std::make_tuple(&asyncContextPIN->asyncContext.slotId, &object, &context.callbackRef); AsyncPara para { .funcName = <STR>, .env = env, .info = info, .execute = <TYPE>, .complete = <TYPE>, }; napi_value result = NapiCreateAsyncWork2<AsyncContextPIN>(para, asyncContextPIN, initPara); if (result) { PinInfoParaAnalyze(env, object, *asyncContextPIN); NAPI_CALL(env, napi_queue_async_work_with_qos(env, context.work, napi_qos_default)); } return result; }"
"void NativeSetShowNumber(napi_env env, void *data)
{
    if (data == nullptr) {
        return;
    }
    AsyncContext2 *context = static_cast<AsyncContext2 *>(data);
    if (!IsValidSlotId(context->asyncContext.slotId)) {
        TELEPHONY_LOGE(""NativeSetShowNumber slotId is invalid"");
        context->asyncContext.context.errorCode = ERROR_SLOT_ID_INVALID;
        return;
    }
    int32_t errorCode = DelayedRefSingleton<CoreServiceClient>::GetInstance().SetShowNumber(
        context->asyncContext.slotId, NapiUtil::ToUtf16(std::data(context->inputStr)));
    TELEPHONY_LOGI(""NAPI NativeSetShowNumber %{public}d"", errorCode);
    context->asyncContext.context.errorCode = errorCode;
    context->asyncContext.context.resolved = (errorCode == ERROR_NONE);
}","void NativeSetShowNumber(napi_env env, void *data) { if (data == nullptr) { return; } AsyncContext2 *context = static_cast<AsyncContext2 *>(data); if (!IsValidSlotId(context->asyncContext.slotId)) { TELEPHONY_LOGE(<STR>); context->asyncContext.context.errorCode = ERROR_SLOT_ID_INVALID; return; } int32_t errorCode = DelayedRefSingleton<CoreServiceClient>::GetInstance().SetShowNumber( context->asyncContext.slotId, <TYPE>::ToUtf16(std::data(context->inputStr))); TELEPHONY_LOGI(<STR>, errorCode); context->asyncContext.context.errorCode = errorCode; context->asyncContext.context.resolved = (errorCode == ERROR_NONE); }"
"napi_value SetShowNumber(napi_env env, napi_callback_info info)
{
    auto asyncContext = new AsyncContext2();
    BaseContext &context = asyncContext->asyncContext.context;
    auto initPara =
        std::make_tuple(&asyncContext->asyncContext.slotId, std::data(asyncContext->inputStr), &context.callbackRef);
    AsyncPara para {
        .funcName = ""SetShowNumber"",
        .env = env,
        .info = info,
        .execute = NativeSetShowNumber,
        .complete = SetShowNumberCallback,
    };
    napi_value result = NapiCreateAsyncWork2<AsyncContext2>(para, asyncContext, initPara);
    if (result) {
        NAPI_CALL(env, napi_queue_async_work_with_qos(env, context.work, napi_qos_default));
    }
    return result;
}","napi_value SetShowNumber(napi_env env, napi_callback_info info) { auto asyncContext = new AsyncContext2(); BaseContext &context = asyncContext->asyncContext.context; auto initPara = std::make_tuple(&asyncContext->asyncContext.slotId, std::data(asyncContext->inputStr), &context.callbackRef); AsyncPara para { .funcName = <STR>, .env = env, .info = info, .execute = <TYPE>, .complete = <TYPE>, }; napi_value result = NapiCreateAsyncWork2<AsyncContext2>(para, asyncContext, initPara); if (result) { NAPI_CALL(env, napi_queue_async_work_with_qos(env, context.work, napi_qos_default)); } return result; }"
"void NativeAddIccDiallingNumbers(napi_env env, void *data)
{
    if (data == nullptr) {
        return;
    }
    AsyncDiallingNumbers<int32_t> *diallingNumbersContext = static_cast<AsyncDiallingNumbers<int32_t> *>(data);
    AsyncContext<int32_t> &asyncContext = diallingNumbersContext->asyncContext;
    if (!IsValidSlotId(asyncContext.slotId)) {
        TELEPHONY_LOGE(""NativeAddIccDiallingNumbers slotId is invalid"");
        asyncContext.context.errorCode = ERROR_SLOT_ID_INVALID;
        return;
    }
    if (diallingNumbersContext->infoVec.size() > 0) {
        std::shared_ptr<DiallingNumbersInfo> telNumber = std::make_shared<DiallingNumbersInfo>();
        GetDiallingNumberInfo(telNumber, diallingNumbersContext->infoVec.at(0));
        int32_t errorCode = DelayedRefSingleton<CoreServiceClient>::GetInstance().AddIccDiallingNumbers(
            asyncContext.slotId, diallingNumbersContext->type, telNumber);
        TELEPHONY_LOGI(""NAPI NativeAddIccDiallingNumbers errorCode: %{public}d"", errorCode);
        asyncContext.context.errorCode = errorCode;
        asyncContext.context.resolved = (errorCode == ERROR_NONE);
    }
}","void NativeAddIccDiallingNumbers(napi_env env, void *data) { if (data == nullptr) { return; } AsyncDiallingNumbers<int32_t> *<VAR> = static_cast<AsyncDiallingNumbers<int32_t> *>(data); <TYPE><int32_t> &<VAR> = <VAR>->asyncContext; if (!IsValidSlotId(asyncContext.slotId)) { TELEPHONY_LOGE(<STR>); asyncContext.context.errorCode = ERROR_SLOT_ID_INVALID; return; } if (<VAR>->infoVec.size() > 0) { std::shared_ptr<DiallingNumbersInfo> telNumber = std::make_shared<DiallingNumbersInfo>(); GetDiallingNumberInfo(telNumber, <VAR>->infoVec.at(0)); int32_t errorCode = DelayedRefSingleton<CoreServiceClient>::GetInstance().AddIccDiallingNumbers( asyncContext.slotId, <VAR>->type, telNumber); TELEPHONY_LOGI(<STR>, errorCode); asyncContext.context.errorCode = errorCode; asyncContext.context.resolved = (errorCode == ERROR_NONE); } }"
"if (diallingNumbersContext->infoVec.size() > 0) {
        std::shared_ptr<DiallingNumbersInfo> telNumber = std::make_shared<DiallingNumbersInfo>();
        GetDiallingNumberInfo(telNumber, diallingNumbersContext->infoVec.at(0));
        int32_t errorCode = DelayedRefSingleton<CoreServiceClient>::GetInstance().AddIccDiallingNumbers(
            asyncContext.slotId, diallingNumbersContext->type, telNumber);
        TELEPHONY_LOGI(""NAPI NativeAddIccDiallingNumbers errorCode: %{public}d"", errorCode);
        asyncContext.context.errorCode = errorCode;
        asyncContext.context.resolved = (errorCode == ERROR_NONE);
    }","if (<VAR>->infoVec.size() > 0) { std::shared_ptr<DiallingNumbersInfo> telNumber = std::make_shared<DiallingNumbersInfo>(); GetDiallingNumberInfo(telNumber, <VAR>->infoVec.at(0)); int32_t errorCode = DelayedRefSingleton<CoreServiceClient>::GetInstance().AddIccDiallingNumbers( asyncContext.slotId, <VAR>->type, telNumber); TELEPHONY_LOGI(<STR>, errorCode); asyncContext.context.errorCode = errorCode; asyncContext.context.resolved = (errorCode == ERROR_NONE); }"
"napi_value AddIccDiallingNumbers(napi_env env, napi_callback_info info)
{
    auto diallingNumbers = new AsyncDiallingNumbers<int32_t>();
    BaseContext &context = diallingNumbers->asyncContext.context;
    napi_value object = NapiUtil::CreateUndefined(env);
    auto initPara =
        std::make_tuple(&diallingNumbers->asyncContext.slotId, &diallingNumbers->type, &object, &context.callbackRef);
    AsyncPara para {
        .funcName = ""AddIccDiallingNumbers"",
        .env = env,
        .info = info,
        .execute = NativeAddIccDiallingNumbers,
        .complete = AddIccDiallingNumbersCallback,
    };
    napi_value result = NapiCreateAsyncWork2<AsyncDiallingNumbers<int32_t>>(para, diallingNumbers, initPara);
    if (result) {
        TelNumbersInfo inputInfo;
        DiallingNumberParaAnalyze(env, object, inputInfo);
        diallingNumbers->infoVec.push_back(std::move(inputInfo));
        NAPI_CALL(env, napi_queue_async_work_with_qos(env, context.work, napi_qos_default));
    }
    return result;
}","napi_value AddIccDiallingNumbers(napi_env env, napi_callback_info info) { auto diallingNumbers = new AsyncDiallingNumbers<int32_t>(); BaseContext &context = diallingNumbers->asyncContext.context; napi_value object = NapiUtil::CreateUndefined(env); auto initPara = std::make_tuple(&diallingNumbers->asyncContext.slotId, &diallingNumbers->type, &object, &context.callbackRef); AsyncPara para { .funcName = <STR>, .env = env, .info = info, .execute = <TYPE>, .complete = <TYPE>, }; napi_value result = NapiCreateAsyncWork2<AsyncDiallingNumbers<int32_t>>(para, diallingNumbers, initPara); if (result) { TelNumbersInfo inputInfo; DiallingNumberParaAnalyze(env, object, inputInfo); diallingNumbers->infoVec.push_back(std::move(inputInfo)); NAPI_CALL(env, napi_queue_async_work_with_qos(env, context.work, napi_qos_default)); } return result; }"
"void NativeAcceptCallSetupRequest(napi_env env, void *data)
{
    if (data == nullptr) {
        return;
    }
    AsyncStkCallSetupResult *context = static_cast<AsyncStkCallSetupResult *>(data);
    if (!IsValidSlotId(context->asyncContext.slotId)) {
        TELEPHONY_LOGE(""NativeAcceptCallSetupRequest slotId is invalid"");
        context->asyncContext.context.errorCode = ERROR_SLOT_ID_INVALID;
        return;
    }
    int32_t errorCode = DelayedRefSingleton<CoreServiceClient>::GetInstance().SendCallSetupRequestResult(
        context->asyncContext.slotId, true);
    TELEPHONY_LOGI(""NAPI NativeAcceptCallSetupRequest %{public}d"", errorCode);
    context->asyncContext.context.errorCode = errorCode;
    context->asyncContext.context.resolved = errorCode == ERROR_NONE;
}","void NativeAcceptCallSetupRequest(napi_env env, void *data) { if (data == nullptr) { return; } AsyncStkCallSetupResult *context = static_cast<AsyncStkCallSetupResult *>(data); if (!IsValidSlotId(context->asyncContext.slotId)) { TELEPHONY_LOGE(<STR>); context->asyncContext.context.errorCode = ERROR_SLOT_ID_INVALID; return; } int32_t errorCode = DelayedRefSingleton<CoreServiceClient>::GetInstance().SendCallSetupRequestResult( context->asyncContext.slotId, <VAR>); TELEPHONY_LOGI(<STR>, errorCode); context->asyncContext.context.errorCode = errorCode; context->asyncContext.context.resolved = errorCode == ERROR_NONE; }"
"void GetEidCallback(napi_env env, napi_status status, void *data)
{
    NAPI_CALL_RETURN_VOID(env, (data == nullptr ? napi_invalid_arg : napi_ok));
    std::unique_ptr<AsyncContext<std::string>> context(static_cast<AsyncContext<std::string> *>(data));
    if (context == nullptr) {
        TELEPHONY_LOGE(""GetEidCallback context is nullptr"");
        return;
    }
    if ((!context->isCallbackEnd) && (context->context.errorCode == TELEPHONY_SUCCESS)) {
        TELEPHONY_LOGE(""GetEidCallback get result timeout."");
        context->context.errorCode = TELEPHONY_ERR_ESIM_GET_RESULT_TIMEOUT;
    }
    NapiAsyncPermissionCompleteCallback(
        env, status, *context, false, { ""GetEid"", Permission::GET_TELEPHONY_ESIM_STATE });
}","void GetEidCallback(napi_env env, napi_status status, void *data) { NAPI_CALL_RETURN_VOID(env, (data == nullptr ? napi_invalid_arg : napi_ok)); std::unique_ptr<AsyncContext<std::<TYPE>>> context(static_cast<AsyncContext<std::<TYPE>> *>(data)); if (context == nullptr) { TELEPHONY_LOGE(<STR>); return; } if ((!context->isCallbackEnd) && (context->context.errorCode == TELEPHONY_SUCCESS)) { TELEPHONY_LOGE(<STR>); context->context.errorCode = TELEPHONY_ERR_ESIM_GET_RESULT_TIMEOUT; } NapiAsyncPermissionCompleteCallback( env, status, *context, false, { <STR>, Permission::<TYPE> }); }"
"void GetEuiccInfoCallback(napi_env env, napi_status status, void *data)
{
    NAPI_CALL_RETURN_VOID(env, (data == nullptr ? napi_invalid_arg : napi_ok));
    std::unique_ptr<AsyncEuiccInfo> context(static_cast<AsyncEuiccInfo *>(data));
    if (context == nullptr) {
        TELEPHONY_LOGE(""GetEuiccInfoCallback context is nullptr"");
        return;
    }
    AsyncContext<napi_value> &asyncContext = context->asyncContext;
    if (asyncContext.context.resolved) {
        asyncContext.callbackVal = EuiccInfoConversion(env, context->result);
    }
    if ((!asyncContext.isCallbackEnd) && (asyncContext.context.errorCode == TELEPHONY_SUCCESS)) {
        TELEPHONY_LOGE(""GetEuiccInfoCallback get result timeout."");
        asyncContext.context.errorCode = TELEPHONY_ERR_ESIM_GET_RESULT_TIMEOUT;
    }
    NapiAsyncPermissionCompleteCallback(
        env, status, context->asyncContext, false, { ""GetEuiccInfo"", Permission::GET_TELEPHONY_ESIM_STATE });
}","void GetEuiccInfoCallback(napi_env env, napi_status status, void *data) { NAPI_CALL_RETURN_VOID(env, (data == nullptr ? napi_invalid_arg : napi_ok)); std::unique_ptr<<TYPE>> context(static_cast<<TYPE> *>(data)); if (context == nullptr) { TELEPHONY_LOGE(<STR>); return; } AsyncContext<napi_value> &asyncContext = context->asyncContext; if (asyncContext.context.resolved) { asyncContext.callbackVal = EuiccInfoConversion(env, context->result); } if ((!asyncContext.isCallbackEnd) && (asyncContext.context.errorCode == TELEPHONY_SUCCESS)) { TELEPHONY_LOGE(<STR>); asyncContext.context.errorCode = TELEPHONY_ERR_ESIM_GET_RESULT_TIMEOUT; } NapiAsyncPermissionCompleteCallback( env, status, context->asyncContext, false, { <STR>, Permission::<TYPE> }); }"
"napi_value GetEuiccInfo(napi_env env, napi_callback_info info)
{
    auto euiccInfo = std::make_unique<AsyncEuiccInfo>();
    if (euiccInfo == nullptr) {
        return nullptr;
    }
    BaseContext &context = euiccInfo->asyncContext.context;
    auto initPara = std::make_tuple(&euiccInfo->asyncContext.slotId, &context.callbackRef);
    AsyncPara para {
        .funcName = ""GetEuiccInfo"",
        .env = env,
        .info = info,
        .execute = NativeGetEuiccInfo,
        .complete = GetEuiccInfoCallback,
    };
    napi_value result = NapiCreateAsyncWork2<AsyncEuiccInfo>(para, euiccInfo.get(), initPara);
    if (result == nullptr) {
        TELEPHONY_LOGE(""creat asyncwork failed!"");
        return nullptr;
    }
    if (napi_queue_async_work_with_qos(env, context.work, napi_qos_default) == napi_ok) {
        euiccInfo.release();
    }
    return result;
}","napi_value GetEuiccInfo(napi_env env, napi_callback_info info) { auto <VAR> = std::make_unique<<TYPE>>(); if (<VAR> == nullptr) { return nullptr; } BaseContext &context = <VAR>->asyncContext.context; auto initPara = std::make_tuple(&<VAR>->asyncContext.slotId, &context.callbackRef); AsyncPara para { .funcName = <STR>, .env = env, .info = info, .execute = <TYPE>, .complete = <TYPE>, }; napi_value result = NapiCreateAsyncWork2<<TYPE>>(para, <VAR>.get(), initPara); if (result == nullptr) { TELEPHONY_LOGE(""creat asyncwork failed!""); return nullptr; } if (napi_queue_async_work_with_qos(env, context.work, napi_qos_default) == napi_ok) { <VAR>.release(); } return result; }"
"void SetDefaultSmdpAddressCallback(napi_env env, napi_status status, void *data)
{
    NAPI_CALL_RETURN_VOID(env, (data == nullptr ? napi_invalid_arg : napi_ok));
    std::unique_ptr<AsyncContextInfo> context(static_cast<AsyncContextInfo *>(data));
    if (context == nullptr) {
        TELEPHONY_LOGE(""SetDefaultSmdpAddressCallback context is nullptr"");
        return;
    }
    if ((!context->asyncContext.isCallbackEnd) && (context->asyncContext.context.errorCode == TELEPHONY_SUCCESS)) {
        TELEPHONY_LOGE(""SetDefaultSmdpAddressCallback get result timeout."");
        context->asyncContext.context.errorCode = TELEPHONY_ERR_ESIM_GET_RESULT_TIMEOUT;
    }
    NapiAsyncPermissionCompleteCallback(
        env, status, context->asyncContext, false, { ""SetDefaultSmdpAddress"", Permission::SET_TELEPHONY_ESIM_STATE });
}","void SetDefaultSmdpAddressCallback(napi_env env, napi_status status, void *data) { NAPI_CALL_RETURN_VOID(env, (data == nullptr ? napi_invalid_arg : napi_ok)); std::unique_ptr<<TYPE>> context(static_cast<<TYPE> *>(data)); if (context == nullptr) { TELEPHONY_LOGE(<STR>); return; } if ((!context->asyncContext.isCallbackEnd) && (context->asyncContext.context.errorCode == TELEPHONY_SUCCESS)) { TELEPHONY_LOGE(<STR>); context->asyncContext.context.errorCode = TELEPHONY_ERR_ESIM_GET_RESULT_TIMEOUT; } NapiAsyncPermissionCompleteCallback( env, status, context->asyncContext, false, { <STR>, Permission::SET_TELEPHONY_ESIM_STATE }); }"
"napi_value SetDefaultSmdpAddress(napi_env env, napi_callback_info info)
{
    auto asyncContext = std::make_unique<AsyncContextInfo>();
    if (asyncContext == nullptr) {
        return nullptr;
    }
    BaseContext &context = asyncContext->asyncContext.context;
    std::array<char, ARRAY_SIZE> inputTepStr = {0};
    auto initPara = std::make_tuple(&asyncContext->asyncContext.slotId, std::data(inputTepStr), &context.callbackRef);
    AsyncPara para {
        .funcName = ""SetDefaultSmdpAddress"",
        .env = env,
        .info = info,
        .execute = NativeSetDefaultSmdpAddress,
        .complete = SetDefaultSmdpAddressCallback,
    };
    napi_value result = NapiCreateAsyncWork2<AsyncContextInfo>(para, asyncContext.get(), initPara);
    if (result == nullptr) {
        TELEPHONY_LOGE(""creat asyncwork failed!"");
        return nullptr;
    }
    asyncContext->inputStr = std::string(inputTepStr.data());
    if (napi_queue_async_work_with_qos(env, context.work, napi_qos_default) == napi_ok) {
        asyncContext.release();
    }
    return result;
}","napi_value SetDefaultSmdpAddress(napi_env env, napi_callback_info info) { auto <VAR> = std::make_unique<<TYPE>>(); if (<VAR> == nullptr) { return nullptr; } BaseContext &context = <VAR>->asyncContext.context; std::array<char, ARRAY_SIZE> <VAR> = {0}; auto initPara = std::make_tuple(&<VAR>->asyncContext.slotId, std::data(<VAR>), &context.callbackRef); AsyncPara para { .funcName = <STR>, .env = env, .info = info, .execute = <TYPE>, .complete = <TYPE>, }; napi_value result = NapiCreateAsyncWork2<<TYPE>>(para, asyncContext.get(), initPara); if (result == nullptr) { TELEPHONY_LOGE(""creat asyncwork failed!""); return nullptr; } <VAR>-><VAR> = std::string(<VAR>.data()); if (napi_queue_async_work_with_qos(env, context.work, napi_qos_default) == napi_ok) { asyncContext.release(); } <VAR> <VAR>; }"
"void NativeSwitchToProfile(napi_env env, void *data)
{
    if (data == nullptr) {
        return;
    }
    auto profileContext = static_cast<AsyncSwitchProfileInfo *>(data);
    if (!IsValidSlotId(profileContext->asyncContext.slotId)) {
        TELEPHONY_LOGE(""NativeGetEuiccInfo slotId is invalid"");
        profileContext->asyncContext.context.errorCode = ERROR_SLOT_ID_INVALID;
        return;
    }
    std::unique_ptr<SwitchToProfileResultCallback> callback =
        std::make_unique<SwitchToProfileResultCallback>(profileContext);
    std::unique_lock<std::mutex> callbackLock(profileContext->asyncContext.callbackMutex);
    int32_t errorCode = DelayedRefSingleton<EsimServiceClient>::GetInstance().SwitchToProfile(
        profileContext->asyncContext.slotId, profileContext->portIndex, profileContext->iccid,
        profileContext->forceDisableProfile, callback.release());
    TELEPHONY_LOGI(""NAPI NativeSwitchToProfile %{public}d"", errorCode);
    profileContext->asyncContext.context.errorCode = errorCode;
    if (errorCode == TELEPHONY_SUCCESS) {
        profileContext->asyncContext.cv.wait_for(callbackLock, std::chrono::seconds(WAIT_TIME_SECOND),
            [profileContext] { return profileContext->asyncContext.isCallbackEnd; });
    }
}","void NativeSwitchToProfile(napi_env env, void *data) { if (data == nullptr) { return; } auto profileContext = static_cast<<TYPE> *>(data); if (!IsValidSlotId(profileContext->asyncContext.slotId)) { TELEPHONY_LOGE(<STR>); profileContext->asyncContext.context.errorCode = ERROR_SLOT_ID_INVALID; return; } std::unique_ptr<<TYPE>> callback = std::make_unique<<TYPE>>(profileContext); std::unique_lock<std::mutex> callbackLock(profileContext->asyncContext.callbackMutex); int32_t errorCode = DelayedRefSingleton<EsimServiceClient>::GetInstance().SwitchToProfile( profileContext->asyncContext.slotId, profileContext-><VAR>, profileContext-><VAR>, profileContext-><VAR>, callback.release()); TELEPHONY_LOGI(<STR>, errorCode); profileContext->asyncContext.context.errorCode = errorCode; if (errorCode == TELEPHONY_SUCCESS) { profileContext->asyncContext.cv.wait_for(callbackLock, std::chrono::seconds(WAIT_TIME_SECOND), [profileContext] { return profileContext->asyncContext.isCallbackEnd; }); } }"
"void DeleteProfileCallback(napi_env env, napi_status status, void *data)
{
    NAPI_CALL_RETURN_VOID(env, (data == nullptr ? napi_invalid_arg : napi_ok));
    std::unique_ptr<AsyncContextInfo> context(static_cast<AsyncContextInfo *>(data));
    if (context == nullptr) {
        TELEPHONY_LOGE(""DeleteProfileCallback context is nullptr"");
        return;
    }
    if ((!context->asyncContext.isCallbackEnd) && (context->asyncContext.context.errorCode == TELEPHONY_SUCCESS)) {
        TELEPHONY_LOGE(""DeleteProfileCallback get result timeout."");
        context->asyncContext.context.errorCode = TELEPHONY_ERR_ESIM_GET_RESULT_TIMEOUT;
    }
    NapiAsyncPermissionCompleteCallback(
        env, status, context->asyncContext, false, { ""DeleteProfile"", Permission::SET_TELEPHONY_ESIM_STATE });
}","void DeleteProfileCallback(napi_env env, napi_status status, void *data) { NAPI_CALL_RETURN_VOID(env, (data == nullptr ? napi_invalid_arg : napi_ok)); std::unique_ptr<<TYPE>> context(static_cast<<TYPE> *>(data)); if (context == nullptr) { TELEPHONY_LOGE(<STR>); return; } if ((!context->asyncContext.isCallbackEnd) && (context->asyncContext.context.errorCode == TELEPHONY_SUCCESS)) { TELEPHONY_LOGE(<STR>); context->asyncContext.context.errorCode = TELEPHONY_ERR_ESIM_GET_RESULT_TIMEOUT; } NapiAsyncPermissionCompleteCallback( env, status, context->asyncContext, false, { <STR>, Permission::SET_TELEPHONY_ESIM_STATE }); }"
"void NapiUtil::SetPropertyInt32(napi_env env, napi_value object, const std::string &name, int32_t value)
{
    napi_value propertyValue = nullptr;
    NAPI_CALL_RETURN_VOID(env, napi_create_int32(env, value, &propertyValue));
    NAPI_CALL_RETURN_VOID(env, napi_set_named_property(env, object, name.c_str(), propertyValue));
}","void NapiUtil::SetPropertyInt32(napi_env env, napi_value object, const std::string &name, <TYPE> value) { napi_value propertyValue = nullptr; NAPI_CALL_RETURN_VOID(env, napi_create_int32(env, value, &propertyValue)); NAPI_CALL_RETURN_VOID(env, napi_set_named_property(env, object, name.c_str(), propertyValue)); }"
"if (!IsValidSlotId(slotId)) {
            TELEPHONY_LOGE(""NativeIsSimActive slotId is invalid"");
            errCode = ConvertCJErrCode(ERROR_SLOT_ID_INVALID);
            return result;
        }",if (!IsValidSlotId(slotId)) { TELEPHONY_LOGE(<STR>); errCode = ConvertCJErrCode(ERROR_SLOT_ID_INVALID); return result; }
"if (!IsValidSlotId(slotId)) {
            TELEPHONY_LOGE(""NativeHasOperatorPrivileges slotId is invalid"");
            errCode = ConvertCJErrCode(ERROR_SLOT_ID_INVALID);
            return hasOperatorPrivileges;
        }",if (!IsValidSlotId(slotId)) { TELEPHONY_LOGE(<STR>); errCode = ConvertCJErrCode(ERROR_SLOT_ID_INVALID); return <VAR>; }
char* result = MallocCString(operatorName);,char* result = MallocCString(<VAR>);
CIccAccountInfo* head = nullptr;,<TYPE>* head = nullptr;
head = reinterpret_cast<CIccAccountInfo *>(malloc(sizeof(CIccAccountInfo) * infoSize)),head = reinterpret_cast<<TYPE> *>(malloc(sizeof(<TYPE>) * infoSize))
"char* TelephonySimImpl::getOpKey(int32_t slotId, int32_t &errCode)
    {
        if (!IsValidSlotId(slotId)) {
            TELEPHONY_LOGE(""NativeGetOpKey slotId is invalid"");
            errCode = ConvertCJErrCode(ERROR_SLOT_ID_INVALID);
            return nullptr;
        }
        std::u16string u16Opkey = u"""";
        errCode = DelayedRefSingleton<CoreServiceClient>::GetInstance().GetOpKey(slotId, u16Opkey);
        std::string opkey = errCode == ERROR_NONE ? ToUtf8(u16Opkey) : """";
        errCode = ConvertCJErrCode(errCode);
        char* result = MallocCString(opkey);
        return result;
    }","char* TelephonySimImpl::getOpKey(int32_t slotId, int32_t &errCode) { if (!IsValidSlotId(slotId)) { TELEPHONY_LOGE(<STR>); errCode = ConvertCJErrCode(ERROR_SLOT_ID_INVALID); return nullptr; } std::u16string <VAR> = u""""; errCode = DelayedRefSingleton<CoreServiceClient>::GetInstance().GetOpKey(slotId, <VAR>); std::string <VAR> = errCode == ERROR_NONE ? ToUtf8(<VAR>) : """"; errCode = ConvertCJErrCode(errCode); char* result = MallocCString(<VAR>); return result; }"
std::unique_lock<std::mutex> callbackLock(asyncContext_->callbackMutex);,std::unique_lock<std::mutex> callbackLock(<VAR>->callbackMutex);
networkRadioTech.csRadioTech = WrapRadioTech(csRadioTech),networkRadioTech.<VAR> = WrapRadioTech(<VAR>)
errCode = ConvertCJErrCode(csResult),errCode = ConvertCJErrCode(<VAR>)
